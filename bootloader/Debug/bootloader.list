
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000652c  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08006764  08006764  00016764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080068dc  080068dc  000168dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080068e4  080068e4  000168e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080068e8  080068e8  000168e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080068ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c8  20000070  0800695c  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000138  0800695c  00020138  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f4b5  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001d2a  00000000  00000000  0002f55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000be0  00000000  00000000  00031288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b28  00000000  00000000  00031e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032551  00000000  00000000  00032990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e8f7  00000000  00000000  00064ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00138e66  00000000  00000000  000737d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ac63e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003708  00000000  00000000  001ac690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	0800674c 	.word	0x0800674c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	0800674c 	.word	0x0800674c

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ae:	4604      	mov	r4, r0
 80002b0:	460f      	mov	r7, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d148      	bne.n	8000348 <__udivmoddi4+0xa0>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d961      	bls.n	8000380 <__udivmoddi4+0xd8>
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	b143      	cbz	r3, 80002d4 <__udivmoddi4+0x2c>
 80002c2:	f1c3 0120 	rsb	r1, r3, #32
 80002c6:	409f      	lsls	r7, r3
 80002c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002cc:	409c      	lsls	r4, r3
 80002ce:	fa20 f101 	lsr.w	r1, r0, r1
 80002d2:	430f      	orrs	r7, r1
 80002d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d8:	fa1f fe8c 	uxth.w	lr, ip
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbb7 f6f1 	udiv	r6, r7, r1
 80002e2:	fb01 7716 	mls	r7, r1, r6, r7
 80002e6:	fb06 f00e 	mul.w	r0, r6, lr
 80002ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x5c>
 80002f2:	eb1c 0202 	adds.w	r2, ip, r2
 80002f6:	f106 37ff 	add.w	r7, r6, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x5a>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f200 8137 	bhi.w	8000570 <__udivmoddi4+0x2c8>
 8000302:	463e      	mov	r6, r7
 8000304:	1a12      	subs	r2, r2, r0
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb2 f0f1 	udiv	r0, r2, r1
 800030c:	fb01 2210 	mls	r2, r1, r0, r2
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000318:	45a6      	cmp	lr, r4
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x86>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x84>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f200 811c 	bhi.w	8000564 <__udivmoddi4+0x2bc>
 800032c:	4610      	mov	r0, r2
 800032e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000332:	eba4 040e 	sub.w	r4, r4, lr
 8000336:	2600      	movs	r6, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c5 4300 	strd	r4, r3, [r5]
 8000342:	4631      	mov	r1, r6
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	428b      	cmp	r3, r1
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0xb8>
 800034c:	2d00      	cmp	r5, #0
 800034e:	f000 80fd 	beq.w	800054c <__udivmoddi4+0x2a4>
 8000352:	2600      	movs	r6, #0
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	4630      	mov	r0, r6
 800035a:	4631      	mov	r1, r6
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	fab3 f683 	clz	r6, r3
 8000364:	2e00      	cmp	r6, #0
 8000366:	d14b      	bne.n	8000400 <__udivmoddi4+0x158>
 8000368:	428b      	cmp	r3, r1
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4282      	cmp	r2, r0
 8000370:	f240 80ef 	bls.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4630      	mov	r0, r6
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e3      	beq.n	8000342 <__udivmoddi4+0x9a>
 800037a:	e9c5 4700 	strd	r4, r7, [r5]
 800037e:	e7e0      	b.n	8000342 <__udivmoddi4+0x9a>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xdc>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f382 	clz	r3, r2
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 809d 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b297      	uxth	r7, r2
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f2fe 	udiv	r2, r1, lr
 800039e:	fb0e 1112 	mls	r1, lr, r2, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb07 f002 	mul.w	r0, r7, r2
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4288      	cmp	r0, r1
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80cf 	beq.w	800056a <__udivmoddi4+0x2c2>
 80003cc:	4642      	mov	r2, r8
 80003ce:	1a09      	subs	r1, r1, r0
 80003d0:	b2a4      	uxth	r4, r4
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 f707 	mul.w	r7, r0, r7
 80003de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e2:	42a7      	cmp	r7, r4
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x150>
 80003e6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x14e>
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	f200 80b4 	bhi.w	800055e <__udivmoddi4+0x2b6>
 80003f6:	4608      	mov	r0, r1
 80003f8:	1be4      	subs	r4, r4, r7
 80003fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fe:	e79b      	b.n	8000338 <__udivmoddi4+0x90>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa01 f406 	lsl.w	r4, r1, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	40f9      	lsrs	r1, r7
 8000410:	40b2      	lsls	r2, r6
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f307 	lsr.w	r3, r0, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	431c      	orrs	r4, r3
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	0c20      	lsrs	r0, r4, #16
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	fb09 1118 	mls	r1, r9, r8, r1
 8000432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000436:	fb08 f00e 	mul.w	r0, r8, lr
 800043a:	4288      	cmp	r0, r1
 800043c:	d90f      	bls.n	800045e <__udivmoddi4+0x1b6>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f108 3aff 	add.w	sl, r8, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	4288      	cmp	r0, r1
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 808d 	beq.w	8000576 <__udivmoddi4+0x2ce>
 800045c:	46d0      	mov	r8, sl
 800045e:	1a09      	subs	r1, r1, r0
 8000460:	b2a4      	uxth	r4, r4
 8000462:	fbb1 f0f9 	udiv	r0, r1, r9
 8000466:	fb09 1110 	mls	r1, r9, r0, r1
 800046a:	fb00 fe0e 	mul.w	lr, r0, lr
 800046e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000472:	458e      	cmp	lr, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1de>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d201      	bcs.n	8000484 <__udivmoddi4+0x1dc>
 8000480:	458e      	cmp	lr, r1
 8000482:	d87f      	bhi.n	8000584 <__udivmoddi4+0x2dc>
 8000484:	4620      	mov	r0, r4
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	fba0 9802 	umull	r9, r8, r0, r2
 8000492:	4541      	cmp	r1, r8
 8000494:	464c      	mov	r4, r9
 8000496:	46c6      	mov	lr, r8
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x1f8>
 800049a:	d106      	bne.n	80004aa <__udivmoddi4+0x202>
 800049c:	454b      	cmp	r3, r9
 800049e:	d204      	bcs.n	80004aa <__udivmoddi4+0x202>
 80004a0:	3801      	subs	r0, #1
 80004a2:	ebb9 0402 	subs.w	r4, r9, r2
 80004a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d070      	beq.n	8000590 <__udivmoddi4+0x2e8>
 80004ae:	1b1a      	subs	r2, r3, r4
 80004b0:	eb61 010e 	sbc.w	r1, r1, lr
 80004b4:	fa22 f306 	lsr.w	r3, r2, r6
 80004b8:	fa01 f707 	lsl.w	r7, r1, r7
 80004bc:	40f1      	lsrs	r1, r6
 80004be:	2600      	movs	r6, #0
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0020 	rsb	r0, r3, #32
 80004d0:	fa01 f203 	lsl.w	r2, r1, r3
 80004d4:	fa21 f600 	lsr.w	r6, r1, r0
 80004d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004dc:	fa24 f100 	lsr.w	r1, r4, r0
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	409c      	lsls	r4, r3
 80004e6:	4311      	orrs	r1, r2
 80004e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ec:	0c0a      	lsrs	r2, r1, #16
 80004ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80004f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f6:	fb00 f607 	mul.w	r6, r0, r7
 80004fa:	4296      	cmp	r6, r2
 80004fc:	d90e      	bls.n	800051c <__udivmoddi4+0x274>
 80004fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	bf2c      	ite	cs
 8000508:	f04f 0901 	movcs.w	r9, #1
 800050c:	f04f 0900 	movcc.w	r9, #0
 8000510:	4296      	cmp	r6, r2
 8000512:	d902      	bls.n	800051a <__udivmoddi4+0x272>
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	d031      	beq.n	800057e <__udivmoddi4+0x2d6>
 800051a:	4640      	mov	r0, r8
 800051c:	1b92      	subs	r2, r2, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb2 f6fe 	udiv	r6, r2, lr
 8000524:	fb0e 2216 	mls	r2, lr, r6, r2
 8000528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800052c:	fb06 f207 	mul.w	r2, r6, r7
 8000530:	428a      	cmp	r2, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x29c>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295
 800053c:	d201      	bcs.n	8000542 <__udivmoddi4+0x29a>
 800053e:	428a      	cmp	r2, r1
 8000540:	d823      	bhi.n	800058a <__udivmoddi4+0x2e2>
 8000542:	4646      	mov	r6, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054a:	e725      	b.n	8000398 <__udivmoddi4+0xf0>
 800054c:	462e      	mov	r6, r5
 800054e:	4628      	mov	r0, r5
 8000550:	e6f7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000552:	1a84      	subs	r4, r0, r2
 8000554:	eb61 0303 	sbc.w	r3, r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	461f      	mov	r7, r3
 800055c:	e70b      	b.n	8000376 <__udivmoddi4+0xce>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e749      	b.n	80003f8 <__udivmoddi4+0x150>
 8000564:	4464      	add	r4, ip
 8000566:	3802      	subs	r0, #2
 8000568:	e6e1      	b.n	800032e <__udivmoddi4+0x86>
 800056a:	3a02      	subs	r2, #2
 800056c:	4461      	add	r1, ip
 800056e:	e72e      	b.n	80003ce <__udivmoddi4+0x126>
 8000570:	3e02      	subs	r6, #2
 8000572:	4462      	add	r2, ip
 8000574:	e6c6      	b.n	8000304 <__udivmoddi4+0x5c>
 8000576:	f1a8 0802 	sub.w	r8, r8, #2
 800057a:	4461      	add	r1, ip
 800057c:	e76f      	b.n	800045e <__udivmoddi4+0x1b6>
 800057e:	3802      	subs	r0, #2
 8000580:	4462      	add	r2, ip
 8000582:	e7cb      	b.n	800051c <__udivmoddi4+0x274>
 8000584:	3802      	subs	r0, #2
 8000586:	4461      	add	r1, ip
 8000588:	e77d      	b.n	8000486 <__udivmoddi4+0x1de>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7d9      	b.n	8000544 <__udivmoddi4+0x29c>
 8000590:	462e      	mov	r6, r5
 8000592:	e6d6      	b.n	8000342 <__udivmoddi4+0x9a>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Override _write() function for printf
int _write(int file, char *ptr, int len) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t *)ptr, len, HAL_MAX_DELAY); // Transmit data via UART
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ac:	68b9      	ldr	r1, [r7, #8]
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <_write+0x28>)
 80005b0:	f004 fe42 	bl	8005238 <HAL_UART_Transmit>
    return len;
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000008c 	.word	0x2000008c

080005c4 <go2App>:

void go2App(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
	uint32_t JumpAddress;
	pFunction Jump_To_Application; //pFunction means pointer to a function
	printf("Bootloader Start\r\n");
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <go2App+0x30>)
 80005cc:	f005 fc30 	bl	8005e30 <puts>

	//jump to application
	JumpAddress = *(uint32_t*) (FLASH_APP_ADDR + 4); //where reset handler of the application is stored
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <go2App+0x34>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	60fb      	str	r3, [r7, #12]
	Jump_To_Application = (pFunction) JumpAddress;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	60bb      	str	r3, [r7, #8]
	//initialize application’s stack pointer
	__set_MSP(*(__IO uint32_t*)FLASH_APP_ADDR);
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <go2App+0x38>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f383 8808 	msr	MSP, r3
}
 80005e6:	bf00      	nop
	Jump_To_Application();
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	4798      	blx	r3
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08006764 	.word	0x08006764
 80005f8:	08008004 	.word	0x08008004
 80005fc:	08008000 	.word	0x08008000

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fa40 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f807 	bl	800061a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f89a 	bl	8000744 <MX_GPIO_Init>
  MX_UART4_Init();
 8000610:	f000 f84c 	bl	80006ac <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  go2App();
 8000614:	f7ff ffd6 	bl	80005c4 <go2App>
 8000618:	e7fc      	b.n	8000614 <main+0x14>

0800061a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b09e      	sub	sp, #120	; 0x78
 800061e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000620:	f107 0318 	add.w	r3, r7, #24
 8000624:	2260      	movs	r2, #96	; 0x60
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f005 fb8b 	bl	8005d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
 800063c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 800063e:	2000      	movs	r0, #0
 8000640:	f000 fd62 	bl	8001108 <HAL_PWREx_ControlVoltageScaling>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800064a:	f000 f895 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800064e:	2310      	movs	r3, #16
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800065a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000660:	2300      	movs	r3, #0
 8000662:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0318 	add.w	r3, r7, #24
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fdd9 	bl	8001220 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000674:	f000 f880 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	231f      	movs	r3, #31
 800067a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fc9f 	bl	8001fd8 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006a0:	f000 f86a 	bl	8000778 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3778      	adds	r7, #120	; 0x78
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_UART4_Init+0x90>)
 80006b2:	4a23      	ldr	r2, [pc, #140]	; (8000740 <MX_UART4_Init+0x94>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_UART4_Init+0x90>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_UART4_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_UART4_Init+0x90>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_UART4_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_UART4_Init+0x90>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_UART4_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_UART4_Init+0x90>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_UART4_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_UART4_Init+0x90>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_UART4_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006f4:	4811      	ldr	r0, [pc, #68]	; (800073c <MX_UART4_Init+0x90>)
 80006f6:	f004 fd4f 	bl	8005198 <HAL_UART_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000700:	f000 f83a 	bl	8000778 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_UART4_Init+0x90>)
 8000708:	f005 fa28 	bl	8005b5c <HAL_UARTEx_SetTxFifoThreshold>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000712:	f000 f831 	bl	8000778 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000716:	2100      	movs	r1, #0
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <MX_UART4_Init+0x90>)
 800071a:	f005 fa5d 	bl	8005bd8 <HAL_UARTEx_SetRxFifoThreshold>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000724:	f000 f828 	bl	8000778 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_UART4_Init+0x90>)
 800072a:	f005 f9de 	bl	8005aea <HAL_UARTEx_DisableFifoMode>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000734:	f000 f820 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000008c 	.word	0x2000008c
 8000740:	40004c00 	.word	0x40004c00

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_GPIO_Init+0x30>)
 800074c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000750:	4a08      	ldr	r2, [pc, #32]	; (8000774 <MX_GPIO_Init+0x30>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_GPIO_Init+0x30>)
 800075c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	46020c00 	.word	0x46020c00

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>

08000782 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b0bc      	sub	sp, #240	; 0xf0
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	22c8      	movs	r2, #200	; 0xc8
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f005 fac7 	bl	8005d44 <memset>
  if(huart->Instance==UART4)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a26      	ldr	r2, [pc, #152]	; (8000854 <HAL_UART_MspInit+0xc4>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d145      	bne.n	800084c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80007c0:	f04f 0208 	mov.w	r2, #8
 80007c4:	f04f 0300 	mov.w	r3, #0
 80007c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 ffd5 	bl	8002784 <HAL_RCCEx_PeriphCLKConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80007e0:	f7ff ffca 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <HAL_UART_MspInit+0xc8>)
 80007e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80007ea:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <HAL_UART_MspInit+0xc8>)
 80007ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_UART_MspInit+0xc8>)
 80007f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80007fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_UART_MspInit+0xc8>)
 8000804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <HAL_UART_MspInit+0xc8>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_UART_MspInit+0xc8>)
 8000814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000820:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000824:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800083a:	2308      	movs	r3, #8
 800083c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000840:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000844:	4619      	mov	r1, r3
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_UART_MspInit+0xcc>)
 8000848:	f000 fa86 	bl	8000d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800084c:	bf00      	nop
 800084e:	37f0      	adds	r7, #240	; 0xf0
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40004c00 	.word	0x40004c00
 8000858:	46020c00 	.word	0x46020c00
 800085c:	42020800 	.word	0x42020800

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 f950 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	e00a      	b.n	80008dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008c6:	e000      	b.n	80008ca <_read+0x16>
 80008c8:	bf00      	nop
 80008ca:	4601      	mov	r1, r0
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	1c5a      	adds	r2, r3, #1
 80008d0:	60ba      	str	r2, [r7, #8]
 80008d2:	b2ca      	uxtb	r2, r1
 80008d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	3301      	adds	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697a      	ldr	r2, [r7, #20]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	dbf0      	blt.n	80008c6 <_read+0x12>
  }

  return len;
 80008e4:	687b      	ldr	r3, [r7, #4]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000916:	605a      	str	r2, [r3, #4]
  return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <_isatty>:

int _isatty(int file)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f005 f9b2 	bl	8005cf0 <__errno>
 800098c:	4603      	mov	r3, r0
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <_sbrk+0x64>)
 80009a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200c0000 	.word	0x200c0000
 80009b8:	00000400 	.word	0x00000400
 80009bc:	20000120 	.word	0x20000120
 80009c0:	20000138 	.word	0x20000138

080009c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <SystemInit+0x68>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <SystemInit+0x68>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <SystemInit+0x6c>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <SystemInit+0x6c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <SystemInit+0x6c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <SystemInit+0x6c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <SystemInit+0x6c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <SystemInit+0x6c>)
 80009f6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009fa:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <SystemInit+0x6c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <SystemInit+0x6c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <SystemInit+0x6c>)
 8000a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <SystemInit+0x6c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SystemInit+0x68>)
 8000a1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a1e:	609a      	str	r2, [r3, #8]
  #endif
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00
 8000a30:	46020c00 	.word	0x46020c00

08000a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a6c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a38:	f7ff ffc4 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a3e:	e003      	b.n	8000a48 <LoopCopyDataInit>

08000a40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a46:	3104      	adds	r1, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a48:	480a      	ldr	r0, [pc, #40]	; (8000a74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a50:	d3f6      	bcc.n	8000a40 <CopyDataInit>
	ldr	r2, =_sbss
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a54:	e002      	b.n	8000a5c <LoopFillZerobss>

08000a56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a58:	f842 3b04 	str.w	r3, [r2], #4

08000a5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <LoopForever+0x16>)
	cmp	r2, r3
 8000a5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a60:	d3f9      	bcc.n	8000a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a62:	f005 f94b 	bl	8005cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a66:	f7ff fdcb 	bl	8000600 <main>

08000a6a <LoopForever>:

LoopForever:
    b LoopForever
 8000a6a:	e7fe      	b.n	8000a6a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000a6c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000a70:	080068ec 	.word	0x080068ec
	ldr	r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a78:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000a7c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000a80:	20000138 	.word	0x20000138

08000a84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_IRQHandler>
	...

08000a88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_Init+0x4c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_Init+0x4c>)
 8000a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f92b 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000a9e:	f001 fc8d 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_Init+0x50>)
 8000aa6:	6a1b      	ldr	r3, [r3, #32]
 8000aa8:	f003 030f 	and.w	r3, r3, #15
 8000aac:	490b      	ldr	r1, [pc, #44]	; (8000adc <HAL_Init+0x54>)
 8000aae:	5ccb      	ldrb	r3, [r1, r3]
 8000ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_Init+0x58>)
 8000ab6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab8:	200f      	movs	r0, #15
 8000aba:	f000 f813 	bl	8000ae4 <HAL_InitTick>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e002      	b.n	8000ace <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fe5b 	bl	8000782 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40022000 	.word	0x40022000
 8000ad8:	46020c00 	.word	0x46020c00
 8000adc:	08006778 	.word	0x08006778
 8000ae0:	20000000 	.word	0x20000000

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_InitTick+0x60>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d101      	bne.n	8000af8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e021      	b.n	8000b3c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <HAL_InitTick+0x64>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_InitTick+0x60>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f915 	bl	8000d3e <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00e      	b.n	8000b3c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d80a      	bhi.n	8000b3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f000 f8ed 	bl	8000d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <HAL_InitTick+0x68>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000124 	.word	0x20000124

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000124 	.word	0x20000124

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f7ff ff8e 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff47 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff5e 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff90 	bl	8000c48 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5f 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffb2 	bl	8000cb0 <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d6a:	e1ba      	b.n	80010e2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2101      	movs	r1, #1
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 81aa 	beq.w	80010dc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a55      	ldr	r2, [pc, #340]	; (8000ee0 <HAL_GPIO_Init+0x188>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d15d      	bne.n	8000e4c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000d96:	2201      	movs	r2, #1
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69fa      	ldr	r2, [r7, #28]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0201 	and.w	r2, r3, #1
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69fa      	ldr	r2, [r7, #28]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69fa      	ldr	r2, [r7, #28]
 8000dbe:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000dc0:	4a48      	ldr	r2, [pc, #288]	; (8000ee4 <HAL_GPIO_Init+0x18c>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000dc8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000dca:	4a46      	ldr	r2, [pc, #280]	; (8000ee4 <HAL_GPIO_Init+0x18c>)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	4413      	add	r3, r2
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	220f      	movs	r2, #15
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69fa      	ldr	r2, [r7, #28]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	220b      	movs	r2, #11
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69fa      	ldr	r2, [r7, #28]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	08da      	lsrs	r2, r3, #3
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	3208      	adds	r2, #8
 8000e16:	69f9      	ldr	r1, [r7, #28]
 8000e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2202      	movs	r2, #2
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	e067      	b.n	8000f1c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x104>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b12      	cmp	r3, #18
 8000e5a:	d145      	bne.n	8000ee8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	220f      	movs	r2, #15
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	f003 020f 	and.w	r2, r3, #15
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69fa      	ldr	r2, [r7, #28]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	69f9      	ldr	r1, [r7, #28]
 8000ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69fa      	ldr	r2, [r7, #28]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0203 	and.w	r2, r3, #3
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69fa      	ldr	r2, [r7, #28]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	69fa      	ldr	r2, [r7, #28]
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	e01e      	b.n	8000f1c <HAL_GPIO_Init+0x1c4>
 8000ede:	bf00      	nop
 8000ee0:	46020000 	.word	0x46020000
 8000ee4:	080067d0 	.word	0x080067d0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0203 	and.w	r2, r3, #3
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69fa      	ldr	r2, [r7, #28]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	69fa      	ldr	r2, [r7, #28]
 8000f1a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d00b      	beq.n	8000f3c <HAL_GPIO_Init+0x1e4>
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d007      	beq.n	8000f3c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f30:	2b11      	cmp	r3, #17
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b12      	cmp	r3, #18
 8000f3a:	d130      	bne.n	8000f9e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000f72:	2201      	movs	r2, #1
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	f003 0201 	and.w	r2, r3, #1
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	69fa      	ldr	r2, [r7, #28]
 8000f9c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d017      	beq.n	8000fd6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d07c      	beq.n	80010dc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000fe2:	4a47      	ldr	r2, [pc, #284]	; (8001100 <HAL_GPIO_Init+0x3a8>)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3318      	adds	r3, #24
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69fa      	ldr	r2, [r7, #28]
 8001002:	4013      	ands	r3, r2
 8001004:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	0a9a      	lsrs	r2, r3, #10
 800100a:	4b3e      	ldr	r3, [pc, #248]	; (8001104 <HAL_GPIO_Init+0x3ac>)
 800100c:	4013      	ands	r3, r2
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	f002 0203 	and.w	r2, r2, #3
 8001014:	00d2      	lsls	r2, r2, #3
 8001016:	4093      	lsls	r3, r2
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	4313      	orrs	r3, r2
 800101c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800101e:	4938      	ldr	r1, [pc, #224]	; (8001100 <HAL_GPIO_Init+0x3a8>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3318      	adds	r3, #24
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800102c:	4b34      	ldr	r3, [pc, #208]	; (8001100 <HAL_GPIO_Init+0x3a8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	4013      	ands	r3, r2
 800103a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001050:	4a2b      	ldr	r2, [pc, #172]	; (8001100 <HAL_GPIO_Init+0x3a8>)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <HAL_GPIO_Init+0x3a8>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	4013      	ands	r3, r2
 8001064:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001072:	69fa      	ldr	r2, [r7, #28]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800107a:	4a21      	ldr	r2, [pc, #132]	; (8001100 <HAL_GPIO_Init+0x3a8>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <HAL_GPIO_Init+0x3a8>)
 8001082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001086:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	4013      	ands	r3, r2
 8001090:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80010a6:	4a16      	ldr	r2, [pc, #88]	; (8001100 <HAL_GPIO_Init+0x3a8>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_GPIO_Init+0x3a8>)
 80010b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	4013      	ands	r3, r2
 80010be:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <HAL_GPIO_Init+0x3a8>)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3301      	adds	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f47f ae3d 	bne.w	8000d6c <HAL_GPIO_Init+0x14>
  }
}
 80010f2:	bf00      	nop
 80010f4:	bf00      	nop
 80010f6:	3724      	adds	r7, #36	; 0x24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	46022000 	.word	0x46022000
 8001104:	002f7f7f 	.word	0x002f7f7f

08001108 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001110:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001114:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001118:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d10b      	bne.n	800113a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001128:	d905      	bls.n	8001136 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800112a:	4b33      	ldr	r3, [pc, #204]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	4a32      	ldr	r2, [pc, #200]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001134:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e057      	b.n	80011ea <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001140:	d90a      	bls.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4313      	orrs	r3, r2
 800114e:	4a2a      	ldr	r2, [pc, #168]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001154:	60d3      	str	r3, [r2, #12]
 8001156:	e007      	b.n	8001168 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001160:	4925      	ldr	r1, [pc, #148]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4313      	orrs	r3, r2
 8001166:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a24      	ldr	r2, [pc, #144]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	099b      	lsrs	r3, r3, #6
 8001174:	2232      	movs	r2, #50	; 0x32
 8001176:	fb02 f303 	mul.w	r3, r2, r3
 800117a:	4a21      	ldr	r2, [pc, #132]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800117c:	fba2 2303 	umull	r2, r3, r2, r3
 8001180:	099b      	lsrs	r3, r3, #6
 8001182:	3301      	adds	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001186:	e002      	b.n	800118e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3b01      	subs	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x98>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f3      	bne.n	8001188 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01b      	beq.n	80011de <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a15      	ldr	r2, [pc, #84]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	099b      	lsrs	r3, r3, #6
 80011b2:	2232      	movs	r2, #50	; 0x32
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4a11      	ldr	r2, [pc, #68]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	099b      	lsrs	r3, r3, #6
 80011c0:	3301      	adds	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80011c4:	e002      	b.n	80011cc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80011ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <HAL_PWREx_ControlVoltageScaling+0xd6>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f3      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e000      	b.n	80011ea <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	46020800 	.word	0x46020800
 80011fc:	20000000 	.word	0x20000000
 8001200:	10624dd3 	.word	0x10624dd3

08001204 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_PWREx_GetVoltageRange+0x18>)
 800120a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	46020800 	.word	0x46020800

08001220 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	; 0x38
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	f000 bec8 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800123a:	4b99      	ldr	r3, [pc, #612]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001244:	4b96      	ldr	r3, [pc, #600]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 816c 	beq.w	8001534 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800125c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <HAL_RCC_OscConfig+0x52>
 8001262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001264:	2b0c      	cmp	r3, #12
 8001266:	f040 80de 	bne.w	8001426 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126c:	2b01      	cmp	r3, #1
 800126e:	f040 80da 	bne.w	8001426 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	f000 bea5 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001284:	4b86      	ldr	r3, [pc, #536]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d004      	beq.n	800129a <HAL_RCC_OscConfig+0x7a>
 8001290:	4b83      	ldr	r3, [pc, #524]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001298:	e005      	b.n	80012a6 <HAL_RCC_OscConfig+0x86>
 800129a:	4b81      	ldr	r3, [pc, #516]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 800129c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012a0:	041b      	lsls	r3, r3, #16
 80012a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d255      	bcs.n	8001356 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80012aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10a      	bne.n	80012c6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 f9df 	bl	8002678 <RCC_SetFlashLatencyFromMSIRange>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f000 be82 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80012c6:	4b76      	ldr	r3, [pc, #472]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	4a75      	ldr	r2, [pc, #468]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 80012cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012d0:	6093      	str	r3, [r2, #8]
 80012d2:	4b73      	ldr	r3, [pc, #460]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	4970      	ldr	r1, [pc, #448]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80012ec:	d309      	bcc.n	8001302 <HAL_RCC_OscConfig+0xe2>
 80012ee:	4b6c      	ldr	r3, [pc, #432]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f023 021f 	bic.w	r2, r3, #31
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	4969      	ldr	r1, [pc, #420]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	60cb      	str	r3, [r1, #12]
 8001300:	e07e      	b.n	8001400 <HAL_RCC_OscConfig+0x1e0>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	2b00      	cmp	r3, #0
 8001308:	da0a      	bge.n	8001320 <HAL_RCC_OscConfig+0x100>
 800130a:	4b65      	ldr	r3, [pc, #404]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	015b      	lsls	r3, r3, #5
 8001318:	4961      	ldr	r1, [pc, #388]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 800131a:	4313      	orrs	r3, r2
 800131c:	60cb      	str	r3, [r1, #12]
 800131e:	e06f      	b.n	8001400 <HAL_RCC_OscConfig+0x1e0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001328:	d30a      	bcc.n	8001340 <HAL_RCC_OscConfig+0x120>
 800132a:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	4959      	ldr	r1, [pc, #356]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 800133a:	4313      	orrs	r3, r2
 800133c:	60cb      	str	r3, [r1, #12]
 800133e:	e05f      	b.n	8001400 <HAL_RCC_OscConfig+0x1e0>
 8001340:	4b57      	ldr	r3, [pc, #348]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	03db      	lsls	r3, r3, #15
 800134e:	4954      	ldr	r1, [pc, #336]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001350:	4313      	orrs	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
 8001354:	e054      	b.n	8001400 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001356:	4b52      	ldr	r3, [pc, #328]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	4a51      	ldr	r2, [pc, #324]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 800135c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001360:	6093      	str	r3, [r2, #8]
 8001362:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	494c      	ldr	r1, [pc, #304]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001370:	4313      	orrs	r3, r2
 8001372:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800137c:	d309      	bcc.n	8001392 <HAL_RCC_OscConfig+0x172>
 800137e:	4b48      	ldr	r3, [pc, #288]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	f023 021f 	bic.w	r2, r3, #31
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4945      	ldr	r1, [pc, #276]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 800138c:	4313      	orrs	r3, r2
 800138e:	60cb      	str	r3, [r1, #12]
 8001390:	e028      	b.n	80013e4 <HAL_RCC_OscConfig+0x1c4>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	2b00      	cmp	r3, #0
 8001398:	da0a      	bge.n	80013b0 <HAL_RCC_OscConfig+0x190>
 800139a:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	015b      	lsls	r3, r3, #5
 80013a8:	493d      	ldr	r1, [pc, #244]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60cb      	str	r3, [r1, #12]
 80013ae:	e019      	b.n	80013e4 <HAL_RCC_OscConfig+0x1c4>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b8:	d30a      	bcc.n	80013d0 <HAL_RCC_OscConfig+0x1b0>
 80013ba:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	029b      	lsls	r3, r3, #10
 80013c8:	4935      	ldr	r1, [pc, #212]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60cb      	str	r3, [r1, #12]
 80013ce:	e009      	b.n	80013e4 <HAL_RCC_OscConfig+0x1c4>
 80013d0:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	03db      	lsls	r3, r3, #15
 80013de:	4930      	ldr	r1, [pc, #192]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80013e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10a      	bne.n	8001400 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 f942 	bl	8002678 <RCC_SetFlashLatencyFromMSIRange>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	f000 bde5 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001400:	f001 f8e4 	bl	80025cc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001404:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <HAL_RCC_OscConfig+0x284>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fb6b 	bl	8000ae4 <HAL_InitTick>
 800140e:	4603      	mov	r3, r0
 8001410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 808a 	beq.w	8001532 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800141e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001422:	f000 bdd2 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d066      	beq.n	80014fc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800143a:	f7ff fb9d 	bl	8000b78 <HAL_GetTick>
 800143e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001440:	e009      	b.n	8001456 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001442:	f7ff fb99 	bl	8000b78 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d902      	bls.n	8001456 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	f000 bdba 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0ef      	beq.n	8001442 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001468:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800146c:	6093      	str	r3, [r2, #8]
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	4909      	ldr	r1, [pc, #36]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 800147c:	4313      	orrs	r3, r2
 800147e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001488:	d30e      	bcc.n	80014a8 <HAL_RCC_OscConfig+0x288>
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f023 021f 	bic.w	r2, r3, #31
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4902      	ldr	r1, [pc, #8]	; (80014a0 <HAL_RCC_OscConfig+0x280>)
 8001498:	4313      	orrs	r3, r2
 800149a:	60cb      	str	r3, [r1, #12]
 800149c:	e04a      	b.n	8001534 <HAL_RCC_OscConfig+0x314>
 800149e:	bf00      	nop
 80014a0:	46020c00 	.word	0x46020c00
 80014a4:	20000004 	.word	0x20000004
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da0a      	bge.n	80014c6 <HAL_RCC_OscConfig+0x2a6>
 80014b0:	4b98      	ldr	r3, [pc, #608]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	015b      	lsls	r3, r3, #5
 80014be:	4995      	ldr	r1, [pc, #596]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60cb      	str	r3, [r1, #12]
 80014c4:	e036      	b.n	8001534 <HAL_RCC_OscConfig+0x314>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ce:	d30a      	bcc.n	80014e6 <HAL_RCC_OscConfig+0x2c6>
 80014d0:	4b90      	ldr	r3, [pc, #576]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	029b      	lsls	r3, r3, #10
 80014de:	498d      	ldr	r1, [pc, #564]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	60cb      	str	r3, [r1, #12]
 80014e4:	e026      	b.n	8001534 <HAL_RCC_OscConfig+0x314>
 80014e6:	4b8b      	ldr	r3, [pc, #556]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	03db      	lsls	r3, r3, #15
 80014f4:	4987      	ldr	r1, [pc, #540]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60cb      	str	r3, [r1, #12]
 80014fa:	e01b      	b.n	8001534 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80014fc:	4b85      	ldr	r3, [pc, #532]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a84      	ldr	r2, [pc, #528]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001508:	f7ff fb36 	bl	8000b78 <HAL_GetTick>
 800150c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800150e:	e009      	b.n	8001524 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001510:	f7ff fb32 	bl	8000b78 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d902      	bls.n	8001524 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	f000 bd53 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001524:	4b7b      	ldr	r3, [pc, #492]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1ef      	bne.n	8001510 <HAL_RCC_OscConfig+0x2f0>
 8001530:	e000      	b.n	8001534 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001532:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 808b 	beq.w	8001658 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001544:	2b08      	cmp	r3, #8
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x334>
 8001548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d109      	bne.n	8001562 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001550:	2b03      	cmp	r3, #3
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d17d      	bne.n	8001658 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	f000 bd34 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x35a>
 800156c:	4b69      	ldr	r3, [pc, #420]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a68      	ldr	r2, [pc, #416]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e041      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001582:	d112      	bne.n	80015aa <HAL_RCC_OscConfig+0x38a>
 8001584:	4b63      	ldr	r3, [pc, #396]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a62      	ldr	r2, [pc, #392]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 800158a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b60      	ldr	r3, [pc, #384]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a5f      	ldr	r2, [pc, #380]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 8001596:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a5c      	ldr	r2, [pc, #368]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80015a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e029      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80015b2:	d112      	bne.n	80015da <HAL_RCC_OscConfig+0x3ba>
 80015b4:	4b57      	ldr	r3, [pc, #348]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a56      	ldr	r2, [pc, #344]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80015ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b54      	ldr	r3, [pc, #336]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a53      	ldr	r2, [pc, #332]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80015c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b51      	ldr	r3, [pc, #324]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a50      	ldr	r2, [pc, #320]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80015d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e011      	b.n	80015fe <HAL_RCC_OscConfig+0x3de>
 80015da:	4b4e      	ldr	r3, [pc, #312]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a4d      	ldr	r2, [pc, #308]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80015e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a4a      	ldr	r2, [pc, #296]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b48      	ldr	r3, [pc, #288]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a47      	ldr	r2, [pc, #284]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d014      	beq.n	8001630 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001606:	f7ff fab7 	bl	8000b78 <HAL_GetTick>
 800160a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160c:	e009      	b.n	8001622 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160e:	f7ff fab3 	bl	8000b78 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b64      	cmp	r3, #100	; 0x64
 800161a:	d902      	bls.n	8001622 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	f000 bcd4 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001622:	4b3c      	ldr	r3, [pc, #240]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0ef      	beq.n	800160e <HAL_RCC_OscConfig+0x3ee>
 800162e:	e013      	b.n	8001658 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001630:	f7ff faa2 	bl	8000b78 <HAL_GetTick>
 8001634:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001636:	e009      	b.n	800164c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fa9e 	bl	8000b78 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d902      	bls.n	800164c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	f000 bcbf 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800164c:	4b31      	ldr	r3, [pc, #196]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1ef      	bne.n	8001638 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d05f      	beq.n	8001724 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001666:	2b04      	cmp	r3, #4
 8001668:	d005      	beq.n	8001676 <HAL_RCC_OscConfig+0x456>
 800166a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166c:	2b0c      	cmp	r3, #12
 800166e:	d114      	bne.n	800169a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001672:	2b02      	cmp	r3, #2
 8001674:	d111      	bne.n	800169a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	f000 bca3 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	041b      	lsls	r3, r3, #16
 8001692:	4920      	ldr	r1, [pc, #128]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 8001694:	4313      	orrs	r3, r2
 8001696:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001698:	e044      	b.n	8001724 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d024      	beq.n	80016ec <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1b      	ldr	r2, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80016ae:	f7ff fa63 	bl	8000b78 <HAL_GetTick>
 80016b2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b4:	e009      	b.n	80016ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b6:	f7ff fa5f 	bl	8000b78 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d902      	bls.n	80016ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	f000 bc80 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0ef      	beq.n	80016b6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	041b      	lsls	r3, r3, #16
 80016e4:	490b      	ldr	r1, [pc, #44]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	610b      	str	r3, [r1, #16]
 80016ea:	e01b      	b.n	8001724 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_RCC_OscConfig+0x4f4>)
 80016f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016f6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80016f8:	f7ff fa3e 	bl	8000b78 <HAL_GetTick>
 80016fc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001700:	f7ff fa3a 	bl	8000b78 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d904      	bls.n	8001718 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	f000 bc5b 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
 8001714:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001718:	4baf      	ldr	r3, [pc, #700]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ed      	bne.n	8001700 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 80c8 	beq.w	80018c2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001738:	4ba7      	ldr	r3, [pc, #668]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 800173a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b00      	cmp	r3, #0
 8001744:	d111      	bne.n	800176a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4ba4      	ldr	r3, [pc, #656]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800174c:	4aa2      	ldr	r2, [pc, #648]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001756:	4ba0      	ldr	r3, [pc, #640]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001764:	2301      	movs	r3, #1
 8001766:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800176a:	4b9c      	ldr	r3, [pc, #624]	; (80019dc <HAL_RCC_OscConfig+0x7bc>)
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d119      	bne.n	80017aa <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001776:	4b99      	ldr	r3, [pc, #612]	; (80019dc <HAL_RCC_OscConfig+0x7bc>)
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	4a98      	ldr	r2, [pc, #608]	; (80019dc <HAL_RCC_OscConfig+0x7bc>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001782:	f7ff f9f9 	bl	8000b78 <HAL_GetTick>
 8001786:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001788:	e009      	b.n	800179e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178a:	f7ff f9f5 	bl	8000b78 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d902      	bls.n	800179e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	f000 bc16 	b.w	8001fca <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800179e:	4b8f      	ldr	r3, [pc, #572]	; (80019dc <HAL_RCC_OscConfig+0x7bc>)
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0ef      	beq.n	800178a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d05f      	beq.n	8001872 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80017b2:	4b89      	ldr	r3, [pc, #548]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 80017b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017b8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699a      	ldr	r2, [r3, #24]
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d037      	beq.n	8001838 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e3f4      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d01b      	beq.n	8001822 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80017ea:	4b7b      	ldr	r3, [pc, #492]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 80017ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017f0:	4a79      	ldr	r2, [pc, #484]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 80017f2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80017f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80017fa:	f7ff f9bd 	bl	8000b78 <HAL_GetTick>
 80017fe:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff f9b9 	bl	8000b78 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b05      	cmp	r3, #5
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e3da      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001814:	4b70      	ldr	r3, [pc, #448]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800181a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ef      	bne.n	8001802 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001822:	4b6d      	ldr	r3, [pc, #436]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001828:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4969      	ldr	r1, [pc, #420]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001832:	4313      	orrs	r3, r2
 8001834:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001838:	4b67      	ldr	r3, [pc, #412]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 800183a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800183e:	4a66      	ldr	r2, [pc, #408]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001840:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001844:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001848:	f7ff f996 	bl	8000b78 <HAL_GetTick>
 800184c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff f992 	bl	8000b78 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b05      	cmp	r3, #5
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e3b3      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001862:	4b5d      	ldr	r3, [pc, #372]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ef      	beq.n	8001850 <HAL_RCC_OscConfig+0x630>
 8001870:	e01b      	b.n	80018aa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001872:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001878:	4a57      	ldr	r2, [pc, #348]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 800187a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800187e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001882:	f7ff f979 	bl	8000b78 <HAL_GetTick>
 8001886:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188a:	f7ff f975 	bl	8000b78 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b05      	cmp	r3, #5
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e396      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800189c:	4b4e      	ldr	r3, [pc, #312]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 800189e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ef      	bne.n	800188a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b2:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 80018b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b8:	4a47      	ldr	r2, [pc, #284]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 80018ba:	f023 0304 	bic.w	r3, r3, #4
 80018be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 8111 	beq.w	8001af2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 80018d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d111      	bne.n	8001908 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 80018e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ea:	4a3b      	ldr	r2, [pc, #236]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80018f4:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001902:	2301      	movs	r3, #1
 8001904:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001908:	4b34      	ldr	r3, [pc, #208]	; (80019dc <HAL_RCC_OscConfig+0x7bc>)
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d118      	bne.n	8001946 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_RCC_OscConfig+0x7bc>)
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	4a30      	ldr	r2, [pc, #192]	; (80019dc <HAL_RCC_OscConfig+0x7bc>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001920:	f7ff f92a 	bl	8000b78 <HAL_GetTick>
 8001924:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001928:	f7ff f926 	bl	8000b78 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e347      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800193a:	4b28      	ldr	r3, [pc, #160]	; (80019dc <HAL_RCC_OscConfig+0x7bc>)
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d01f      	beq.n	8001992 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	d010      	beq.n	8001980 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001964:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001974:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800197e:	e018      	b.n	80019b2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001990:	e00f      	b.n	80019b2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 8001994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001998:	4a0f      	ldr	r2, [pc, #60]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 800199a:	f023 0301 	bic.w	r3, r3, #1
 800199e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 80019a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019a8:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <HAL_RCC_OscConfig+0x7b8>)
 80019aa:	f023 0304 	bic.w	r3, r3, #4
 80019ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d057      	beq.n	8001a6a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80019ba:	f7ff f8dd 	bl	8000b78 <HAL_GetTick>
 80019be:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c0:	e00e      	b.n	80019e0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff f8d9 	bl	8000b78 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d905      	bls.n	80019e0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e2f8      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
 80019d8:	46020c00 	.word	0x46020c00
 80019dc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019e0:	4b9c      	ldr	r3, [pc, #624]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 80019e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0e9      	beq.n	80019c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d01b      	beq.n	8001a32 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80019fa:	4b96      	ldr	r3, [pc, #600]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 80019fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a00:	4a94      	ldr	r2, [pc, #592]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7ff f8b4 	bl	8000b78 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e2d3      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a22:	4b8c      	ldr	r3, [pc, #560]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0ed      	beq.n	8001a0c <HAL_RCC_OscConfig+0x7ec>
 8001a30:	e053      	b.n	8001ada <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a32:	4b88      	ldr	r3, [pc, #544]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a38:	4a86      	ldr	r2, [pc, #536]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a44:	f7ff f898 	bl	8000b78 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e2b7      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a5a:	4b7e      	ldr	r3, [pc, #504]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ed      	bne.n	8001a44 <HAL_RCC_OscConfig+0x824>
 8001a68:	e037      	b.n	8001ada <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001a6a:	f7ff f885 	bl	8000b78 <HAL_GetTick>
 8001a6e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7ff f881 	bl	8000b78 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e2a0      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a88:	4b72      	ldr	r3, [pc, #456]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1ed      	bne.n	8001a72 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001a96:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d01a      	beq.n	8001ada <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001aa4:	4b6b      	ldr	r3, [pc, #428]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aaa:	4a6a      	ldr	r2, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ab0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ab4:	e00a      	b.n	8001acc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab6:	f7ff f85f 	bl	8000b78 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e27e      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001acc:	4b61      	ldr	r3, [pc, #388]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ed      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ada:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae2:	4b5c      	ldr	r3, [pc, #368]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	4a5a      	ldr	r2, [pc, #360]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001aea:	f023 0304 	bic.w	r3, r3, #4
 8001aee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d036      	beq.n	8001b6c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d019      	beq.n	8001b3a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001b06:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001b0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b10:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b12:	f7ff f831 	bl	8000b78 <HAL_GetTick>
 8001b16:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b1a:	f7ff f82d 	bl	8000b78 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e24e      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b2c:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x8fa>
 8001b38:	e018      	b.n	8001b6c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001b3a:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a45      	ldr	r2, [pc, #276]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b44:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b46:	f7ff f817 	bl	8000b78 <HAL_GetTick>
 8001b4a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b4e:	f7ff f813 	bl	8000b78 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e234      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b60:	4b3c      	ldr	r3, [pc, #240]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d036      	beq.n	8001be6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d019      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001b80:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a33      	ldr	r2, [pc, #204]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b8c:	f7fe fff4 	bl	8000b78 <HAL_GetTick>
 8001b90:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001b94:	f7fe fff0 	bl	8000b78 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e211      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x974>
 8001bb2:	e018      	b.n	8001be6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a26      	ldr	r2, [pc, #152]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bbe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001bc0:	f7fe ffda 	bl	8000b78 <HAL_GetTick>
 8001bc4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001bc8:	f7fe ffd6 	bl	8000b78 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1f7      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d07f      	beq.n	8001cf2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d062      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001c00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c04:	6093      	str	r3, [r2, #8]
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	4910      	ldr	r1, [pc, #64]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001c20:	d309      	bcc.n	8001c36 <HAL_RCC_OscConfig+0xa16>
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f023 021f 	bic.w	r2, r3, #31
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4909      	ldr	r1, [pc, #36]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60cb      	str	r3, [r1, #12]
 8001c34:	e02a      	b.n	8001c8c <HAL_RCC_OscConfig+0xa6c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	da0c      	bge.n	8001c58 <HAL_RCC_OscConfig+0xa38>
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	015b      	lsls	r3, r3, #5
 8001c4c:	4901      	ldr	r1, [pc, #4]	; (8001c54 <HAL_RCC_OscConfig+0xa34>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60cb      	str	r3, [r1, #12]
 8001c52:	e01b      	b.n	8001c8c <HAL_RCC_OscConfig+0xa6c>
 8001c54:	46020c00 	.word	0x46020c00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c60:	d30a      	bcc.n	8001c78 <HAL_RCC_OscConfig+0xa58>
 8001c62:	4ba1      	ldr	r3, [pc, #644]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	029b      	lsls	r3, r3, #10
 8001c70:	499d      	ldr	r1, [pc, #628]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60cb      	str	r3, [r1, #12]
 8001c76:	e009      	b.n	8001c8c <HAL_RCC_OscConfig+0xa6c>
 8001c78:	4b9b      	ldr	r3, [pc, #620]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	03db      	lsls	r3, r3, #15
 8001c86:	4998      	ldr	r1, [pc, #608]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001c8c:	4b96      	ldr	r3, [pc, #600]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a95      	ldr	r2, [pc, #596]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001c92:	f043 0310 	orr.w	r3, r3, #16
 8001c96:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c98:	f7fe ff6e 	bl	8000b78 <HAL_GetTick>
 8001c9c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001ca0:	f7fe ff6a 	bl	8000b78 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e18b      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001cb2:	4b8d      	ldr	r3, [pc, #564]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xa80>
 8001cbe:	e018      	b.n	8001cf2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001cc0:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a88      	ldr	r2, [pc, #544]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001cc6:	f023 0310 	bic.w	r3, r3, #16
 8001cca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ccc:	f7fe ff54 	bl	8000b78 <HAL_GetTick>
 8001cd0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001cd4:	f7fe ff50 	bl	8000b78 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e171      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001ce6:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8166 	beq.w	8001fc8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d02:	4b79      	ldr	r3, [pc, #484]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	f000 80f2 	beq.w	8001ef4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	f040 80c5 	bne.w	8001ea4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b73      	ldr	r3, [pc, #460]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a72      	ldr	r2, [pc, #456]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d24:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d26:	f7fe ff27 	bl	8000b78 <HAL_GetTick>
 8001d2a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7fe ff23 	bl	8000b78 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e144      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d40:	4b69      	ldr	r3, [pc, #420]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4c:	4b66      	ldr	r3, [pc, #408]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d111      	bne.n	8001d7e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b63      	ldr	r3, [pc, #396]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d60:	4a61      	ldr	r2, [pc, #388]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001d7e:	4b5b      	ldr	r3, [pc, #364]	; (8001eec <HAL_RCC_OscConfig+0xccc>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d8a:	d102      	bne.n	8001d92 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001d92:	4b56      	ldr	r3, [pc, #344]	; (8001eec <HAL_RCC_OscConfig+0xccc>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	4a55      	ldr	r2, [pc, #340]	; (8001eec <HAL_RCC_OscConfig+0xccc>)
 8001d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001d9e:	4b52      	ldr	r3, [pc, #328]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001db2:	3a01      	subs	r2, #1
 8001db4:	0212      	lsls	r2, r2, #8
 8001db6:	4311      	orrs	r1, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	494a      	ldr	r1, [pc, #296]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	628b      	str	r3, [r1, #40]	; 0x28
 8001dc4:	4b48      	ldr	r3, [pc, #288]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc8:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <HAL_RCC_OscConfig+0xcd0>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dd0:	3a01      	subs	r2, #1
 8001dd2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001dda:	3a01      	subs	r2, #1
 8001ddc:	0252      	lsls	r2, r2, #9
 8001dde:	b292      	uxth	r2, r2
 8001de0:	4311      	orrs	r1, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001de6:	3a01      	subs	r2, #1
 8001de8:	0412      	lsls	r2, r2, #16
 8001dea:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001dee:	4311      	orrs	r1, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001df4:	3a01      	subs	r2, #1
 8001df6:	0612      	lsls	r2, r2, #24
 8001df8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	493a      	ldr	r1, [pc, #232]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001e04:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	4a37      	ldr	r2, [pc, #220]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e0a:	f023 0310 	bic.w	r3, r3, #16
 8001e0e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	4a34      	ldr	r2, [pc, #208]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001e1a:	4b33      	ldr	r3, [pc, #204]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	4a32      	ldr	r2, [pc, #200]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e20:	f043 0310 	orr.w	r3, r3, #16
 8001e24:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001e26:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	f023 020c 	bic.w	r2, r3, #12
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	492d      	ldr	r1, [pc, #180]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8001e38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d105      	bne.n	8001e4c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_RCC_OscConfig+0xccc>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4a29      	ldr	r2, [pc, #164]	; (8001eec <HAL_RCC_OscConfig+0xccc>)
 8001e46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001e4c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5a:	4a23      	ldr	r2, [pc, #140]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e5c:	f023 0304 	bic.w	r3, r3, #4
 8001e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e6e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e7c:	f7fe fe7c 	bl	8000b78 <HAL_GetTick>
 8001e80:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7fe fe78 	bl	8000b78 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e099      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0xc64>
 8001ea2:	e091      	b.n	8001fc8 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001eb0:	f7fe fe62 	bl	8000b78 <HAL_GetTick>
 8001eb4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe fe5e 	bl	8000b78 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e07f      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	4a03      	ldr	r2, [pc, #12]	; (8001ee8 <HAL_RCC_OscConfig+0xcc8>)
 8001edc:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001ee0:	f023 0303 	bic.w	r3, r3, #3
 8001ee4:	6293      	str	r3, [r2, #40]	; 0x28
 8001ee6:	e06f      	b.n	8001fc8 <HAL_RCC_OscConfig+0xda8>
 8001ee8:	46020c00 	.word	0x46020c00
 8001eec:	46020800 	.word	0x46020800
 8001ef0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001ef4:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <HAL_RCC_OscConfig+0xdb4>)
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001efa:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_RCC_OscConfig+0xdb4>)
 8001efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efe:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d039      	beq.n	8001f7c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0203 	and.w	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d132      	bne.n	8001f7c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d129      	bne.n	8001f7c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d122      	bne.n	8001f7c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f40:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d11a      	bne.n	8001f7c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	0a5b      	lsrs	r3, r3, #9
 8001f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d111      	bne.n	8001f7c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	0c1b      	lsrs	r3, r3, #16
 8001f5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f64:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d108      	bne.n	8001f7c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	0e1b      	lsrs	r3, r3, #24
 8001f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e024      	b.n	8001fca <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_RCC_OscConfig+0xdb4>)
 8001f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f84:	08db      	lsrs	r3, r3, #3
 8001f86:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d01a      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_RCC_OscConfig+0xdb4>)
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_RCC_OscConfig+0xdb4>)
 8001f98:	f023 0310 	bic.w	r3, r3, #16
 8001f9c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7fe fdeb 	bl	8000b78 <HAL_GetTick>
 8001fa2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001fa4:	bf00      	nop
 8001fa6:	f7fe fde7 	bl	8000b78 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d0f9      	beq.n	8001fa6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_RCC_OscConfig+0xdb4>)
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_OscConfig+0xdb4>)
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_RCC_OscConfig+0xdb4>)
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3738      	adds	r7, #56	; 0x38
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	46020c00 	.word	0x46020c00

08001fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e1d9      	b.n	80023a0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b9b      	ldr	r3, [pc, #620]	; (800225c <HAL_RCC_ClockConfig+0x284>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d910      	bls.n	800201c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b98      	ldr	r3, [pc, #608]	; (800225c <HAL_RCC_ClockConfig+0x284>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 020f 	bic.w	r2, r3, #15
 8002002:	4996      	ldr	r1, [pc, #600]	; (800225c <HAL_RCC_ClockConfig+0x284>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b94      	ldr	r3, [pc, #592]	; (800225c <HAL_RCC_ClockConfig+0x284>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e1c1      	b.n	80023a0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d010      	beq.n	800204a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	4b8c      	ldr	r3, [pc, #560]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002034:	429a      	cmp	r2, r3
 8002036:	d908      	bls.n	800204a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002038:	4b89      	ldr	r3, [pc, #548]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	4986      	ldr	r1, [pc, #536]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 8002046:	4313      	orrs	r3, r2
 8002048:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d012      	beq.n	800207c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	4b81      	ldr	r3, [pc, #516]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002064:	429a      	cmp	r2, r3
 8002066:	d909      	bls.n	800207c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002068:	4b7d      	ldr	r3, [pc, #500]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	497a      	ldr	r1, [pc, #488]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 8002078:	4313      	orrs	r3, r2
 800207a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d010      	beq.n	80020aa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	4b74      	ldr	r3, [pc, #464]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002094:	429a      	cmp	r2, r3
 8002096:	d908      	bls.n	80020aa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4b71      	ldr	r3, [pc, #452]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	496e      	ldr	r1, [pc, #440]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d010      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	4b69      	ldr	r3, [pc, #420]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d908      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80020c6:	4b66      	ldr	r3, [pc, #408]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	f023 020f 	bic.w	r2, r3, #15
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	4963      	ldr	r1, [pc, #396]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80d2 	beq.w	800228a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d143      	bne.n	800217a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f2:	4b5b      	ldr	r3, [pc, #364]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 80020f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d110      	bne.n	8002122 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002100:	4b57      	ldr	r3, [pc, #348]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 8002102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002106:	4a56      	ldr	r2, [pc, #344]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002110:	4b53      	ldr	r3, [pc, #332]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 8002112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002122:	f7fe fd29 	bl	8000b78 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002128:	4b4e      	ldr	r3, [pc, #312]	; (8002264 <HAL_RCC_ClockConfig+0x28c>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00f      	beq.n	8002154 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002136:	f7fe fd1f 	bl	8000b78 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e12b      	b.n	80023a0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002148:	4b46      	ldr	r3, [pc, #280]	; (8002264 <HAL_RCC_ClockConfig+0x28c>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 800215c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002160:	4a3f      	ldr	r2, [pc, #252]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 8002162:	f023 0304 	bic.w	r3, r3, #4
 8002166:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800216a:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d121      	bne.n	80021ba <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e112      	b.n	80023a0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002182:	4b37      	ldr	r3, [pc, #220]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d115      	bne.n	80021ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e106      	b.n	80023a0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800219a:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0fa      	b.n	80023a0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0f2      	b.n	80023a0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80021ba:	4b29      	ldr	r3, [pc, #164]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f023 0203 	bic.w	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4926      	ldr	r1, [pc, #152]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80021cc:	f7fe fcd4 	bl	8000b78 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d112      	bne.n	8002200 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7fe fccc 	bl	8000b78 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e0d6      	b.n	80023a0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f2:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d1ee      	bne.n	80021dc <HAL_RCC_ClockConfig+0x204>
 80021fe:	e044      	b.n	800228a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d112      	bne.n	800222e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220a:	f7fe fcb5 	bl	8000b78 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	; 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0bf      	b.n	80023a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d1ee      	bne.n	800220a <HAL_RCC_ClockConfig+0x232>
 800222c:	e02d      	b.n	800228a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d123      	bne.n	800227e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7fe fc9e 	bl	8000b78 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e0a8      	b.n	80023a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1ee      	bne.n	8002238 <HAL_RCC_ClockConfig+0x260>
 800225a:	e016      	b.n	800228a <HAL_RCC_ClockConfig+0x2b2>
 800225c:	40022000 	.word	0x40022000
 8002260:	46020c00 	.word	0x46020c00
 8002264:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002268:	f7fe fc86 	bl	8000b78 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	; 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e090      	b.n	80023a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800227e:	4b4a      	ldr	r3, [pc, #296]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b04      	cmp	r3, #4
 8002288:	d1ee      	bne.n	8002268 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d010      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d208      	bcs.n	80022b8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80022a6:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f023 020f 	bic.w	r2, r3, #15
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	493d      	ldr	r1, [pc, #244]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b8:	4b3c      	ldr	r3, [pc, #240]	; (80023ac <HAL_RCC_ClockConfig+0x3d4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d210      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b39      	ldr	r3, [pc, #228]	; (80023ac <HAL_RCC_ClockConfig+0x3d4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 020f 	bic.w	r2, r3, #15
 80022ce:	4937      	ldr	r1, [pc, #220]	; (80023ac <HAL_RCC_ClockConfig+0x3d4>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b35      	ldr	r3, [pc, #212]	; (80023ac <HAL_RCC_ClockConfig+0x3d4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e05b      	b.n	80023a0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d010      	beq.n	8002316 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002300:	429a      	cmp	r2, r3
 8002302:	d208      	bcs.n	8002316 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002304:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4925      	ldr	r1, [pc, #148]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002312:	4313      	orrs	r3, r2
 8002314:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d012      	beq.n	8002348 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002330:	429a      	cmp	r2, r3
 8002332:	d209      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002334:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	4919      	ldr	r1, [pc, #100]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002344:	4313      	orrs	r3, r2
 8002346:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002360:	429a      	cmp	r2, r3
 8002362:	d208      	bcs.n	8002376 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	490d      	ldr	r1, [pc, #52]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002372:	4313      	orrs	r3, r2
 8002374:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002376:	f000 f821 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800237a:	4602      	mov	r2, r0
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_RCC_ClockConfig+0x3d0>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	490a      	ldr	r1, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x3d8>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x3dc>)
 800238e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x3e0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fba5 	bl	8000ae4 <HAL_InitTick>
 800239a:	4603      	mov	r3, r0
 800239c:	73fb      	strb	r3, [r7, #15]

  return status;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	46020c00 	.word	0x46020c00
 80023ac:	40022000 	.word	0x40022000
 80023b0:	08006778 	.word	0x08006778
 80023b4:	20000000 	.word	0x20000000
 80023b8:	20000004 	.word	0x20000004

080023bc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b08b      	sub	sp, #44	; 0x2c
 80023c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ca:	4b7b      	ldr	r3, [pc, #492]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d4:	4b78      	ldr	r3, [pc, #480]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x34>
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d121      	bne.n	800242e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d11e      	bne.n	800242e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80023f0:	4b71      	ldr	r3, [pc, #452]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d107      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80023fc:	4b6e      	ldr	r3, [pc, #440]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002402:	0b1b      	lsrs	r3, r3, #12
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	e005      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800240c:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	0f1b      	lsrs	r3, r3, #28
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002418:	4a68      	ldr	r2, [pc, #416]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002420:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d110      	bne.n	800244a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800242c:	e00d      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800242e:	4b62      	ldr	r3, [pc, #392]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b04      	cmp	r3, #4
 8002438:	d102      	bne.n	8002440 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800243a:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x204>)
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	e004      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b08      	cmp	r3, #8
 8002444:	d101      	bne.n	800244a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002446:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002448:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b0c      	cmp	r3, #12
 800244e:	f040 80ac 	bne.w	80025aa <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002452:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800245c:	4b56      	ldr	r3, [pc, #344]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3301      	adds	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800246a:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002476:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247a:	08db      	lsrs	r3, r3, #3
 800247c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800248e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 8086 	beq.w	80025a6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d003      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0xec>
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d022      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x130>
 80024a6:	e043      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b2:	eddf 6a44 	vldr	s13, [pc, #272]	; 80025c4 <HAL_RCC_GetSysClockFreq+0x208>
 80024b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ba:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024ca:	ed97 6a01 	vldr	s12, [r7, #4]
 80024ce:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80025c8 <HAL_RCC_GetSysClockFreq+0x20c>
 80024d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024de:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80024ea:	e046      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f6:	eddf 6a33 	vldr	s13, [pc, #204]	; 80025c4 <HAL_RCC_GetSysClockFreq+0x208>
 80024fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024fe:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002506:	ee07 3a90 	vmov	s15, r3
 800250a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800250e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002512:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80025c8 <HAL_RCC_GetSysClockFreq+0x20c>
 8002516:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800251a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800251e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002522:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800252e:	e024      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	ee07 3a90 	vmov	s15, r3
 8002540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002558:	ed97 6a01 	vldr	s12, [r7, #4]
 800255c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80025c8 <HAL_RCC_GetSysClockFreq+0x20c>
 8002560:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002564:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800256c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002574:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002578:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800257a:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	0e1b      	lsrs	r3, r3, #24
 8002580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002584:	3301      	adds	r3, #1
 8002586:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002592:	edd7 6a07 	vldr	s13, [r7, #28]
 8002596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800259a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800259e:	ee17 3a90 	vmov	r3, s15
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	e001      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80025aa:	6a3b      	ldr	r3, [r7, #32]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	372c      	adds	r7, #44	; 0x2c
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	46020c00 	.word	0x46020c00
 80025bc:	08006790 	.word	0x08006790
 80025c0:	00f42400 	.word	0x00f42400
 80025c4:	4b742400 	.word	0x4b742400
 80025c8:	46000000 	.word	0x46000000

080025cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80025d0:	f7ff fef4 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_RCC_GetHCLKFreq+0x28>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	4906      	ldr	r1, [pc, #24]	; (80025f8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <HAL_RCC_GetHCLKFreq+0x30>)
 80025e8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_RCC_GetHCLKFreq+0x30>)
 80025ec:	681b      	ldr	r3, [r3, #0]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	46020c00 	.word	0x46020c00
 80025f8:	08006778 	.word	0x08006778
 80025fc:	20000000 	.word	0x20000000

08002600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002604:	f7ff ffe2 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	46020c00 	.word	0x46020c00
 8002624:	08006788 	.word	0x08006788

08002628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800262c:	f7ff ffce 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <HAL_RCC_GetPCLK2Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	46020c00 	.word	0x46020c00
 800264c:	08006788 	.word	0x08006788

08002650 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002654:	f7ff ffba 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_RCC_GetPCLK3Freq+0x20>)
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	4903      	ldr	r1, [pc, #12]	; (8002674 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	46020c00 	.word	0x46020c00
 8002674:	08006788 	.word	0x08006788

08002678 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002680:	4b3e      	ldr	r3, [pc, #248]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800268e:	f7fe fdb9 	bl	8001204 <HAL_PWREx_GetVoltageRange>
 8002692:	6178      	str	r0, [r7, #20]
 8002694:	e019      	b.n	80026ca <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4b39      	ldr	r3, [pc, #228]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269c:	4a37      	ldr	r2, [pc, #220]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80026a6:	4b35      	ldr	r3, [pc, #212]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80026a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026b4:	f7fe fda6 	bl	8001204 <HAL_PWREx_GetVoltageRange>
 80026b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026ba:	4b30      	ldr	r3, [pc, #192]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80026bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c0:	4a2e      	ldr	r2, [pc, #184]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80026c2:	f023 0304 	bic.w	r3, r3, #4
 80026c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026d0:	d003      	beq.n	80026da <RCC_SetFlashLatencyFromMSIRange+0x62>
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026d8:	d109      	bne.n	80026ee <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026e0:	d202      	bcs.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80026e2:	2301      	movs	r3, #1
 80026e4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80026e6:	e033      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80026ec:	e030      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026f4:	d208      	bcs.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fc:	d102      	bne.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80026fe:	2303      	movs	r3, #3
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	e025      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e035      	b.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800270e:	d90f      	bls.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800271c:	d902      	bls.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	e015      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002724:	2301      	movs	r3, #1
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	e012      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	e00f      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002736:	d109      	bne.n	800274c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273e:	d102      	bne.n	8002746 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002740:	2301      	movs	r3, #1
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	e004      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002746:	2302      	movs	r3, #2
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	e001      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800274c:	2301      	movs	r3, #1
 800274e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 020f 	bic.w	r2, r3, #15
 8002758:	4909      	ldr	r1, [pc, #36]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	46020c00 	.word	0x46020c00
 8002780:	40022000 	.word	0x40022000

08002784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002788:	b0ba      	sub	sp, #232	; 0xe8
 800278a:	af00      	add	r7, sp, #0
 800278c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002790:	2300      	movs	r3, #0
 8002792:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002796:	2300      	movs	r3, #0
 8002798:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800279c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f002 0401 	and.w	r4, r2, #1
 80027a8:	2500      	movs	r5, #0
 80027aa:	ea54 0305 	orrs.w	r3, r4, r5
 80027ae:	d00b      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80027b0:	4bcb      	ldr	r3, [pc, #812]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b6:	f023 0103 	bic.w	r1, r3, #3
 80027ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c0:	4ac7      	ldr	r2, [pc, #796]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027c2:	430b      	orrs	r3, r1
 80027c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	f002 0802 	and.w	r8, r2, #2
 80027d4:	f04f 0900 	mov.w	r9, #0
 80027d8:	ea58 0309 	orrs.w	r3, r8, r9
 80027dc:	d00b      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80027de:	4bc0      	ldr	r3, [pc, #768]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e4:	f023 010c 	bic.w	r1, r3, #12
 80027e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	4abc      	ldr	r2, [pc, #752]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027f0:	430b      	orrs	r3, r1
 80027f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fe:	f002 0a04 	and.w	sl, r2, #4
 8002802:	f04f 0b00 	mov.w	fp, #0
 8002806:	ea5a 030b 	orrs.w	r3, sl, fp
 800280a:	d00b      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800280c:	4bb4      	ldr	r3, [pc, #720]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800280e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002812:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	4ab0      	ldr	r2, [pc, #704]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800281e:	430b      	orrs	r3, r1
 8002820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002824:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f002 0308 	and.w	r3, r2, #8
 8002830:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800283a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800283e:	460b      	mov	r3, r1
 8002840:	4313      	orrs	r3, r2
 8002842:	d00b      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002844:	4ba6      	ldr	r3, [pc, #664]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800284a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800284e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	4aa2      	ldr	r2, [pc, #648]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002856:	430b      	orrs	r3, r1
 8002858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800285c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f002 0310 	and.w	r3, r2, #16
 8002868:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800286c:	2300      	movs	r3, #0
 800286e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002872:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002876:	460b      	mov	r3, r1
 8002878:	4313      	orrs	r3, r2
 800287a:	d00b      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800287c:	4b98      	ldr	r3, [pc, #608]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800287e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002882:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800288a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288c:	4a94      	ldr	r2, [pc, #592]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800288e:	430b      	orrs	r3, r1
 8002890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002894:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f002 0320 	and.w	r3, r2, #32
 80028a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80028aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80028ae:	460b      	mov	r3, r1
 80028b0:	4313      	orrs	r3, r2
 80028b2:	d00b      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80028b4:	4b8a      	ldr	r3, [pc, #552]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028ba:	f023 0107 	bic.w	r1, r3, #7
 80028be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028c4:	4a86      	ldr	r2, [pc, #536]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028c6:	430b      	orrs	r3, r1
 80028c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80028d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4313      	orrs	r3, r2
 80028ea:	d00b      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80028ec:	4b7c      	ldr	r3, [pc, #496]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80028f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028fc:	4a78      	ldr	r2, [pc, #480]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028fe:	430b      	orrs	r3, r1
 8002900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002904:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002914:	2300      	movs	r3, #0
 8002916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800291a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800291e:	460b      	mov	r3, r1
 8002920:	4313      	orrs	r3, r2
 8002922:	d00b      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002924:	4b6e      	ldr	r3, [pc, #440]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800292a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800292e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002934:	4a6a      	ldr	r2, [pc, #424]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002936:	430b      	orrs	r3, r1
 8002938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800293c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002944:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002948:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002952:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002956:	460b      	mov	r3, r1
 8002958:	4313      	orrs	r3, r2
 800295a:	d00b      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800295c:	4b60      	ldr	r3, [pc, #384]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800295e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002962:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a5c      	ldr	r2, [pc, #368]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800296e:	430b      	orrs	r3, r1
 8002970:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002984:	2300      	movs	r3, #0
 8002986:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800298a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800298e:	460b      	mov	r3, r1
 8002990:	4313      	orrs	r3, r2
 8002992:	d00b      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002994:	4b52      	ldr	r3, [pc, #328]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800299e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a4:	4a4e      	ldr	r2, [pc, #312]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029a6:	430b      	orrs	r3, r1
 80029a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80029b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029bc:	2300      	movs	r3, #0
 80029be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80029c6:	460b      	mov	r3, r1
 80029c8:	4313      	orrs	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80029cc:	4b44      	ldr	r3, [pc, #272]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029d2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80029d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029dc:	4a40      	ldr	r2, [pc, #256]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029de:	430b      	orrs	r3, r1
 80029e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80029f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029fa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80029fe:	460b      	mov	r3, r1
 8002a00:	4313      	orrs	r3, r2
 8002a02:	d00b      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002a04:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a14:	4a32      	ldr	r2, [pc, #200]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a16:	430b      	orrs	r3, r1
 8002a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002a1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002a28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002a36:	460b      	mov	r3, r1
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	d00c      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002a3c:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a4e:	4a24      	ldr	r2, [pc, #144]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a50:	430b      	orrs	r3, r1
 8002a52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002a62:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a64:	2300      	movs	r3, #0
 8002a66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	d04f      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	2b80      	cmp	r3, #128	; 0x80
 8002a7c:	d02d      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002a7e:	2b80      	cmp	r3, #128	; 0x80
 8002a80:	d827      	bhi.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002a82:	2b60      	cmp	r3, #96	; 0x60
 8002a84:	d02e      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002a86:	2b60      	cmp	r3, #96	; 0x60
 8002a88:	d823      	bhi.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002a8a:	2b40      	cmp	r3, #64	; 0x40
 8002a8c:	d006      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002a8e:	2b40      	cmp	r3, #64	; 0x40
 8002a90:	d81f      	bhi.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d011      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002a9a:	e01a      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002aa8:	e01d      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aae:	3308      	adds	r3, #8
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 fa41 	bl	8004f38 <RCCEx_PLL2_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002abc:	e013      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ac2:	332c      	adds	r3, #44	; 0x2c
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f002 facf 	bl	8005068 <RCCEx_PLL3_Config>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002ad0:	e009      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002ad8:	e005      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8002ada:	bf00      	nop
 8002adc:	e003      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002ade:	bf00      	nop
 8002ae0:	46020c00 	.word	0x46020c00
        break;
 8002ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10d      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002aee:	4bb6      	ldr	r3, [pc, #728]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002af0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002af4:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8002af8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	4ab1      	ldr	r2, [pc, #708]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002b02:	430b      	orrs	r3, r1
 8002b04:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002b08:	e003      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002b0e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002b1e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b20:	2300      	movs	r3, #0
 8002b22:	677b      	str	r3, [r7, #116]	; 0x74
 8002b24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	d053      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8002b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3a:	d033      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b40:	d82c      	bhi.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b46:	d02f      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b4c:	d826      	bhi.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b52:	d008      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b58:	d820      	bhi.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8002b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b62:	d011      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002b64:	e01a      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b66:	4b98      	ldr	r3, [pc, #608]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	4a97      	ldr	r2, [pc, #604]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002b72:	e01a      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b78:	3308      	adds	r3, #8
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 f9dc 	bl	8004f38 <RCCEx_PLL2_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002b86:	e010      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b8c:	332c      	adds	r3, #44	; 0x2c
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 fa6a 	bl	8005068 <RCCEx_PLL3_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002b9a:	e006      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002ba2:	e002      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8002ba4:	bf00      	nop
 8002ba6:	e000      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8002ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002baa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002bb2:	4b85      	ldr	r3, [pc, #532]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002bb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002bb8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002bbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc4:	4a80      	ldr	r2, [pc, #512]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002bcc:	e003      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bce:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002bd2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002be2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002be4:	2300      	movs	r3, #0
 8002be6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002be8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002bec:	460b      	mov	r3, r1
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	d046      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002bfa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002bfe:	d028      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002c00:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002c04:	d821      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002c06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c0a:	d022      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c10:	d81b      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002c12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c16:	d01c      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002c18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c1c:	d815      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c22:	d008      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c28:	d80f      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d011      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c32:	d00e      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002c34:	e009      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 f97b 	bl	8004f38 <RCCEx_PLL2_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002c48:	e004      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002c50:	e000      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8002c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c54:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10d      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002c5c:	4b5a      	ldr	r3, [pc, #360]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c62:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c6e:	4a56      	ldr	r2, [pc, #344]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002c70:	430b      	orrs	r3, r1
 8002c72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c76:	e003      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002c7c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8002c80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8002c8e:	2300      	movs	r3, #0
 8002c90:	667b      	str	r3, [r7, #100]	; 0x64
 8002c92:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002c96:	460b      	mov	r3, r1
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	d03f      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8002c9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d81e      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8002ca8:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002cef 	.word	0x08002cef
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002cd3 	.word	0x08002cd3
 8002cbc:	08002cef 	.word	0x08002cef
 8002cc0:	08002cef 	.word	0x08002cef
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cc4:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	4a3f      	ldr	r2, [pc, #252]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cce:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002cd0:	e00e      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cd6:	332c      	adds	r3, #44	; 0x2c
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f002 f9c5 	bl	8005068 <RCCEx_PLL3_Config>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002ce4:	e004      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002cec:	e000      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8002cee:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002cf0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10d      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8002cf8:	4b33      	ldr	r3, [pc, #204]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002cfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002cfe:	f023 0107 	bic.w	r1, r3, #7
 8002d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	4a2f      	ldr	r2, [pc, #188]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002d12:	e003      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d14:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002d18:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002d1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002d28:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8002d32:	460b      	mov	r3, r1
 8002d34:	4313      	orrs	r3, r2
 8002d36:	d04d      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8002d38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d44:	d028      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002d46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d4a:	d821      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8002d4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d50:	d024      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8002d52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d56:	d81b      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8002d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d5c:	d00e      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8002d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d62:	d815      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01b      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d110      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002d7a:	e012      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d80:	332c      	adds	r3, #44	; 0x2c
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 f970 	bl	8005068 <RCCEx_PLL3_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002d8e:	e008      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002d96:	e004      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8002d98:	bf00      	nop
 8002d9a:	e002      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8002d9c:	bf00      	nop
 8002d9e:	e000      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8002da0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002da2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d110      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002db0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002db4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dbc:	4a02      	ldr	r2, [pc, #8]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dc4:	e006      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8002dc6:	bf00      	nop
 8002dc8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dcc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002dd0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002de0:	653b      	str	r3, [r7, #80]	; 0x50
 8002de2:	2300      	movs	r3, #0
 8002de4:	657b      	str	r3, [r7, #84]	; 0x54
 8002de6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8002dea:	460b      	mov	r3, r1
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f000 80b5 	beq.w	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df8:	4b9d      	ldr	r3, [pc, #628]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d113      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e06:	4b9a      	ldr	r3, [pc, #616]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0c:	4a98      	ldr	r2, [pc, #608]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e0e:	f043 0304 	orr.w	r3, r3, #4
 8002e12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002e16:	4b96      	ldr	r3, [pc, #600]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002e2e:	4b91      	ldr	r3, [pc, #580]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	4a90      	ldr	r2, [pc, #576]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e3a:	f7fd fe9d 	bl	8000b78 <HAL_GetTick>
 8002e3e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e42:	e00b      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e44:	f7fd fe98 	bl	8000b78 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d903      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002e5a:	e005      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e5c:	4b85      	ldr	r3, [pc, #532]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ed      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8002e68:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d165      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e70:	4b7f      	ldr	r3, [pc, #508]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d023      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8002e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01b      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e96:	4b76      	ldr	r3, [pc, #472]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ea4:	4b72      	ldr	r3, [pc, #456]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eaa:	4a71      	ldr	r2, [pc, #452]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eb4:	4b6e      	ldr	r3, [pc, #440]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eba:	4a6d      	ldr	r2, [pc, #436]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ec4:	4a6a      	ldr	r2, [pc, #424]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d019      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7fd fe4d 	bl	8000b78 <HAL_GetTick>
 8002ede:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee2:	e00d      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fd fe48 	bl	8000b78 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eee:	1ad2      	subs	r2, r2, r3
 8002ef0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d903      	bls.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8002efe:	e006      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f00:	4b5b      	ldr	r3, [pc, #364]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0ea      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8002f0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10d      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002f16:	4b56      	ldr	r3, [pc, #344]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f28:	4a51      	ldr	r2, [pc, #324]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f30:	e008      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f32:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002f36:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8002f3a:	e003      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002f40:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f44:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4c:	4b48      	ldr	r3, [pc, #288]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f52:	4a47      	ldr	r2, [pc, #284]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f54:	f023 0304 	bic.w	r3, r3, #4
 8002f58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8002f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f64:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8002f68:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002f72:	460b      	mov	r3, r1
 8002f74:	4313      	orrs	r3, r2
 8002f76:	d042      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8002f78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f80:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002f84:	d022      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x848>
 8002f86:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002f8a:	d81b      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8002f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f90:	d011      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8002f92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f96:	d815      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d019      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8002f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa0:	d110      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fa6:	3308      	adds	r3, #8
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 ffc5 	bl	8004f38 <RCCEx_PLL2_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002fb4:	e00d      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb6:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	4a2d      	ldr	r2, [pc, #180]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002fc2:	e006      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002fca:	e002      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8002fcc:	bf00      	nop
 8002fce:	e000      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8002fd0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002fd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8002fda:	4b25      	ldr	r3, [pc, #148]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002fe4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fe8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fec:	4a20      	ldr	r2, [pc, #128]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ff4:	e003      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002ffa:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003006:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800300a:	643b      	str	r3, [r7, #64]	; 0x40
 800300c:	2300      	movs	r3, #0
 800300e:	647b      	str	r3, [r7, #68]	; 0x44
 8003010:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003014:	460b      	mov	r3, r1
 8003016:	4313      	orrs	r3, r2
 8003018:	d032      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800301a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800301e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003026:	d00b      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302c:	d804      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003036:	d007      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800303e:	e004      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003040:	bf00      	nop
 8003042:	e002      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003044:	bf00      	nop
 8003046:	e000      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003048:	bf00      	nop
    }
    if (ret == HAL_OK)
 800304a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d112      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003054:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003058:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800305c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003060:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003064:	4a02      	ldr	r2, [pc, #8]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003066:	430b      	orrs	r3, r1
 8003068:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800306c:	e008      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800306e:	bf00      	nop
 8003070:	46020c00 	.word	0x46020c00
 8003074:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003078:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800307c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003080:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800308c:	63bb      	str	r3, [r7, #56]	; 0x38
 800308e:	2300      	movs	r3, #0
 8003090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003092:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003096:	460b      	mov	r3, r1
 8003098:	4313      	orrs	r3, r2
 800309a:	d00c      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800309c:	4b98      	ldr	r3, [pc, #608]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800309e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030a2:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80030a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ae:	4a94      	ldr	r2, [pc, #592]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80030b0:	430b      	orrs	r3, r1
 80030b2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80030b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030be:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80030c2:	633b      	str	r3, [r7, #48]	; 0x30
 80030c4:	2300      	movs	r3, #0
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
 80030c8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80030cc:	460b      	mov	r3, r1
 80030ce:	4313      	orrs	r3, r2
 80030d0:	d019      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80030d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030de:	d105      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030e0:	4b87      	ldr	r3, [pc, #540]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	4a86      	ldr	r2, [pc, #536]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ea:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80030ec:	4b84      	ldr	r3, [pc, #528]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80030ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030f2:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80030f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030fe:	4a80      	ldr	r2, [pc, #512]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003100:	430b      	orrs	r3, r1
 8003102:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
 8003114:	2300      	movs	r3, #0
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003118:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800311c:	460b      	mov	r3, r1
 800311e:	4313      	orrs	r3, r2
 8003120:	d00c      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003122:	4b77      	ldr	r3, [pc, #476]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800312c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003130:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003134:	4972      	ldr	r1, [pc, #456]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800313c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003148:	623b      	str	r3, [r7, #32]
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
 800314e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003152:	460b      	mov	r3, r1
 8003154:	4313      	orrs	r3, r2
 8003156:	d00c      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003158:	4b69      	ldr	r3, [pc, #420]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800315a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800315e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003166:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800316a:	4965      	ldr	r1, [pc, #404]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003188:	460b      	mov	r3, r1
 800318a:	4313      	orrs	r3, r2
 800318c:	d00c      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800318e:	4b5c      	ldr	r3, [pc, #368]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003194:	f023 0218 	bic.w	r2, r3, #24
 8003198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800319c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80031a0:	4957      	ldr	r1, [pc, #348]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80031a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80031be:	460b      	mov	r3, r1
 80031c0:	4313      	orrs	r3, r2
 80031c2:	d032      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80031c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031d0:	d105      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031d2:	4b4b      	ldr	r3, [pc, #300]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	4a4a      	ldr	r2, [pc, #296]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80031d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031dc:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80031de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031ea:	d108      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031f0:	3308      	adds	r3, #8
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 fea0 	bl	8004f38 <RCCEx_PLL2_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80031fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10d      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003206:	4b3e      	ldr	r3, [pc, #248]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003208:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800320c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003210:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003214:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003218:	4939      	ldr	r1, [pc, #228]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003220:	e003      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003222:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003226:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800322a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003232:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003240:	460b      	mov	r3, r1
 8003242:	4313      	orrs	r3, r2
 8003244:	d03a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800324a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800324e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003252:	d00e      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8003254:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003258:	d815      	bhi.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d017      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800325e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003262:	d110      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003264:	4b26      	ldr	r3, [pc, #152]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	4a25      	ldr	r2, [pc, #148]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800326a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326e:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003270:	e00e      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003276:	3308      	adds	r3, #8
 8003278:	4618      	mov	r0, r3
 800327a:	f001 fe5d 	bl	8004f38 <RCCEx_PLL2_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003284:	e004      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800328c:	e000      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800328e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003290:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10d      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800329a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032aa:	4915      	ldr	r1, [pc, #84]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80032b2:	e003      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80032b8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80032bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80032d2:	460b      	mov	r3, r1
 80032d4:	4313      	orrs	r3, r2
 80032d6:	d00c      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80032da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80032e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032ea:	4905      	ldr	r1, [pc, #20]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80032f2:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	37e8      	adds	r7, #232	; 0xe8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003300:	46020c00 	.word	0x46020c00

08003304 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800330c:	4bad      	ldr	r3, [pc, #692]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800330e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003314:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003316:	4bab      	ldr	r3, [pc, #684]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003320:	4ba8      	ldr	r3, [pc, #672]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	3301      	adds	r3, #1
 800332c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800332e:	4ba5      	ldr	r3, [pc, #660]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800333a:	4ba2      	ldr	r3, [pc, #648]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	08db      	lsrs	r3, r3, #3
 8003340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8123 	beq.w	80035a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d062      	beq.n	800342a <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2b03      	cmp	r3, #3
 8003368:	f200 8081 	bhi.w	800346e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d024      	beq.n	80033bc <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d17a      	bne.n	800346e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003382:	eddf 6a91 	vldr	s13, [pc, #580]	; 80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800338a:	4b8e      	ldr	r3, [pc, #568]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800339a:	ed97 6a02 	vldr	s12, [r7, #8]
 800339e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80035cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80033a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80033aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033ba:	e08f      	b.n	80034dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80033bc:	4b81      	ldr	r3, [pc, #516]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80033c8:	4b7e      	ldr	r3, [pc, #504]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	0f1b      	lsrs	r3, r3, #28
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	e006      	b.n	80033e2 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80033d4:	4b7b      	ldr	r3, [pc, #492]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80033d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033da:	041b      	lsls	r3, r3, #16
 80033dc:	0f1b      	lsrs	r3, r3, #28
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	4a7b      	ldr	r2, [pc, #492]	; (80035d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80033e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e8:	ee07 3a90 	vmov	s15, r3
 80033ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	ee07 3a90 	vmov	s15, r3
 8003404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003408:	ed97 6a02 	vldr	s12, [r7, #8]
 800340c:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80035cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003410:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003418:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800341c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003424:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003428:	e058      	b.n	80034dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	ee07 3a90 	vmov	s15, r3
 8003430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003434:	eddf 6a64 	vldr	s13, [pc, #400]	; 80035c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343c:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800343e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003444:	ee07 3a90 	vmov	s15, r3
 8003448:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800344c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003450:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80035cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003454:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003458:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800345c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003460:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003468:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800346c:	e036      	b.n	80034dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800346e:	4b55      	ldr	r3, [pc, #340]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800347a:	4b52      	ldr	r3, [pc, #328]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	0f1b      	lsrs	r3, r3, #28
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	e006      	b.n	8003494 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8003486:	4b4f      	ldr	r3, [pc, #316]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800348c:	041b      	lsls	r3, r3, #16
 800348e:	0f1b      	lsrs	r3, r3, #28
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	4a4e      	ldr	r2, [pc, #312]	; (80035d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	ee07 3a90 	vmov	s15, r3
 80034a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80034be:	eddf 5a43 	vldr	s11, [pc, #268]	; 80035cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80034c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80034d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034da:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80034dc:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80034ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ec:	0a5b      	lsrs	r3, r3, #9
 80034ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80034fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034fe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003502:	edd7 6a07 	vldr	s13, [r7, #28]
 8003506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800350a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800350e:	ee17 2a90 	vmov	r2, s15
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e002      	b.n	800351e <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800351e:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d017      	beq.n	800355a <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800352c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352e:	0c1b      	lsrs	r3, r3, #16
 8003530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003534:	ee07 3a90 	vmov	s15, r3
 8003538:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800353c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003540:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003544:	edd7 6a07 	vldr	s13, [r7, #28]
 8003548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800354c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003550:	ee17 2a90 	vmov	r2, s15
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	e002      	b.n	8003560 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003560:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d017      	beq.n	800359c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800356c:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800356e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003570:	0e1b      	lsrs	r3, r3, #24
 8003572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800357e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003582:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003586:	edd7 6a07 	vldr	s13, [r7, #28]
 800358a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800358e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003592:	ee17 2a90 	vmov	r2, s15
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800359a:	e00c      	b.n	80035b6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
}
 80035a2:	e008      	b.n	80035b6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
}
 80035b6:	bf00      	nop
 80035b8:	3724      	adds	r7, #36	; 0x24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	46020c00 	.word	0x46020c00
 80035c8:	4b742400 	.word	0x4b742400
 80035cc:	46000000 	.word	0x46000000
 80035d0:	08006790 	.word	0x08006790

080035d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	; 0x24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80035dc:	4bad      	ldr	r3, [pc, #692]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80035e6:	4bab      	ldr	r3, [pc, #684]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80035f0:	4ba8      	ldr	r3, [pc, #672]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	0a1b      	lsrs	r3, r3, #8
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	3301      	adds	r3, #1
 80035fc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80035fe:	4ba5      	ldr	r3, [pc, #660]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800360a:	4ba2      	ldr	r3, [pc, #648]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	08db      	lsrs	r3, r3, #3
 8003610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003622:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8123 	beq.w	8003874 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d062      	beq.n	80036fa <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b03      	cmp	r3, #3
 8003638:	f200 8081 	bhi.w	800373e <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d024      	beq.n	800368c <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d17a      	bne.n	800373e <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003652:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800365a:	4b8e      	ldr	r3, [pc, #568]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800366a:	ed97 6a02 	vldr	s12, [r7, #8]
 800366e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003672:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003676:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800367a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800367e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800368a:	e08f      	b.n	80037ac <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800368c:	4b81      	ldr	r3, [pc, #516]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8003698:	4b7e      	ldr	r3, [pc, #504]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	0f1b      	lsrs	r3, r3, #28
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	e006      	b.n	80036b2 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 80036a4:	4b7b      	ldr	r3, [pc, #492]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80036a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036aa:	041b      	lsls	r3, r3, #16
 80036ac:	0f1b      	lsrs	r3, r3, #28
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	4a7b      	ldr	r2, [pc, #492]	; (80038a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 80036b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	ee07 3a90 	vmov	s15, r3
 80036c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	ee07 3a90 	vmov	s15, r3
 80036d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80036dc:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80036e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80036f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036f8:	e058      	b.n	80037ac <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	ee07 3a90 	vmov	s15, r3
 8003700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003704:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370c:	4b61      	ldr	r3, [pc, #388]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003714:	ee07 3a90 	vmov	s15, r3
 8003718:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800371c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003720:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003724:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003728:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800372c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003730:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003738:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800373c:	e036      	b.n	80037ac <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800373e:	4b55      	ldr	r3, [pc, #340]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800374a:	4b52      	ldr	r3, [pc, #328]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	0f1b      	lsrs	r3, r3, #28
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	e006      	b.n	8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8003756:	4b4f      	ldr	r3, [pc, #316]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	0f1b      	lsrs	r3, r3, #28
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	4a4e      	ldr	r2, [pc, #312]	; (80038a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800378a:	ed97 6a02 	vldr	s12, [r7, #8]
 800378e:	eddf 5a43 	vldr	s11, [pc, #268]	; 800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800379a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80037a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037aa:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80037ac:	4b39      	ldr	r3, [pc, #228]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d017      	beq.n	80037e8 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037b8:	4b36      	ldr	r3, [pc, #216]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	0a5b      	lsrs	r3, r3, #9
 80037be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80037ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037ce:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80037d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037de:	ee17 2a90 	vmov	r2, s15
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e002      	b.n	80037ee <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d017      	beq.n	800382a <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	0c1b      	lsrs	r3, r3, #16
 8003800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003804:	ee07 3a90 	vmov	s15, r3
 8003808:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800380c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003810:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003814:	edd7 6a07 	vldr	s13, [r7, #28]
 8003818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800381c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003820:	ee17 2a90 	vmov	r2, s15
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	605a      	str	r2, [r3, #4]
 8003828:	e002      	b.n	8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003830:	4b18      	ldr	r3, [pc, #96]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d017      	beq.n	800386c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800383c:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	0e1b      	lsrs	r3, r3, #24
 8003842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800384e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003852:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003856:	edd7 6a07 	vldr	s13, [r7, #28]
 800385a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800385e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003862:	ee17 2a90 	vmov	r2, s15
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800386a:	e00c      	b.n	8003886 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
}
 8003872:	e008      	b.n	8003886 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
}
 8003886:	bf00      	nop
 8003888:	3724      	adds	r7, #36	; 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	46020c00 	.word	0x46020c00
 8003898:	4b742400 	.word	0x4b742400
 800389c:	46000000 	.word	0x46000000
 80038a0:	08006790 	.word	0x08006790

080038a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b089      	sub	sp, #36	; 0x24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80038ac:	4bad      	ldr	r3, [pc, #692]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80038b6:	4bab      	ldr	r3, [pc, #684]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80038c0:	4ba8      	ldr	r3, [pc, #672]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	0a1b      	lsrs	r3, r3, #8
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	3301      	adds	r3, #1
 80038cc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80038ce:	4ba5      	ldr	r3, [pc, #660]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80038da:	4ba2      	ldr	r3, [pc, #648]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80038dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038de:	08db      	lsrs	r3, r3, #3
 80038e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8123 	beq.w	8003b44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d062      	beq.n	80039ca <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2b03      	cmp	r3, #3
 8003908:	f200 8081 	bhi.w	8003a0e <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d024      	beq.n	800395c <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d17a      	bne.n	8003a0e <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003922:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003b68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392a:	4b8e      	ldr	r3, [pc, #568]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800393a:	ed97 6a02 	vldr	s12, [r7, #8]
 800393e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003b6c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003942:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003946:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800394a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800394e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003956:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800395a:	e08f      	b.n	8003a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800395c:	4b81      	ldr	r3, [pc, #516]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8003968:	4b7e      	ldr	r3, [pc, #504]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	0f1b      	lsrs	r3, r3, #28
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	e006      	b.n	8003982 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8003974:	4b7b      	ldr	r3, [pc, #492]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003976:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800397a:	041b      	lsls	r3, r3, #16
 800397c:	0f1b      	lsrs	r3, r3, #28
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	4a7b      	ldr	r2, [pc, #492]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8003984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	ee07 3a90 	vmov	s15, r3
 80039a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ac:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003b6c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80039b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80039c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039c8:	e058      	b.n	8003a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	ee07 3a90 	vmov	s15, r3
 80039d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d4:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003b68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80039d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039dc:	4b61      	ldr	r3, [pc, #388]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e4:	ee07 3a90 	vmov	s15, r3
 80039e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80039ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80039f0:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003b6c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80039f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80039f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80039fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a0c:	e036      	b.n	8003a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003a0e:	4b55      	ldr	r3, [pc, #340]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8003a1a:	4b52      	ldr	r3, [pc, #328]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0f1b      	lsrs	r3, r3, #28
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	e006      	b.n	8003a34 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8003a26:	4b4f      	ldr	r3, [pc, #316]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	0f1b      	lsrs	r3, r3, #28
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	4a4e      	ldr	r2, [pc, #312]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8003a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	ee07 3a90 	vmov	s15, r3
 8003a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a5e:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003b6c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a7a:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003a7c:	4b39      	ldr	r3, [pc, #228]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d017      	beq.n	8003ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003a88:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	0a5b      	lsrs	r3, r3, #9
 8003a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a9e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003aa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aae:	ee17 2a90 	vmov	r2, s15
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e002      	b.n	8003abe <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003abe:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d017      	beq.n	8003afa <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003aca:	4b26      	ldr	r3, [pc, #152]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	0c1b      	lsrs	r3, r3, #16
 8003ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad4:	ee07 3a90 	vmov	s15, r3
 8003ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003adc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ae0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003ae4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003af0:	ee17 2a90 	vmov	r2, s15
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	605a      	str	r2, [r3, #4]
 8003af8:	e002      	b.n	8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003b00:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d017      	beq.n	8003b3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003b0c:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	0e1b      	lsrs	r3, r3, #24
 8003b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003b1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b22:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b32:	ee17 2a90 	vmov	r2, s15
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8003b3a:	e00c      	b.n	8003b56 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
}
 8003b42:	e008      	b.n	8003b56 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
}
 8003b56:	bf00      	nop
 8003b58:	3724      	adds	r7, #36	; 0x24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	46020c00 	.word	0x46020c00
 8003b68:	4b742400 	.word	0x4b742400
 8003b6c:	46000000 	.word	0x46000000
 8003b70:	08006790 	.word	0x08006790

08003b74 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08e      	sub	sp, #56	; 0x38
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b82:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8003b86:	430b      	orrs	r3, r1
 8003b88:	d145      	bne.n	8003c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003b8a:	4ba7      	ldr	r3, [pc, #668]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b94:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003b96:	4ba4      	ldr	r3, [pc, #656]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d108      	bne.n	8003bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003baa:	d104      	bne.n	8003bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb2:	f001 b9b3 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003bb6:	4b9c      	ldr	r3, [pc, #624]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc4:	d114      	bne.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bcc:	d110      	bne.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003bce:	4b96      	ldr	r3, [pc, #600]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bdc:	d103      	bne.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8003bde:	23fa      	movs	r3, #250	; 0xfa
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003be2:	f001 b99b 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8003be6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003bea:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003bec:	f001 b996 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003bf0:	4b8d      	ldr	r3, [pc, #564]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c04:	d103      	bne.n	8003c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8003c06:	4b89      	ldr	r3, [pc, #548]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
 8003c0a:	f001 b987 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	637b      	str	r3, [r7, #52]	; 0x34
 8003c12:	f001 b983 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c1a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	d151      	bne.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003c22:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003c24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003c28:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003c2c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d035      	beq.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	2b80      	cmp	r3, #128	; 0x80
 8003c38:	d841      	bhi.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	2b60      	cmp	r3, #96	; 0x60
 8003c3e:	d02a      	beq.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	2b60      	cmp	r3, #96	; 0x60
 8003c44:	d83b      	bhi.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d009      	beq.n	8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d835      	bhi.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00c      	beq.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d012      	beq.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003c5e:	e02e      	b.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fb4d 	bl	8003304 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c6e:	f001 b955 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c72:	f107 0318 	add.w	r3, r7, #24
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fcac 	bl	80035d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c80:	f001 b94c 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c84:	f107 030c 	add.w	r3, r7, #12
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fe0b 	bl	80038a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c92:	f001 b943 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003c96:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c9c:	f001 b93e 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ca0:	4b61      	ldr	r3, [pc, #388]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cac:	d103      	bne.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8003cae:	4b60      	ldr	r3, [pc, #384]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003cb0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003cb2:	f001 b933 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cba:	f001 b92f 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cc2:	f001 b92b 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8003cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cca:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8003cce:	430b      	orrs	r3, r1
 8003cd0:	d158      	bne.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003cd2:	4b55      	ldr	r3, [pc, #340]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003cd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003cd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce4:	d03b      	beq.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cec:	d846      	bhi.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf4:	d02e      	beq.n	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cfc:	d83e      	bhi.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d04:	d00b      	beq.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0c:	d836      	bhi.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00d      	beq.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1a:	d012      	beq.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8003d1c:	e02e      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff faee 	bl	8003304 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d2c:	f001 b8f6 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d30:	f107 0318 	add.w	r3, r7, #24
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fc4d 	bl	80035d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d3e:	f001 b8ed 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d42:	f107 030c 	add.w	r3, r7, #12
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff fdac 	bl	80038a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d50:	f001 b8e4 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003d54:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d5a:	f001 b8df 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d5e:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6a:	d103      	bne.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8003d6c:	4b30      	ldr	r3, [pc, #192]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003d6e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003d70:	f001 b8d4 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d78:	f001 b8d0 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d80:	f001 b8cc 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8003d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d88:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	d126      	bne.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003d92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8003d9c:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da8:	d106      	bne.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d103      	bne.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8003db0:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
 8003db4:	f001 b8b2 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8003db8:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc4:	d107      	bne.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dcc:	d103      	bne.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8003dce:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd2:	f001 b8a3 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dda:	f001 b89f 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8003dde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003de2:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8003de6:	430b      	orrs	r3, r1
 8003de8:	d16e      	bne.n	8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003dea:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003df0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003df4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003dfc:	d03d      	beq.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003e04:	d85c      	bhi.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0c:	d014      	beq.n	8003e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e14:	d854      	bhi.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01f      	beq.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e22:	d012      	beq.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8003e24:	e04c      	b.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003e26:	bf00      	nop
 8003e28:	46020c00 	.word	0x46020c00
 8003e2c:	0007a120 	.word	0x0007a120
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fa61 	bl	8003304 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e46:	f001 b869 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e4a:	f107 0318 	add.w	r3, r7, #24
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff fbc0 	bl	80035d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e58:	f001 b860 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003e5c:	4ba7      	ldr	r3, [pc, #668]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e68:	d103      	bne.n	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8003e6a:	4ba5      	ldr	r3, [pc, #660]	; (8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003e6e:	f001 b855 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e76:	f001 b851 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8003e7a:	4ba0      	ldr	r3, [pc, #640]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d118      	bne.n	8003eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003e86:	4b9d      	ldr	r3, [pc, #628]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8003e92:	4b9a      	ldr	r3, [pc, #616]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	0e1b      	lsrs	r3, r3, #24
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	e006      	b.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8003e9e:	4b97      	ldr	r3, [pc, #604]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003ea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	0e1b      	lsrs	r3, r3, #24
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	4a95      	ldr	r2, [pc, #596]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003eb4:	f001 b832 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ebc:	f001 b82e 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ec4:	f001 b82a 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ecc:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	d17f      	bne.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8003ed4:	4b89      	ldr	r3, [pc, #548]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003ed6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ede:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d165      	bne.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003ee6:	4b85      	ldr	r3, [pc, #532]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eec:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003ef0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ef8:	d034      	beq.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003f00:	d853      	bhi.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f08:	d00b      	beq.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f10:	d84b      	bhi.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d016      	beq.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f1e:	d009      	beq.n	8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003f20:	e043      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff f9ec 	bl	8003304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8003f30:	f000 bff4 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f34:	f107 0318 	add.w	r3, r7, #24
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fb4b 	bl	80035d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8003f42:	f000 bfeb 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003f46:	4b6d      	ldr	r3, [pc, #436]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f52:	d103      	bne.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8003f54:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8003f58:	f000 bfe0 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8003f60:	f000 bfdc 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8003f64:	4b65      	ldr	r3, [pc, #404]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d118      	bne.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003f70:	4b62      	ldr	r3, [pc, #392]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8003f7c:	4b5f      	ldr	r3, [pc, #380]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	0e1b      	lsrs	r3, r3, #24
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	e006      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8003f88:	4b5c      	ldr	r3, [pc, #368]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f8e:	041b      	lsls	r3, r3, #16
 8003f90:	0e1b      	lsrs	r3, r3, #24
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	4a5b      	ldr	r2, [pc, #364]	; (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8003f9e:	f000 bfbd 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8003fa6:	f000 bfb9 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8003fae:	f000 bfb5 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb8:	d108      	bne.n	8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff f9a0 	bl	8003304 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc8:	f000 bfa8 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	637b      	str	r3, [r7, #52]	; 0x34
 8003fd0:	f000 bfa4 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8003fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fd8:	1e51      	subs	r1, r2, #1
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	d136      	bne.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003fde:	4b47      	ldr	r3, [pc, #284]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d104      	bne.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8003ff0:	f7fe fb1a 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8003ff4:	6378      	str	r0, [r7, #52]	; 0x34
 8003ff6:	f000 bf91 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d104      	bne.n	800400a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004000:	f7fe f9dc 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8004004:	6378      	str	r0, [r7, #52]	; 0x34
 8004006:	f000 bf89 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800400a:	4b3c      	ldr	r3, [pc, #240]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004016:	d106      	bne.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	2b02      	cmp	r3, #2
 800401c:	d103      	bne.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800401e:	4b3a      	ldr	r3, [pc, #232]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004020:	637b      	str	r3, [r7, #52]	; 0x34
 8004022:	f000 bf7b 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004026:	4b35      	ldr	r3, [pc, #212]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d107      	bne.n	8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	2b03      	cmp	r3, #3
 8004038:	d104      	bne.n	8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800403a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
 8004040:	f000 bf6c 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	637b      	str	r3, [r7, #52]	; 0x34
 8004048:	f000 bf68 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800404c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004050:	1e91      	subs	r1, r2, #2
 8004052:	430b      	orrs	r3, r1
 8004054:	d136      	bne.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004056:	4b29      	ldr	r3, [pc, #164]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800405c:	f003 030c 	and.w	r3, r3, #12
 8004060:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	2b00      	cmp	r3, #0
 8004066:	d104      	bne.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004068:	f7fe faca 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 800406c:	6378      	str	r0, [r7, #52]	; 0x34
 800406e:	f000 bf55 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	2b04      	cmp	r3, #4
 8004076:	d104      	bne.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004078:	f7fe f9a0 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800407c:	6378      	str	r0, [r7, #52]	; 0x34
 800407e:	f000 bf4d 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004082:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408e:	d106      	bne.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	2b08      	cmp	r3, #8
 8004094:	d103      	bne.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8004096:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004098:	637b      	str	r3, [r7, #52]	; 0x34
 800409a:	f000 bf3f 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800409e:	4b17      	ldr	r3, [pc, #92]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80040a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d107      	bne.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	2b0c      	cmp	r3, #12
 80040b0:	d104      	bne.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80040b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b6:	637b      	str	r3, [r7, #52]	; 0x34
 80040b8:	f000 bf30 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	637b      	str	r3, [r7, #52]	; 0x34
 80040c0:	f000 bf2c 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80040c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040c8:	1f11      	subs	r1, r2, #4
 80040ca:	430b      	orrs	r3, r1
 80040cc:	d13f      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80040d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040d8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d104      	bne.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80040e0:	f7fe fa8e 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 80040e4:	6378      	str	r0, [r7, #52]	; 0x34
 80040e6:	f000 bf19 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d10d      	bne.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80040f0:	f7fe f964 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 80040f4:	6378      	str	r0, [r7, #52]	; 0x34
 80040f6:	f000 bf11 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80040fa:	bf00      	nop
 80040fc:	46020c00 	.word	0x46020c00
 8004100:	02dc6c00 	.word	0x02dc6c00
 8004104:	08006790 	.word	0x08006790
 8004108:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800410c:	4ba6      	ldr	r3, [pc, #664]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004118:	d106      	bne.n	8004128 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	2b20      	cmp	r3, #32
 800411e:	d103      	bne.n	8004128 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8004120:	4ba2      	ldr	r3, [pc, #648]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
 8004124:	f000 befa 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004128:	4b9f      	ldr	r3, [pc, #636]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800412a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	d107      	bne.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	2b30      	cmp	r3, #48	; 0x30
 800413a:	d104      	bne.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800413c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
 8004142:	f000 beeb 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
 800414a:	f000 bee7 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800414e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004152:	f1a2 0108 	sub.w	r1, r2, #8
 8004156:	430b      	orrs	r3, r1
 8004158:	d136      	bne.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800415a:	4b93      	ldr	r3, [pc, #588]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800415c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004160:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004164:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800416c:	f7fe fa48 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8004170:	6378      	str	r0, [r7, #52]	; 0x34
 8004172:	f000 bed3 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	2b40      	cmp	r3, #64	; 0x40
 800417a:	d104      	bne.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800417c:	f7fe f91e 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8004180:	6378      	str	r0, [r7, #52]	; 0x34
 8004182:	f000 becb 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004186:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004192:	d106      	bne.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	2b80      	cmp	r3, #128	; 0x80
 8004198:	d103      	bne.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800419a:	4b84      	ldr	r3, [pc, #528]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
 800419e:	f000 bebd 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80041a2:	4b81      	ldr	r3, [pc, #516]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80041a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d107      	bne.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	2bc0      	cmp	r3, #192	; 0xc0
 80041b4:	d104      	bne.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80041b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
 80041bc:	f000 beae 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	637b      	str	r3, [r7, #52]	; 0x34
 80041c4:	f000 beaa 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80041c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041cc:	f1a2 0110 	sub.w	r1, r2, #16
 80041d0:	430b      	orrs	r3, r1
 80041d2:	d139      	bne.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80041d4:	4b74      	ldr	r3, [pc, #464]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80041d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041de:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d104      	bne.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80041e6:	f7fe fa0b 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 80041ea:	6378      	str	r0, [r7, #52]	; 0x34
 80041ec:	f000 be96 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f6:	d104      	bne.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80041f8:	f7fe f8e0 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 80041fc:	6378      	str	r0, [r7, #52]	; 0x34
 80041fe:	f000 be8d 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004202:	4b69      	ldr	r3, [pc, #420]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420e:	d107      	bne.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004216:	d103      	bne.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8004218:	4b64      	ldr	r3, [pc, #400]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800421a:	637b      	str	r3, [r7, #52]	; 0x34
 800421c:	f000 be7e 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004220:	4b61      	ldr	r3, [pc, #388]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	d108      	bne.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004234:	d104      	bne.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8004236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
 800423c:	f000 be6e 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
 8004244:	f000 be6a 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004248:	e9d7 2300 	ldrd	r2, r3, [r7]
 800424c:	f1a2 0120 	sub.w	r1, r2, #32
 8004250:	430b      	orrs	r3, r1
 8004252:	d158      	bne.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004254:	4b54      	ldr	r3, [pc, #336]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	2b00      	cmp	r3, #0
 8004264:	d104      	bne.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004266:	f7fe f9f3 	bl	8002650 <HAL_RCC_GetPCLK3Freq>
 800426a:	6378      	str	r0, [r7, #52]	; 0x34
 800426c:	f000 be56 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	2b01      	cmp	r3, #1
 8004274:	d104      	bne.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004276:	f7fe f8a1 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800427a:	6378      	str	r0, [r7, #52]	; 0x34
 800427c:	f000 be4e 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004280:	4b49      	ldr	r3, [pc, #292]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428c:	d106      	bne.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	2b02      	cmp	r3, #2
 8004292:	d103      	bne.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8004294:	4b45      	ldr	r3, [pc, #276]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004296:	637b      	str	r3, [r7, #52]	; 0x34
 8004298:	f000 be40 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800429c:	4b42      	ldr	r3, [pc, #264]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800429e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d107      	bne.n	80042ba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d104      	bne.n	80042ba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 80042b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b4:	637b      	str	r3, [r7, #52]	; 0x34
 80042b6:	f000 be31 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80042ba:	4b3b      	ldr	r3, [pc, #236]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d11b      	bne.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d118      	bne.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80042cc:	4b36      	ldr	r3, [pc, #216]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80042d8:	4b33      	ldr	r3, [pc, #204]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	0e1b      	lsrs	r3, r3, #24
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	e006      	b.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 80042e4:	4b30      	ldr	r3, [pc, #192]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80042e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042ea:	041b      	lsls	r3, r3, #16
 80042ec:	0e1b      	lsrs	r3, r3, #24
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	4a2f      	ldr	r2, [pc, #188]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80042f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
 80042fa:	f000 be0f 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	637b      	str	r3, [r7, #52]	; 0x34
 8004302:	f000 be0b 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800430a:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800430e:	430b      	orrs	r3, r1
 8004310:	d172      	bne.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004312:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004314:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004318:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800431c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004324:	d104      	bne.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004326:	f7fe f849 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800432a:	6378      	str	r0, [r7, #52]	; 0x34
 800432c:	f000 bdf6 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004336:	d108      	bne.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004338:	f107 0318 	add.w	r3, r7, #24
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff f949 	bl	80035d4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	637b      	str	r3, [r7, #52]	; 0x34
 8004346:	f000 bde9 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004350:	f7fe f93c 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8004354:	6378      	str	r0, [r7, #52]	; 0x34
 8004356:	f000 bde1 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004360:	d128      	bne.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004362:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b20      	cmp	r3, #32
 800436c:	d118      	bne.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800436e:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800437a:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	0e1b      	lsrs	r3, r3, #24
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	e006      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	0e1b      	lsrs	r3, r3, #24
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	4a06      	ldr	r2, [pc, #24]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439a:	637b      	str	r3, [r7, #52]	; 0x34
 800439c:	f000 bdbe 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
 80043a4:	f000 bdba 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80043a8:	46020c00 	.word	0x46020c00
 80043ac:	00f42400 	.word	0x00f42400
 80043b0:	08006790 	.word	0x08006790
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80043b4:	4baf      	ldr	r3, [pc, #700]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043c0:	d107      	bne.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043c8:	d103      	bne.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 80043ca:	4bab      	ldr	r3, [pc, #684]	; (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
 80043ce:	f000 bda5 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80043d2:	4ba8      	ldr	r3, [pc, #672]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043de:	d107      	bne.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e6:	d103      	bne.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 80043e8:	4ba3      	ldr	r3, [pc, #652]	; (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80043ea:	637b      	str	r3, [r7, #52]	; 0x34
 80043ec:	f000 bd96 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	637b      	str	r3, [r7, #52]	; 0x34
 80043f4:	f000 bd92 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80043f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043fc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004400:	430b      	orrs	r3, r1
 8004402:	d158      	bne.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004404:	4b9b      	ldr	r3, [pc, #620]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004406:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	2b04      	cmp	r3, #4
 8004414:	d84b      	bhi.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8004416:	a201      	add	r2, pc, #4	; (adr r2, 800441c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	08004455 	.word	0x08004455
 8004420:	08004431 	.word	0x08004431
 8004424:	08004443 	.word	0x08004443
 8004428:	0800445f 	.word	0x0800445f
 800442c:	08004469 	.word	0x08004469
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe ff65 	bl	8003304 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800443e:	f000 bd6d 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004442:	f107 030c 	add.w	r3, r7, #12
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fa2c 	bl	80038a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004450:	f000 bd64 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004454:	f7fe f8ba 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8004458:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800445a:	f000 bd5f 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800445e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004462:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004464:	f000 bd5a 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004468:	4b82      	ldr	r3, [pc, #520]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b20      	cmp	r3, #32
 8004472:	d118      	bne.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004474:	4b7f      	ldr	r3, [pc, #508]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004480:	4b7c      	ldr	r3, [pc, #496]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	0e1b      	lsrs	r3, r3, #24
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	e006      	b.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800448c:	4b79      	ldr	r3, [pc, #484]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800448e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004492:	041b      	lsls	r3, r3, #16
 8004494:	0e1b      	lsrs	r3, r3, #24
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	4a78      	ldr	r2, [pc, #480]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800449c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80044a2:	f000 bd3b 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044aa:	f000 bd37 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044b2:	f000 bd33 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80044b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044ba:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80044be:	430b      	orrs	r3, r1
 80044c0:	d167      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80044c2:	4b6c      	ldr	r3, [pc, #432]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80044c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044c8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80044cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044d4:	d036      	beq.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044dc:	d855      	bhi.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044e4:	d029      	beq.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044ec:	d84d      	bhi.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044f4:	d013      	beq.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044fc:	d845      	bhi.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	2b00      	cmp	r3, #0
 8004502:	d015      	beq.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450a:	d13e      	bne.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800450c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004510:	4618      	mov	r0, r3
 8004512:	f7fe fef7 	bl	8003304 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800451a:	f000 bcff 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800451e:	f107 030c 	add.w	r3, r7, #12
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff f9be 	bl	80038a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800452c:	f000 bcf6 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004530:	f7fe f84c 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8004534:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004536:	f000 bcf1 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800453a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004540:	f000 bcec 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004544:	4b4b      	ldr	r3, [pc, #300]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b20      	cmp	r3, #32
 800454e:	d118      	bne.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004550:	4b48      	ldr	r3, [pc, #288]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800455c:	4b45      	ldr	r3, [pc, #276]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	0e1b      	lsrs	r3, r3, #24
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	e006      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8004568:	4b42      	ldr	r3, [pc, #264]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800456a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800456e:	041b      	lsls	r3, r3, #16
 8004570:	0e1b      	lsrs	r3, r3, #24
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	4a41      	ldr	r2, [pc, #260]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8004578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800457c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800457e:	f000 bccd 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004586:	f000 bcc9 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800458e:	f000 bcc5 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004596:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800459a:	430b      	orrs	r3, r1
 800459c:	d14c      	bne.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800459e:	4b35      	ldr	r3, [pc, #212]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80045a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80045b0:	f7fe f826 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 80045b4:	6378      	str	r0, [r7, #52]	; 0x34
 80045b6:	f000 bcb1 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c0:	d104      	bne.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80045c2:	f7fd fefb 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 80045c6:	6378      	str	r0, [r7, #52]	; 0x34
 80045c8:	f000 bca8 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80045cc:	4b29      	ldr	r3, [pc, #164]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d8:	d107      	bne.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045e0:	d103      	bne.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 80045e2:	4b25      	ldr	r3, [pc, #148]	; (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
 80045e6:	f000 bc99 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80045ea:	4b22      	ldr	r3, [pc, #136]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	d11c      	bne.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045fc:	d118      	bne.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80045fe:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800460a:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	0e1b      	lsrs	r3, r3, #24
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	e006      	b.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8004616:	4b17      	ldr	r3, [pc, #92]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004618:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	0e1b      	lsrs	r3, r3, #24
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	4a15      	ldr	r2, [pc, #84]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8004626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
 800462c:	f000 bc76 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
 8004634:	f000 bc72 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800463c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8004640:	430b      	orrs	r3, r1
 8004642:	d153      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800464a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800464e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	2b00      	cmp	r3, #0
 8004654:	d104      	bne.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004656:	f7fd ffd3 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 800465a:	6378      	str	r0, [r7, #52]	; 0x34
 800465c:	f000 bc5e 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004666:	d10b      	bne.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004668:	f7fd fea8 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800466c:	6378      	str	r0, [r7, #52]	; 0x34
 800466e:	f000 bc55 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8004672:	bf00      	nop
 8004674:	46020c00 	.word	0x46020c00
 8004678:	00f42400 	.word	0x00f42400
 800467c:	08006790 	.word	0x08006790
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004680:	4ba1      	ldr	r3, [pc, #644]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468c:	d107      	bne.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004694:	d103      	bne.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8004696:	4b9d      	ldr	r3, [pc, #628]	; (800490c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
 800469a:	f000 bc3f 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800469e:	4b9a      	ldr	r3, [pc, #616]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d11c      	bne.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046b0:	d118      	bne.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80046b2:	4b95      	ldr	r3, [pc, #596]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 80046be:	4b92      	ldr	r3, [pc, #584]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	0e1b      	lsrs	r3, r3, #24
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	e006      	b.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80046ca:	4b8f      	ldr	r3, [pc, #572]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80046cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046d0:	041b      	lsls	r3, r3, #16
 80046d2:	0e1b      	lsrs	r3, r3, #24
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	4a8d      	ldr	r2, [pc, #564]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80046da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046de:	637b      	str	r3, [r7, #52]	; 0x34
 80046e0:	f000 bc1c 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	637b      	str	r3, [r7, #52]	; 0x34
 80046e8:	f000 bc18 	b.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80046ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f0:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80046f4:	430b      	orrs	r3, r1
 80046f6:	d151      	bne.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80046f8:	4b83      	ldr	r3, [pc, #524]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80046fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004702:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004706:	2bc0      	cmp	r3, #192	; 0xc0
 8004708:	d024      	beq.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470c:	2bc0      	cmp	r3, #192	; 0xc0
 800470e:	d842      	bhi.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	2b80      	cmp	r3, #128	; 0x80
 8004714:	d00d      	beq.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	2b80      	cmp	r3, #128	; 0x80
 800471a:	d83c      	bhi.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	2b40      	cmp	r3, #64	; 0x40
 8004726:	d011      	beq.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8004728:	e035      	b.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800472a:	f7fd ff91 	bl	8002650 <HAL_RCC_GetPCLK3Freq>
 800472e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004730:	e3f4      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004732:	4b75      	ldr	r3, [pc, #468]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473e:	d102      	bne.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8004740:	4b72      	ldr	r3, [pc, #456]	; (800490c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8004742:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004744:	e3ea      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800474a:	e3e7      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800474c:	f7fd fe36 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8004750:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004752:	e3e3      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004754:	4b6c      	ldr	r3, [pc, #432]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b20      	cmp	r3, #32
 800475e:	d117      	bne.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004760:	4b69      	ldr	r3, [pc, #420]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800476c:	4b66      	ldr	r3, [pc, #408]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	0e1b      	lsrs	r3, r3, #24
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	e006      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8004778:	4b63      	ldr	r3, [pc, #396]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800477a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800477e:	041b      	lsls	r3, r3, #16
 8004780:	0e1b      	lsrs	r3, r3, #24
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	4a62      	ldr	r2, [pc, #392]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8004788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800478e:	e3c5      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004794:	e3c2      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800479a:	e3bf      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800479c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047a0:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80047a4:	430b      	orrs	r3, r1
 80047a6:	d147      	bne.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80047a8:	4b57      	ldr	r3, [pc, #348]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80047aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047b2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80047ba:	f7fd ff21 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 80047be:	6378      	str	r0, [r7, #52]	; 0x34
 80047c0:	e3ac      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047c8:	d103      	bne.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80047ca:	f7fd fdf7 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 80047ce:	6378      	str	r0, [r7, #52]	; 0x34
 80047d0:	e3a4      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80047d2:	4b4d      	ldr	r3, [pc, #308]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047de:	d106      	bne.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e6:	d102      	bne.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 80047e8:	4b48      	ldr	r3, [pc, #288]	; (800490c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
 80047ec:	e396      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80047ee:	4b46      	ldr	r3, [pc, #280]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d11b      	bne.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004800:	d117      	bne.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004802:	4b41      	ldr	r3, [pc, #260]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800480e:	4b3e      	ldr	r3, [pc, #248]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	0e1b      	lsrs	r3, r3, #24
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	e006      	b.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800481a:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800481c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004820:	041b      	lsls	r3, r3, #16
 8004822:	0e1b      	lsrs	r3, r3, #24
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	4a39      	ldr	r2, [pc, #228]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800482a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482e:	637b      	str	r3, [r7, #52]	; 0x34
 8004830:	e374      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	637b      	str	r3, [r7, #52]	; 0x34
 8004836:	e371      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800483c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004840:	430b      	orrs	r3, r1
 8004842:	d16a      	bne.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004844:	4b30      	ldr	r3, [pc, #192]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800484a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	2b00      	cmp	r3, #0
 8004854:	d120      	bne.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004856:	4b2c      	ldr	r3, [pc, #176]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b20      	cmp	r3, #32
 8004860:	d117      	bne.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004862:	4b29      	ldr	r3, [pc, #164]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800486e:	4b26      	ldr	r3, [pc, #152]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	0e1b      	lsrs	r3, r3, #24
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	e006      	b.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800487a:	4b23      	ldr	r3, [pc, #140]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800487c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004880:	041b      	lsls	r3, r3, #16
 8004882:	0e1b      	lsrs	r3, r3, #24
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	4a21      	ldr	r2, [pc, #132]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800488a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
 8004890:	e344      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	637b      	str	r3, [r7, #52]	; 0x34
 8004896:	e341      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004898:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800489a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800489e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a6:	d112      	bne.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ae:	d10e      	bne.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80048b0:	4b15      	ldr	r3, [pc, #84]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80048b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048be:	d102      	bne.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 80048c0:	23fa      	movs	r3, #250	; 0xfa
 80048c2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80048c4:	e32a      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80048c6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80048ca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80048cc:	e326      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80048ce:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048da:	d106      	bne.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e2:	d102      	bne.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 80048e4:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80048e6:	637b      	str	r3, [r7, #52]	; 0x34
 80048e8:	e318      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80048ea:	4b07      	ldr	r3, [pc, #28]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80048ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d10d      	bne.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048fe:	d109      	bne.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8004900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004904:	637b      	str	r3, [r7, #52]	; 0x34
 8004906:	e309      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8004908:	46020c00 	.word	0x46020c00
 800490c:	00f42400 	.word	0x00f42400
 8004910:	08006790 	.word	0x08006790
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
 8004918:	e300      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800491a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800491e:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004922:	430b      	orrs	r3, r1
 8004924:	d164      	bne.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004926:	4ba2      	ldr	r3, [pc, #648]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800492c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004930:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	2b00      	cmp	r3, #0
 8004936:	d120      	bne.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004938:	4b9d      	ldr	r3, [pc, #628]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b20      	cmp	r3, #32
 8004942:	d117      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004944:	4b9a      	ldr	r3, [pc, #616]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8004950:	4b97      	ldr	r3, [pc, #604]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	0e1b      	lsrs	r3, r3, #24
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	e006      	b.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 800495c:	4b94      	ldr	r3, [pc, #592]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800495e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004962:	041b      	lsls	r3, r3, #16
 8004964:	0e1b      	lsrs	r3, r3, #24
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	4a92      	ldr	r2, [pc, #584]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800496c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004970:	637b      	str	r3, [r7, #52]	; 0x34
 8004972:	e2d3      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
 8004978:	e2d0      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800497a:	4b8d      	ldr	r3, [pc, #564]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800497c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004988:	d112      	bne.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004990:	d10e      	bne.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004992:	4b87      	ldr	r3, [pc, #540]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049a0:	d102      	bne.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80049a2:	23fa      	movs	r3, #250	; 0xfa
 80049a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80049a6:	e2b9      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80049a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80049ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80049ae:	e2b5      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80049b0:	4b7f      	ldr	r3, [pc, #508]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049bc:	d106      	bne.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c4:	d102      	bne.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 80049c6:	4b7c      	ldr	r3, [pc, #496]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80049c8:	637b      	str	r3, [r7, #52]	; 0x34
 80049ca:	e2a7      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80049cc:	4b78      	ldr	r3, [pc, #480]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80049ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d107      	bne.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049e0:	d103      	bne.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 80049e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
 80049e8:	e298      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
 80049ee:	e295      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80049f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80049f8:	430b      	orrs	r3, r1
 80049fa:	d147      	bne.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80049fc:	4b6c      	ldr	r3, [pc, #432]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80049fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a02:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004a06:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004a0e:	f7fd fdf7 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8004a12:	6378      	str	r0, [r7, #52]	; 0x34
 8004a14:	e282      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004a16:	4b66      	ldr	r3, [pc, #408]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a24:	d112      	bne.n	8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a2c:	d10e      	bne.n	8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004a2e:	4b60      	ldr	r3, [pc, #384]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a3c:	d102      	bne.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8004a3e:	23fa      	movs	r3, #250	; 0xfa
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004a42:	e26b      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8004a44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004a48:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004a4a:	e267      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004a4c:	4b58      	ldr	r3, [pc, #352]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a58:	d106      	bne.n	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a60:	d102      	bne.n	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8004a62:	4b55      	ldr	r3, [pc, #340]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
 8004a66:	e259      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004a68:	4b51      	ldr	r3, [pc, #324]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d107      	bne.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a7c:	d103      	bne.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8004a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34
 8004a84:	e24a      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8a:	e247      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8004a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a90:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8004a94:	430b      	orrs	r3, r1
 8004a96:	d12d      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004a98:	4b45      	ldr	r3, [pc, #276]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a9e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004aa2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004aa4:	4b42      	ldr	r3, [pc, #264]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ab0:	d105      	bne.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8004ab8:	4b3f      	ldr	r3, [pc, #252]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8004aba:	637b      	str	r3, [r7, #52]	; 0x34
 8004abc:	e22e      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fc1a 	bl	8003304 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad4:	e222      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004adc:	d107      	bne.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ade:	f107 0318 	add.w	r3, r7, #24
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe fd76 	bl	80035d4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	637b      	str	r3, [r7, #52]	; 0x34
 8004aec:	e216      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
 8004af2:	e213      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8004af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8004afc:	430b      	orrs	r3, r1
 8004afe:	d15d      	bne.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004b00:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b06:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b12:	d028      	beq.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b1a:	d845      	bhi.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b22:	d013      	beq.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b2a:	d83d      	bhi.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d004      	beq.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b38:	d004      	beq.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8004b3a:	e035      	b.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8004b3c:	f7fd fd74 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8004b40:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004b42:	e1eb      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004b44:	f7fd fc3a 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8004b48:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004b4a:	e1e7      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b4c:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b58:	d102      	bne.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8004b5a:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8004b5c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b5e:	e1dd      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b64:	e1da      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004b66:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d117      	bne.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b72:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8004b7e:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	0e1b      	lsrs	r3, r3, #24
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	e006      	b.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b90:	041b      	lsls	r3, r3, #16
 8004b92:	0e1b      	lsrs	r3, r3, #24
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	4a06      	ldr	r2, [pc, #24]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8004b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b9e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ba0:	e1bc      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ba6:	e1b9      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bac:	e1b6      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8004bae:	bf00      	nop
 8004bb0:	46020c00 	.word	0x46020c00
 8004bb4:	08006790 	.word	0x08006790
 8004bb8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8004bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bc0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	d156      	bne.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004bc8:	4ba5      	ldr	r3, [pc, #660]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bd2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bda:	d028      	beq.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004be2:	d845      	bhi.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bea:	d013      	beq.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bf2:	d83d      	bhi.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c00:	d004      	beq.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8004c02:	e035      	b.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8004c04:	f7fd fcfc 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8004c08:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004c0a:	e187      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004c0c:	f7fd fbd6 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8004c10:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004c12:	e183      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c14:	4b92      	ldr	r3, [pc, #584]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c20:	d102      	bne.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8004c22:	4b90      	ldr	r3, [pc, #576]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c26:	e179      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c2c:	e176      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c2e:	4b8c      	ldr	r3, [pc, #560]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d117      	bne.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c3a:	4b89      	ldr	r3, [pc, #548]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8004c46:	4b86      	ldr	r3, [pc, #536]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	0e1b      	lsrs	r3, r3, #24
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	e006      	b.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8004c52:	4b83      	ldr	r3, [pc, #524]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c58:	041b      	lsls	r3, r3, #16
 8004c5a:	0e1b      	lsrs	r3, r3, #24
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	4a81      	ldr	r2, [pc, #516]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8004c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c66:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c68:	e158      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c6e:	e155      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c74:	e152      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8004c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c7a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	d177      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004c82:	4b77      	ldr	r3, [pc, #476]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004c84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c88:	f003 0318 	and.w	r3, r3, #24
 8004c8c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	2b18      	cmp	r3, #24
 8004c92:	d86b      	bhi.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8004c94:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004d01 	.word	0x08004d01
 8004ca0:	08004d6d 	.word	0x08004d6d
 8004ca4:	08004d6d 	.word	0x08004d6d
 8004ca8:	08004d6d 	.word	0x08004d6d
 8004cac:	08004d6d 	.word	0x08004d6d
 8004cb0:	08004d6d 	.word	0x08004d6d
 8004cb4:	08004d6d 	.word	0x08004d6d
 8004cb8:	08004d6d 	.word	0x08004d6d
 8004cbc:	08004d09 	.word	0x08004d09
 8004cc0:	08004d6d 	.word	0x08004d6d
 8004cc4:	08004d6d 	.word	0x08004d6d
 8004cc8:	08004d6d 	.word	0x08004d6d
 8004ccc:	08004d6d 	.word	0x08004d6d
 8004cd0:	08004d6d 	.word	0x08004d6d
 8004cd4:	08004d6d 	.word	0x08004d6d
 8004cd8:	08004d6d 	.word	0x08004d6d
 8004cdc:	08004d11 	.word	0x08004d11
 8004ce0:	08004d6d 	.word	0x08004d6d
 8004ce4:	08004d6d 	.word	0x08004d6d
 8004ce8:	08004d6d 	.word	0x08004d6d
 8004cec:	08004d6d 	.word	0x08004d6d
 8004cf0:	08004d6d 	.word	0x08004d6d
 8004cf4:	08004d6d 	.word	0x08004d6d
 8004cf8:	08004d6d 	.word	0x08004d6d
 8004cfc:	08004d2b 	.word	0x08004d2b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8004d00:	f7fd fca6 	bl	8002650 <HAL_RCC_GetPCLK3Freq>
 8004d04:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004d06:	e109      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004d08:	f7fd fb58 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8004d0c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004d0e:	e105      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d10:	4b53      	ldr	r3, [pc, #332]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1c:	d102      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8004d1e:	4b51      	ldr	r3, [pc, #324]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004d22:	e0fb      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d28:	e0f8      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d2a:	4b4d      	ldr	r3, [pc, #308]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d117      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d36:	4b4a      	ldr	r3, [pc, #296]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8004d42:	4b47      	ldr	r3, [pc, #284]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	0e1b      	lsrs	r3, r3, #24
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	e006      	b.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8004d4e:	4b44      	ldr	r3, [pc, #272]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d54:	041b      	lsls	r3, r3, #16
 8004d56:	0e1b      	lsrs	r3, r3, #24
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	4a42      	ldr	r2, [pc, #264]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8004d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d62:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004d64:	e0da      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d6a:	e0d7      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d70:	e0d4      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8004d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d76:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	d155      	bne.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004d7e:	4b38      	ldr	r3, [pc, #224]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004d80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004d88:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d90:	d013      	beq.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d98:	d844      	bhi.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004da0:	d013      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004da8:	d83c      	bhi.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d014      	beq.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db6:	d014      	beq.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8004db8:	e034      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dba:	f107 0318 	add.w	r3, r7, #24
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe fc08 	bl	80035d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dc8:	e0a8      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fa98 	bl	8003304 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dd8:	e0a0      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004dda:	f7fd faef 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8004dde:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004de0:	e09c      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004de2:	4b1f      	ldr	r3, [pc, #124]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d117      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004dee:	4b1c      	ldr	r3, [pc, #112]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8004dfa:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	0e1b      	lsrs	r3, r3, #24
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	e006      	b.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8004e06:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004e08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e0c:	041b      	lsls	r3, r3, #16
 8004e0e:	0e1b      	lsrs	r3, r3, #24
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	4a14      	ldr	r2, [pc, #80]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8004e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e1c:	e07e      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e22:	e07b      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e28:	e078      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8004e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e2e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8004e32:	430b      	orrs	r3, r1
 8004e34:	d138      	bne.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8004e36:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e40:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8004e42:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8004e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d10d      	bne.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10a      	bne.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8004e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5c:	e05e      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8004e5e:	bf00      	nop
 8004e60:	46020c00 	.word	0x46020c00
 8004e64:	00f42400 	.word	0x00f42400
 8004e68:	08006790 	.word	0x08006790
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8004e6c:	4b2e      	ldr	r3, [pc, #184]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8004e6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e7a:	d112      	bne.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e82:	d10e      	bne.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004e84:	4b28      	ldr	r3, [pc, #160]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8004e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e92:	d102      	bne.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8004e94:	23fa      	movs	r3, #250	; 0xfa
 8004e96:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004e98:	e040      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8004e9a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004e9e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004ea0:	e03c      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea6:	e039      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8004ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eac:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	d131      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004eb4:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8004eb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004eba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004ec0:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ecc:	d105      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8004ed4:	4b15      	ldr	r3, [pc, #84]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8004ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed8:	e020      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8004eda:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee6:	d106      	bne.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eee:	d102      	bne.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8004ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef4:	e012      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8004ef6:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f02:	d106      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0a:	d102      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8004f0c:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8004f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f10:	e004      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	637b      	str	r3, [r7, #52]	; 0x34
 8004f16:	e001      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3738      	adds	r7, #56	; 0x38
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	46020c00 	.word	0x46020c00
 8004f2c:	02dc6c00 	.word	0x02dc6c00
 8004f30:	016e3600 	.word	0x016e3600
 8004f34:	00f42400 	.word	0x00f42400

08004f38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004f40:	4b47      	ldr	r3, [pc, #284]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a46      	ldr	r2, [pc, #280]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8004f46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f4c:	f7fb fe14 	bl	8000b78 <HAL_GetTick>
 8004f50:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f52:	e008      	b.n	8004f66 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f54:	f7fb fe10 	bl	8000b78 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e077      	b.n	8005056 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f66:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004f72:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f7a:	f023 0303 	bic.w	r3, r3, #3
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6811      	ldr	r1, [r2, #0]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6852      	ldr	r2, [r2, #4]
 8004f86:	3a01      	subs	r2, #1
 8004f88:	0212      	lsls	r2, r2, #8
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	4934      	ldr	r1, [pc, #208]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004f92:	4b33      	ldr	r3, [pc, #204]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8004f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f96:	4b33      	ldr	r3, [pc, #204]	; (8005064 <RCCEx_PLL2_Config+0x12c>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6892      	ldr	r2, [r2, #8]
 8004f9e:	3a01      	subs	r2, #1
 8004fa0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	68d2      	ldr	r2, [r2, #12]
 8004fa8:	3a01      	subs	r2, #1
 8004faa:	0252      	lsls	r2, r2, #9
 8004fac:	b292      	uxth	r2, r2
 8004fae:	4311      	orrs	r1, r2
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6912      	ldr	r2, [r2, #16]
 8004fb4:	3a01      	subs	r2, #1
 8004fb6:	0412      	lsls	r2, r2, #16
 8004fb8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004fbc:	4311      	orrs	r1, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6952      	ldr	r2, [r2, #20]
 8004fc2:	3a01      	subs	r2, #1
 8004fc4:	0612      	lsls	r2, r2, #24
 8004fc6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	4924      	ldr	r1, [pc, #144]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004fd2:	4b23      	ldr	r3, [pc, #140]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	f023 020c 	bic.w	r2, r3, #12
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	4920      	ldr	r1, [pc, #128]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004fe4:	4b1e      	ldr	r3, [pc, #120]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8004fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	491c      	ldr	r1, [pc, #112]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	4a1a      	ldr	r2, [pc, #104]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8004ff8:	f023 0310 	bic.w	r3, r3, #16
 8004ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ffe:	4b18      	ldr	r3, [pc, #96]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005006:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	69d2      	ldr	r2, [r2, #28]
 800500e:	00d2      	lsls	r2, r2, #3
 8005010:	4913      	ldr	r1, [pc, #76]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8005012:	4313      	orrs	r3, r2
 8005014:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	4a11      	ldr	r2, [pc, #68]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 800501c:	f043 0310 	orr.w	r3, r3, #16
 8005020:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005022:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 8005028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800502c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800502e:	f7fb fda3 	bl	8000b78 <HAL_GetTick>
 8005032:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005034:	e008      	b.n	8005048 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005036:	f7fb fd9f 	bl	8000b78 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e006      	b.n	8005056 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <RCCEx_PLL2_Config+0x128>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005054:	2300      	movs	r3, #0

}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	46020c00 	.word	0x46020c00
 8005064:	80800000 	.word	0x80800000

08005068 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005070:	4b47      	ldr	r3, [pc, #284]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a46      	ldr	r2, [pc, #280]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 8005076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800507a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800507c:	f7fb fd7c 	bl	8000b78 <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005082:	e008      	b.n	8005096 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005084:	f7fb fd78 	bl	8000b78 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e077      	b.n	8005186 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005096:	4b3e      	ldr	r3, [pc, #248]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80050a2:	4b3b      	ldr	r3, [pc, #236]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6811      	ldr	r1, [r2, #0]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6852      	ldr	r2, [r2, #4]
 80050b6:	3a01      	subs	r2, #1
 80050b8:	0212      	lsls	r2, r2, #8
 80050ba:	430a      	orrs	r2, r1
 80050bc:	4934      	ldr	r1, [pc, #208]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	630b      	str	r3, [r1, #48]	; 0x30
 80050c2:	4b33      	ldr	r3, [pc, #204]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 80050c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050c6:	4b33      	ldr	r3, [pc, #204]	; (8005194 <RCCEx_PLL3_Config+0x12c>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6892      	ldr	r2, [r2, #8]
 80050ce:	3a01      	subs	r2, #1
 80050d0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	68d2      	ldr	r2, [r2, #12]
 80050d8:	3a01      	subs	r2, #1
 80050da:	0252      	lsls	r2, r2, #9
 80050dc:	b292      	uxth	r2, r2
 80050de:	4311      	orrs	r1, r2
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6912      	ldr	r2, [r2, #16]
 80050e4:	3a01      	subs	r2, #1
 80050e6:	0412      	lsls	r2, r2, #16
 80050e8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80050ec:	4311      	orrs	r1, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6952      	ldr	r2, [r2, #20]
 80050f2:	3a01      	subs	r2, #1
 80050f4:	0612      	lsls	r2, r2, #24
 80050f6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80050fa:	430a      	orrs	r2, r1
 80050fc:	4924      	ldr	r1, [pc, #144]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005102:	4b23      	ldr	r3, [pc, #140]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	f023 020c 	bic.w	r2, r3, #12
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	4920      	ldr	r1, [pc, #128]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 8005110:	4313      	orrs	r3, r2
 8005112:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005114:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 8005116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	491c      	ldr	r1, [pc, #112]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 800511e:	4313      	orrs	r3, r2
 8005120:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005122:	4b1b      	ldr	r3, [pc, #108]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	4a1a      	ldr	r2, [pc, #104]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 8005128:	f023 0310 	bic.w	r3, r3, #16
 800512c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800512e:	4b18      	ldr	r3, [pc, #96]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 8005130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005136:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	69d2      	ldr	r2, [r2, #28]
 800513e:	00d2      	lsls	r2, r2, #3
 8005140:	4913      	ldr	r1, [pc, #76]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 8005142:	4313      	orrs	r3, r2
 8005144:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	4a11      	ldr	r2, [pc, #68]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 800514c:	f043 0310 	orr.w	r3, r3, #16
 8005150:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005152:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a0e      	ldr	r2, [pc, #56]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 8005158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800515e:	f7fb fd0b 	bl	8000b78 <HAL_GetTick>
 8005162:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005164:	e008      	b.n	8005178 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005166:	f7fb fd07 	bl	8000b78 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e006      	b.n	8005186 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <RCCEx_PLL3_Config+0x128>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	46020c00 	.word	0x46020c00
 8005194:	80800000 	.word	0x80800000

08005198 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e042      	b.n	8005230 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d106      	bne.n	80051c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7fb fae7 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2224      	movs	r2, #36	; 0x24
 80051c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f8ca 	bl	8005374 <UART_SetConfig>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e022      	b.n	8005230 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fa60 	bl	80056b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005216:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fae7 	bl	80057fc <UART_CheckIdleState>
 800522e:	4603      	mov	r3, r0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	2b20      	cmp	r3, #32
 8005250:	f040 808b 	bne.w	800536a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_UART_Transmit+0x28>
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e083      	b.n	800536c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526e:	2b80      	cmp	r3, #128	; 0x80
 8005270:	d107      	bne.n	8005282 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005280:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2221      	movs	r2, #33	; 0x21
 800528e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005292:	f7fb fc71 	bl	8000b78 <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b0:	d108      	bne.n	80052c4 <HAL_UART_Transmit+0x8c>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d104      	bne.n	80052c4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	e003      	b.n	80052cc <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052cc:	e030      	b.n	8005330 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2200      	movs	r2, #0
 80052d6:	2180      	movs	r1, #128	; 0x80
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 fb39 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e03d      	b.n	800536c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10b      	bne.n	800530e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005304:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	3302      	adds	r3, #2
 800530a:	61bb      	str	r3, [r7, #24]
 800530c:	e007      	b.n	800531e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	781a      	ldrb	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	3301      	adds	r3, #1
 800531c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1c8      	bne.n	80052ce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2200      	movs	r2, #0
 8005344:	2140      	movs	r1, #64	; 0x40
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fb02 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e006      	b.n	800536c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	e000      	b.n	800536c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800536a:	2302      	movs	r3, #2
  }
}
 800536c:	4618      	mov	r0, r3
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005378:	b094      	sub	sp, #80	; 0x50
 800537a:	af00      	add	r7, sp, #0
 800537c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4b7e      	ldr	r3, [pc, #504]	; (8005584 <UART_SetConfig+0x210>)
 800538a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	431a      	orrs	r2, r3
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	431a      	orrs	r2, r3
 800539c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4977      	ldr	r1, [pc, #476]	; (8005588 <UART_SetConfig+0x214>)
 80053ac:	4019      	ands	r1, r3
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	430b      	orrs	r3, r1
 80053b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c4:	68d9      	ldr	r1, [r3, #12]
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	ea40 0301 	orr.w	r3, r0, r1
 80053ce:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b6a      	ldr	r3, [pc, #424]	; (8005584 <UART_SetConfig+0x210>)
 80053dc:	429a      	cmp	r2, r3
 80053de:	d009      	beq.n	80053f4 <UART_SetConfig+0x80>
 80053e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b69      	ldr	r3, [pc, #420]	; (800558c <UART_SetConfig+0x218>)
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d004      	beq.n	80053f4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ec:	6a1a      	ldr	r2, [r3, #32]
 80053ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f0:	4313      	orrs	r3, r2
 80053f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80053fe:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005408:	430b      	orrs	r3, r1
 800540a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	f023 000f 	bic.w	r0, r3, #15
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	ea40 0301 	orr.w	r3, r0, r1
 8005422:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	4b59      	ldr	r3, [pc, #356]	; (8005590 <UART_SetConfig+0x21c>)
 800542a:	429a      	cmp	r2, r3
 800542c:	d102      	bne.n	8005434 <UART_SetConfig+0xc0>
 800542e:	2301      	movs	r3, #1
 8005430:	64bb      	str	r3, [r7, #72]	; 0x48
 8005432:	e029      	b.n	8005488 <UART_SetConfig+0x114>
 8005434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	4b56      	ldr	r3, [pc, #344]	; (8005594 <UART_SetConfig+0x220>)
 800543a:	429a      	cmp	r2, r3
 800543c:	d102      	bne.n	8005444 <UART_SetConfig+0xd0>
 800543e:	2302      	movs	r3, #2
 8005440:	64bb      	str	r3, [r7, #72]	; 0x48
 8005442:	e021      	b.n	8005488 <UART_SetConfig+0x114>
 8005444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	4b53      	ldr	r3, [pc, #332]	; (8005598 <UART_SetConfig+0x224>)
 800544a:	429a      	cmp	r2, r3
 800544c:	d102      	bne.n	8005454 <UART_SetConfig+0xe0>
 800544e:	2304      	movs	r3, #4
 8005450:	64bb      	str	r3, [r7, #72]	; 0x48
 8005452:	e019      	b.n	8005488 <UART_SetConfig+0x114>
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	4b50      	ldr	r3, [pc, #320]	; (800559c <UART_SetConfig+0x228>)
 800545a:	429a      	cmp	r2, r3
 800545c:	d102      	bne.n	8005464 <UART_SetConfig+0xf0>
 800545e:	2308      	movs	r3, #8
 8005460:	64bb      	str	r3, [r7, #72]	; 0x48
 8005462:	e011      	b.n	8005488 <UART_SetConfig+0x114>
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4b4d      	ldr	r3, [pc, #308]	; (80055a0 <UART_SetConfig+0x22c>)
 800546a:	429a      	cmp	r2, r3
 800546c:	d102      	bne.n	8005474 <UART_SetConfig+0x100>
 800546e:	2310      	movs	r3, #16
 8005470:	64bb      	str	r3, [r7, #72]	; 0x48
 8005472:	e009      	b.n	8005488 <UART_SetConfig+0x114>
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	4b42      	ldr	r3, [pc, #264]	; (8005584 <UART_SetConfig+0x210>)
 800547a:	429a      	cmp	r2, r3
 800547c:	d102      	bne.n	8005484 <UART_SetConfig+0x110>
 800547e:	2320      	movs	r3, #32
 8005480:	64bb      	str	r3, [r7, #72]	; 0x48
 8005482:	e001      	b.n	8005488 <UART_SetConfig+0x114>
 8005484:	2300      	movs	r3, #0
 8005486:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4b3d      	ldr	r3, [pc, #244]	; (8005584 <UART_SetConfig+0x210>)
 800548e:	429a      	cmp	r2, r3
 8005490:	d005      	beq.n	800549e <UART_SetConfig+0x12a>
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b3d      	ldr	r3, [pc, #244]	; (800558c <UART_SetConfig+0x218>)
 8005498:	429a      	cmp	r2, r3
 800549a:	f040 8085 	bne.w	80055a8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800549e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a0:	2200      	movs	r2, #0
 80054a2:	623b      	str	r3, [r7, #32]
 80054a4:	627a      	str	r2, [r7, #36]	; 0x24
 80054a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80054aa:	f7fe fb63 	bl	8003b74 <HAL_RCCEx_GetPeriphCLKFreq>
 80054ae:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80054b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 80e8 	beq.w	8005688 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	4a39      	ldr	r2, [pc, #228]	; (80055a4 <UART_SetConfig+0x230>)
 80054be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054c2:	461a      	mov	r2, r3
 80054c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	4413      	add	r3, r2
 80054d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d8:	429a      	cmp	r2, r3
 80054da:	d305      	bcc.n	80054e8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d903      	bls.n	80054f0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80054ee:	e048      	b.n	8005582 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f2:	2200      	movs	r2, #0
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	61fa      	str	r2, [r7, #28]
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	4a29      	ldr	r2, [pc, #164]	; (80055a4 <UART_SetConfig+0x230>)
 80054fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005502:	b29b      	uxth	r3, r3
 8005504:	2200      	movs	r2, #0
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	617a      	str	r2, [r7, #20]
 800550a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800550e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005512:	f7fa feb1 	bl	8000278 <__aeabi_uldivmod>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4610      	mov	r0, r2
 800551c:	4619      	mov	r1, r3
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	020b      	lsls	r3, r1, #8
 8005528:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800552c:	0202      	lsls	r2, r0, #8
 800552e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005530:	6849      	ldr	r1, [r1, #4]
 8005532:	0849      	lsrs	r1, r1, #1
 8005534:	2000      	movs	r0, #0
 8005536:	460c      	mov	r4, r1
 8005538:	4605      	mov	r5, r0
 800553a:	eb12 0804 	adds.w	r8, r2, r4
 800553e:	eb43 0905 	adc.w	r9, r3, r5
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	60fa      	str	r2, [r7, #12]
 800554c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005550:	4640      	mov	r0, r8
 8005552:	4649      	mov	r1, r9
 8005554:	f7fa fe90 	bl	8000278 <__aeabi_uldivmod>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4613      	mov	r3, r2
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005566:	d308      	bcc.n	800557a <UART_SetConfig+0x206>
 8005568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800556e:	d204      	bcs.n	800557a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005576:	60da      	str	r2, [r3, #12]
 8005578:	e003      	b.n	8005582 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8005580:	e082      	b.n	8005688 <UART_SetConfig+0x314>
 8005582:	e081      	b.n	8005688 <UART_SetConfig+0x314>
 8005584:	46002400 	.word	0x46002400
 8005588:	cfff69f3 	.word	0xcfff69f3
 800558c:	56002400 	.word	0x56002400
 8005590:	40013800 	.word	0x40013800
 8005594:	40004400 	.word	0x40004400
 8005598:	40004800 	.word	0x40004800
 800559c:	40004c00 	.word	0x40004c00
 80055a0:	40005000 	.word	0x40005000
 80055a4:	08006850 	.word	0x08006850
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b0:	d13c      	bne.n	800562c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80055b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b4:	2200      	movs	r2, #0
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055be:	f7fe fad9 	bl	8003b74 <HAL_RCCEx_GetPeriphCLKFreq>
 80055c2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d05e      	beq.n	8005688 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	4a39      	ldr	r2, [pc, #228]	; (80056b4 <UART_SetConfig+0x340>)
 80055d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055d4:	461a      	mov	r2, r3
 80055d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80055dc:	005a      	lsls	r2, r3, #1
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	085b      	lsrs	r3, r3, #1
 80055e4:	441a      	add	r2, r3
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f2:	2b0f      	cmp	r3, #15
 80055f4:	d916      	bls.n	8005624 <UART_SetConfig+0x2b0>
 80055f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fc:	d212      	bcs.n	8005624 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005600:	b29b      	uxth	r3, r3
 8005602:	f023 030f 	bic.w	r3, r3, #15
 8005606:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	b29b      	uxth	r3, r3
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	b29a      	uxth	r2, r3
 8005614:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005616:	4313      	orrs	r3, r2
 8005618:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8005620:	60da      	str	r2, [r3, #12]
 8005622:	e031      	b.n	8005688 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800562a:	e02d      	b.n	8005688 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800562c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800562e:	2200      	movs	r2, #0
 8005630:	469a      	mov	sl, r3
 8005632:	4693      	mov	fp, r2
 8005634:	4650      	mov	r0, sl
 8005636:	4659      	mov	r1, fp
 8005638:	f7fe fa9c 	bl	8003b74 <HAL_RCCEx_GetPeriphCLKFreq>
 800563c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800563e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005640:	2b00      	cmp	r3, #0
 8005642:	d021      	beq.n	8005688 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	4a1a      	ldr	r2, [pc, #104]	; (80056b4 <UART_SetConfig+0x340>)
 800564a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800564e:	461a      	mov	r2, r3
 8005650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005652:	fbb3 f2f2 	udiv	r2, r3, r2
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	441a      	add	r2, r3
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	fbb2 f3f3 	udiv	r3, r2, r3
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800566a:	2b0f      	cmp	r3, #15
 800566c:	d909      	bls.n	8005682 <UART_SetConfig+0x30e>
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005674:	d205      	bcs.n	8005682 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005678:	b29a      	uxth	r2, r3
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60da      	str	r2, [r3, #12]
 8005680:	e002      	b.n	8005688 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568a:	2201      	movs	r2, #1
 800568c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005692:	2201      	movs	r2, #1
 8005694:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569a:	2200      	movs	r2, #0
 800569c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	2200      	movs	r2, #0
 80056a2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80056a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3750      	adds	r7, #80	; 0x50
 80056ac:	46bd      	mov	sp, r7
 80056ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056b2:	bf00      	nop
 80056b4:	08006850 	.word	0x08006850

080056b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01a      	beq.n	80057ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b6:	d10a      	bne.n	80057ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	605a      	str	r2, [r3, #4]
  }
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b098      	sub	sp, #96	; 0x60
 8005800:	af02      	add	r7, sp, #8
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800580c:	f7fb f9b4 	bl	8000b78 <HAL_GetTick>
 8005810:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b08      	cmp	r3, #8
 800581e:	d12f      	bne.n	8005880 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005828:	2200      	movs	r2, #0
 800582a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f88e 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d022      	beq.n	8005880 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800584e:	653b      	str	r3, [r7, #80]	; 0x50
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005858:	647b      	str	r3, [r7, #68]	; 0x44
 800585a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800585e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e6      	bne.n	800583a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e063      	b.n	8005948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b04      	cmp	r3, #4
 800588c:	d149      	bne.n	8005922 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800588e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005896:	2200      	movs	r2, #0
 8005898:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f857 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d03c      	beq.n	8005922 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	623b      	str	r3, [r7, #32]
   return(result);
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30
 80058c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e6      	bne.n	80058a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3308      	adds	r3, #8
 80058e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3308      	adds	r3, #8
 80058f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058fa:	61fa      	str	r2, [r7, #28]
 80058fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	69b9      	ldr	r1, [r7, #24]
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	617b      	str	r3, [r7, #20]
   return(result);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e5      	bne.n	80058da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e012      	b.n	8005948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3758      	adds	r7, #88	; 0x58
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	4613      	mov	r3, r2
 800595e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005960:	e049      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d045      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596a:	f7fb f905 	bl	8000b78 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	429a      	cmp	r2, r3
 8005978:	d302      	bcc.n	8005980 <UART_WaitOnFlagUntilTimeout+0x30>
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e048      	b.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d031      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b08      	cmp	r3, #8
 800599e:	d110      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2208      	movs	r2, #8
 80059a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f838 	bl	8005a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2208      	movs	r2, #8
 80059b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e029      	b.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d0:	d111      	bne.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f81e 	bl	8005a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e00f      	b.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4013      	ands	r3, r2
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	bf0c      	ite	eq
 8005a06:	2301      	moveq	r3, #1
 8005a08:	2300      	movne	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d0a6      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b095      	sub	sp, #84	; 0x54
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a44:	643b      	str	r3, [r7, #64]	; 0x40
 8005a46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e6      	bne.n	8005a26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a6e:	f023 0301 	bic.w	r3, r3, #1
 8005a72:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3308      	adds	r3, #8
 8005a7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e3      	bne.n	8005a58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d118      	bne.n	8005aca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f023 0310 	bic.w	r3, r3, #16
 8005aac:	647b      	str	r3, [r7, #68]	; 0x44
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab6:	61bb      	str	r3, [r7, #24]
 8005ab8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	6979      	ldr	r1, [r7, #20]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e6      	bne.n	8005a98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005ade:	bf00      	nop
 8005ae0:	3754      	adds	r7, #84	; 0x54
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_UARTEx_DisableFifoMode+0x16>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e027      	b.n	8005b50 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2224      	movs	r2, #36	; 0x24
 8005b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0201 	bic.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e02d      	b.n	8005bd0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2224      	movs	r2, #36	; 0x24
 8005b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0201 	bic.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f84f 	bl	8005c54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e02d      	b.n	8005c4c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2224      	movs	r2, #36	; 0x24
 8005bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0201 	bic.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f811 	bl	8005c54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d108      	bne.n	8005c76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c74:	e031      	b.n	8005cda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c76:	2308      	movs	r3, #8
 8005c78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	0e5b      	lsrs	r3, r3, #25
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	0f5b      	lsrs	r3, r3, #29
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ca0:	7b3a      	ldrb	r2, [r7, #12]
 8005ca2:	4911      	ldr	r1, [pc, #68]	; (8005ce8 <UARTEx_SetNbDataToProcess+0x94>)
 8005ca4:	5c8a      	ldrb	r2, [r1, r2]
 8005ca6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005caa:	7b3a      	ldrb	r2, [r7, #12]
 8005cac:	490f      	ldr	r1, [pc, #60]	; (8005cec <UARTEx_SetNbDataToProcess+0x98>)
 8005cae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	7b7a      	ldrb	r2, [r7, #13]
 8005cc0:	4909      	ldr	r1, [pc, #36]	; (8005ce8 <UARTEx_SetNbDataToProcess+0x94>)
 8005cc2:	5c8a      	ldrb	r2, [r1, r2]
 8005cc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cc8:	7b7a      	ldrb	r2, [r7, #13]
 8005cca:	4908      	ldr	r1, [pc, #32]	; (8005cec <UARTEx_SetNbDataToProcess+0x98>)
 8005ccc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cce:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005cda:	bf00      	nop
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	08006868 	.word	0x08006868
 8005cec:	08006870 	.word	0x08006870

08005cf0 <__errno>:
 8005cf0:	4b01      	ldr	r3, [pc, #4]	; (8005cf8 <__errno+0x8>)
 8005cf2:	6818      	ldr	r0, [r3, #0]
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	2000000c 	.word	0x2000000c

08005cfc <__libc_init_array>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	4d0d      	ldr	r5, [pc, #52]	; (8005d34 <__libc_init_array+0x38>)
 8005d00:	2600      	movs	r6, #0
 8005d02:	4c0d      	ldr	r4, [pc, #52]	; (8005d38 <__libc_init_array+0x3c>)
 8005d04:	1b64      	subs	r4, r4, r5
 8005d06:	10a4      	asrs	r4, r4, #2
 8005d08:	42a6      	cmp	r6, r4
 8005d0a:	d109      	bne.n	8005d20 <__libc_init_array+0x24>
 8005d0c:	4d0b      	ldr	r5, [pc, #44]	; (8005d3c <__libc_init_array+0x40>)
 8005d0e:	2600      	movs	r6, #0
 8005d10:	4c0b      	ldr	r4, [pc, #44]	; (8005d40 <__libc_init_array+0x44>)
 8005d12:	f000 fd1b 	bl	800674c <_init>
 8005d16:	1b64      	subs	r4, r4, r5
 8005d18:	10a4      	asrs	r4, r4, #2
 8005d1a:	42a6      	cmp	r6, r4
 8005d1c:	d105      	bne.n	8005d2a <__libc_init_array+0x2e>
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
 8005d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d24:	3601      	adds	r6, #1
 8005d26:	4798      	blx	r3
 8005d28:	e7ee      	b.n	8005d08 <__libc_init_array+0xc>
 8005d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2e:	3601      	adds	r6, #1
 8005d30:	4798      	blx	r3
 8005d32:	e7f2      	b.n	8005d1a <__libc_init_array+0x1e>
 8005d34:	080068e4 	.word	0x080068e4
 8005d38:	080068e4 	.word	0x080068e4
 8005d3c:	080068e4 	.word	0x080068e4
 8005d40:	080068e8 	.word	0x080068e8

08005d44 <memset>:
 8005d44:	4402      	add	r2, r0
 8005d46:	4603      	mov	r3, r0
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d100      	bne.n	8005d4e <memset+0xa>
 8005d4c:	4770      	bx	lr
 8005d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d52:	e7f9      	b.n	8005d48 <memset+0x4>

08005d54 <_puts_r>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	460e      	mov	r6, r1
 8005d58:	4605      	mov	r5, r0
 8005d5a:	b118      	cbz	r0, 8005d64 <_puts_r+0x10>
 8005d5c:	6983      	ldr	r3, [r0, #24]
 8005d5e:	b90b      	cbnz	r3, 8005d64 <_puts_r+0x10>
 8005d60:	f000 fa46 	bl	80061f0 <__sinit>
 8005d64:	69ab      	ldr	r3, [r5, #24]
 8005d66:	68ac      	ldr	r4, [r5, #8]
 8005d68:	b913      	cbnz	r3, 8005d70 <_puts_r+0x1c>
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f000 fa40 	bl	80061f0 <__sinit>
 8005d70:	4b2c      	ldr	r3, [pc, #176]	; (8005e24 <_puts_r+0xd0>)
 8005d72:	429c      	cmp	r4, r3
 8005d74:	d120      	bne.n	8005db8 <_puts_r+0x64>
 8005d76:	686c      	ldr	r4, [r5, #4]
 8005d78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d7a:	07db      	lsls	r3, r3, #31
 8005d7c:	d405      	bmi.n	8005d8a <_puts_r+0x36>
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	0598      	lsls	r0, r3, #22
 8005d82:	d402      	bmi.n	8005d8a <_puts_r+0x36>
 8005d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d86:	f000 fad1 	bl	800632c <__retarget_lock_acquire_recursive>
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	0719      	lsls	r1, r3, #28
 8005d8e:	d51d      	bpl.n	8005dcc <_puts_r+0x78>
 8005d90:	6923      	ldr	r3, [r4, #16]
 8005d92:	b1db      	cbz	r3, 8005dcc <_puts_r+0x78>
 8005d94:	3e01      	subs	r6, #1
 8005d96:	68a3      	ldr	r3, [r4, #8]
 8005d98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	60a3      	str	r3, [r4, #8]
 8005da0:	bb39      	cbnz	r1, 8005df2 <_puts_r+0x9e>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	da38      	bge.n	8005e18 <_puts_r+0xc4>
 8005da6:	4622      	mov	r2, r4
 8005da8:	210a      	movs	r1, #10
 8005daa:	4628      	mov	r0, r5
 8005dac:	f000 f848 	bl	8005e40 <__swbuf_r>
 8005db0:	3001      	adds	r0, #1
 8005db2:	d011      	beq.n	8005dd8 <_puts_r+0x84>
 8005db4:	250a      	movs	r5, #10
 8005db6:	e011      	b.n	8005ddc <_puts_r+0x88>
 8005db8:	4b1b      	ldr	r3, [pc, #108]	; (8005e28 <_puts_r+0xd4>)
 8005dba:	429c      	cmp	r4, r3
 8005dbc:	d101      	bne.n	8005dc2 <_puts_r+0x6e>
 8005dbe:	68ac      	ldr	r4, [r5, #8]
 8005dc0:	e7da      	b.n	8005d78 <_puts_r+0x24>
 8005dc2:	4b1a      	ldr	r3, [pc, #104]	; (8005e2c <_puts_r+0xd8>)
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	bf08      	it	eq
 8005dc8:	68ec      	ldreq	r4, [r5, #12]
 8005dca:	e7d5      	b.n	8005d78 <_puts_r+0x24>
 8005dcc:	4621      	mov	r1, r4
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f000 f888 	bl	8005ee4 <__swsetup_r>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	d0dd      	beq.n	8005d94 <_puts_r+0x40>
 8005dd8:	f04f 35ff 	mov.w	r5, #4294967295
 8005ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dde:	07da      	lsls	r2, r3, #31
 8005de0:	d405      	bmi.n	8005dee <_puts_r+0x9a>
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	059b      	lsls	r3, r3, #22
 8005de6:	d402      	bmi.n	8005dee <_puts_r+0x9a>
 8005de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dea:	f000 faa0 	bl	800632e <__retarget_lock_release_recursive>
 8005dee:	4628      	mov	r0, r5
 8005df0:	bd70      	pop	{r4, r5, r6, pc}
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	da04      	bge.n	8005e00 <_puts_r+0xac>
 8005df6:	69a2      	ldr	r2, [r4, #24]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	dc06      	bgt.n	8005e0a <_puts_r+0xb6>
 8005dfc:	290a      	cmp	r1, #10
 8005dfe:	d004      	beq.n	8005e0a <_puts_r+0xb6>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	6022      	str	r2, [r4, #0]
 8005e06:	7019      	strb	r1, [r3, #0]
 8005e08:	e7c5      	b.n	8005d96 <_puts_r+0x42>
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f000 f817 	bl	8005e40 <__swbuf_r>
 8005e12:	3001      	adds	r0, #1
 8005e14:	d1bf      	bne.n	8005d96 <_puts_r+0x42>
 8005e16:	e7df      	b.n	8005dd8 <_puts_r+0x84>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	250a      	movs	r5, #10
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	6022      	str	r2, [r4, #0]
 8005e20:	701d      	strb	r5, [r3, #0]
 8005e22:	e7db      	b.n	8005ddc <_puts_r+0x88>
 8005e24:	0800689c 	.word	0x0800689c
 8005e28:	080068bc 	.word	0x080068bc
 8005e2c:	0800687c 	.word	0x0800687c

08005e30 <puts>:
 8005e30:	4b02      	ldr	r3, [pc, #8]	; (8005e3c <puts+0xc>)
 8005e32:	4601      	mov	r1, r0
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	f7ff bf8d 	b.w	8005d54 <_puts_r>
 8005e3a:	bf00      	nop
 8005e3c:	2000000c 	.word	0x2000000c

08005e40 <__swbuf_r>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	460e      	mov	r6, r1
 8005e44:	4614      	mov	r4, r2
 8005e46:	4605      	mov	r5, r0
 8005e48:	b118      	cbz	r0, 8005e52 <__swbuf_r+0x12>
 8005e4a:	6983      	ldr	r3, [r0, #24]
 8005e4c:	b90b      	cbnz	r3, 8005e52 <__swbuf_r+0x12>
 8005e4e:	f000 f9cf 	bl	80061f0 <__sinit>
 8005e52:	4b21      	ldr	r3, [pc, #132]	; (8005ed8 <__swbuf_r+0x98>)
 8005e54:	429c      	cmp	r4, r3
 8005e56:	d12b      	bne.n	8005eb0 <__swbuf_r+0x70>
 8005e58:	686c      	ldr	r4, [r5, #4]
 8005e5a:	69a3      	ldr	r3, [r4, #24]
 8005e5c:	60a3      	str	r3, [r4, #8]
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	071a      	lsls	r2, r3, #28
 8005e62:	d52f      	bpl.n	8005ec4 <__swbuf_r+0x84>
 8005e64:	6923      	ldr	r3, [r4, #16]
 8005e66:	b36b      	cbz	r3, 8005ec4 <__swbuf_r+0x84>
 8005e68:	6923      	ldr	r3, [r4, #16]
 8005e6a:	b2f6      	uxtb	r6, r6
 8005e6c:	6820      	ldr	r0, [r4, #0]
 8005e6e:	4637      	mov	r7, r6
 8005e70:	1ac0      	subs	r0, r0, r3
 8005e72:	6963      	ldr	r3, [r4, #20]
 8005e74:	4283      	cmp	r3, r0
 8005e76:	dc04      	bgt.n	8005e82 <__swbuf_r+0x42>
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f000 f924 	bl	80060c8 <_fflush_r>
 8005e80:	bb30      	cbnz	r0, 8005ed0 <__swbuf_r+0x90>
 8005e82:	68a3      	ldr	r3, [r4, #8]
 8005e84:	3001      	adds	r0, #1
 8005e86:	3b01      	subs	r3, #1
 8005e88:	60a3      	str	r3, [r4, #8]
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	6022      	str	r2, [r4, #0]
 8005e90:	701e      	strb	r6, [r3, #0]
 8005e92:	6963      	ldr	r3, [r4, #20]
 8005e94:	4283      	cmp	r3, r0
 8005e96:	d004      	beq.n	8005ea2 <__swbuf_r+0x62>
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	07db      	lsls	r3, r3, #31
 8005e9c:	d506      	bpl.n	8005eac <__swbuf_r+0x6c>
 8005e9e:	2e0a      	cmp	r6, #10
 8005ea0:	d104      	bne.n	8005eac <__swbuf_r+0x6c>
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f000 f90f 	bl	80060c8 <_fflush_r>
 8005eaa:	b988      	cbnz	r0, 8005ed0 <__swbuf_r+0x90>
 8005eac:	4638      	mov	r0, r7
 8005eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <__swbuf_r+0x9c>)
 8005eb2:	429c      	cmp	r4, r3
 8005eb4:	d101      	bne.n	8005eba <__swbuf_r+0x7a>
 8005eb6:	68ac      	ldr	r4, [r5, #8]
 8005eb8:	e7cf      	b.n	8005e5a <__swbuf_r+0x1a>
 8005eba:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <__swbuf_r+0xa0>)
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	bf08      	it	eq
 8005ec0:	68ec      	ldreq	r4, [r5, #12]
 8005ec2:	e7ca      	b.n	8005e5a <__swbuf_r+0x1a>
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 f80c 	bl	8005ee4 <__swsetup_r>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	d0cb      	beq.n	8005e68 <__swbuf_r+0x28>
 8005ed0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ed4:	e7ea      	b.n	8005eac <__swbuf_r+0x6c>
 8005ed6:	bf00      	nop
 8005ed8:	0800689c 	.word	0x0800689c
 8005edc:	080068bc 	.word	0x080068bc
 8005ee0:	0800687c 	.word	0x0800687c

08005ee4 <__swsetup_r>:
 8005ee4:	4b32      	ldr	r3, [pc, #200]	; (8005fb0 <__swsetup_r+0xcc>)
 8005ee6:	b570      	push	{r4, r5, r6, lr}
 8005ee8:	681d      	ldr	r5, [r3, #0]
 8005eea:	4606      	mov	r6, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	b125      	cbz	r5, 8005efa <__swsetup_r+0x16>
 8005ef0:	69ab      	ldr	r3, [r5, #24]
 8005ef2:	b913      	cbnz	r3, 8005efa <__swsetup_r+0x16>
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f000 f97b 	bl	80061f0 <__sinit>
 8005efa:	4b2e      	ldr	r3, [pc, #184]	; (8005fb4 <__swsetup_r+0xd0>)
 8005efc:	429c      	cmp	r4, r3
 8005efe:	d10f      	bne.n	8005f20 <__swsetup_r+0x3c>
 8005f00:	686c      	ldr	r4, [r5, #4]
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f08:	0719      	lsls	r1, r3, #28
 8005f0a:	d42c      	bmi.n	8005f66 <__swsetup_r+0x82>
 8005f0c:	06dd      	lsls	r5, r3, #27
 8005f0e:	d411      	bmi.n	8005f34 <__swsetup_r+0x50>
 8005f10:	2309      	movs	r3, #9
 8005f12:	6033      	str	r3, [r6, #0]
 8005f14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	81a3      	strh	r3, [r4, #12]
 8005f1e:	e03e      	b.n	8005f9e <__swsetup_r+0xba>
 8005f20:	4b25      	ldr	r3, [pc, #148]	; (8005fb8 <__swsetup_r+0xd4>)
 8005f22:	429c      	cmp	r4, r3
 8005f24:	d101      	bne.n	8005f2a <__swsetup_r+0x46>
 8005f26:	68ac      	ldr	r4, [r5, #8]
 8005f28:	e7eb      	b.n	8005f02 <__swsetup_r+0x1e>
 8005f2a:	4b24      	ldr	r3, [pc, #144]	; (8005fbc <__swsetup_r+0xd8>)
 8005f2c:	429c      	cmp	r4, r3
 8005f2e:	bf08      	it	eq
 8005f30:	68ec      	ldreq	r4, [r5, #12]
 8005f32:	e7e6      	b.n	8005f02 <__swsetup_r+0x1e>
 8005f34:	0758      	lsls	r0, r3, #29
 8005f36:	d512      	bpl.n	8005f5e <__swsetup_r+0x7a>
 8005f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f3a:	b141      	cbz	r1, 8005f4e <__swsetup_r+0x6a>
 8005f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f40:	4299      	cmp	r1, r3
 8005f42:	d002      	beq.n	8005f4a <__swsetup_r+0x66>
 8005f44:	4630      	mov	r0, r6
 8005f46:	f000 fa59 	bl	80063fc <_free_r>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f54:	81a3      	strh	r3, [r4, #12]
 8005f56:	2300      	movs	r3, #0
 8005f58:	6063      	str	r3, [r4, #4]
 8005f5a:	6923      	ldr	r3, [r4, #16]
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	f043 0308 	orr.w	r3, r3, #8
 8005f64:	81a3      	strh	r3, [r4, #12]
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	b94b      	cbnz	r3, 8005f7e <__swsetup_r+0x9a>
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f74:	d003      	beq.n	8005f7e <__swsetup_r+0x9a>
 8005f76:	4621      	mov	r1, r4
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f000 f9ff 	bl	800637c <__smakebuf_r>
 8005f7e:	89a0      	ldrh	r0, [r4, #12]
 8005f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f84:	f010 0301 	ands.w	r3, r0, #1
 8005f88:	d00a      	beq.n	8005fa0 <__swsetup_r+0xbc>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60a3      	str	r3, [r4, #8]
 8005f8e:	6963      	ldr	r3, [r4, #20]
 8005f90:	425b      	negs	r3, r3
 8005f92:	61a3      	str	r3, [r4, #24]
 8005f94:	6923      	ldr	r3, [r4, #16]
 8005f96:	b943      	cbnz	r3, 8005faa <__swsetup_r+0xc6>
 8005f98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f9c:	d1ba      	bne.n	8005f14 <__swsetup_r+0x30>
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	0781      	lsls	r1, r0, #30
 8005fa2:	bf58      	it	pl
 8005fa4:	6963      	ldrpl	r3, [r4, #20]
 8005fa6:	60a3      	str	r3, [r4, #8]
 8005fa8:	e7f4      	b.n	8005f94 <__swsetup_r+0xb0>
 8005faa:	2000      	movs	r0, #0
 8005fac:	e7f7      	b.n	8005f9e <__swsetup_r+0xba>
 8005fae:	bf00      	nop
 8005fb0:	2000000c 	.word	0x2000000c
 8005fb4:	0800689c 	.word	0x0800689c
 8005fb8:	080068bc 	.word	0x080068bc
 8005fbc:	0800687c 	.word	0x0800687c

08005fc0 <__sflush_r>:
 8005fc0:	898a      	ldrh	r2, [r1, #12]
 8005fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc6:	4605      	mov	r5, r0
 8005fc8:	0710      	lsls	r0, r2, #28
 8005fca:	460c      	mov	r4, r1
 8005fcc:	d458      	bmi.n	8006080 <__sflush_r+0xc0>
 8005fce:	684b      	ldr	r3, [r1, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	dc05      	bgt.n	8005fe0 <__sflush_r+0x20>
 8005fd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	dc02      	bgt.n	8005fe0 <__sflush_r+0x20>
 8005fda:	2000      	movs	r0, #0
 8005fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fe2:	2e00      	cmp	r6, #0
 8005fe4:	d0f9      	beq.n	8005fda <__sflush_r+0x1a>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fec:	682f      	ldr	r7, [r5, #0]
 8005fee:	602b      	str	r3, [r5, #0]
 8005ff0:	d032      	beq.n	8006058 <__sflush_r+0x98>
 8005ff2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	075a      	lsls	r2, r3, #29
 8005ff8:	d505      	bpl.n	8006006 <__sflush_r+0x46>
 8005ffa:	6863      	ldr	r3, [r4, #4]
 8005ffc:	1ac0      	subs	r0, r0, r3
 8005ffe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006000:	b10b      	cbz	r3, 8006006 <__sflush_r+0x46>
 8006002:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006004:	1ac0      	subs	r0, r0, r3
 8006006:	2300      	movs	r3, #0
 8006008:	4602      	mov	r2, r0
 800600a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800600c:	4628      	mov	r0, r5
 800600e:	6a21      	ldr	r1, [r4, #32]
 8006010:	47b0      	blx	r6
 8006012:	1c43      	adds	r3, r0, #1
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	d106      	bne.n	8006026 <__sflush_r+0x66>
 8006018:	6829      	ldr	r1, [r5, #0]
 800601a:	291d      	cmp	r1, #29
 800601c:	d82c      	bhi.n	8006078 <__sflush_r+0xb8>
 800601e:	4a29      	ldr	r2, [pc, #164]	; (80060c4 <__sflush_r+0x104>)
 8006020:	40ca      	lsrs	r2, r1
 8006022:	07d6      	lsls	r6, r2, #31
 8006024:	d528      	bpl.n	8006078 <__sflush_r+0xb8>
 8006026:	2200      	movs	r2, #0
 8006028:	04d9      	lsls	r1, r3, #19
 800602a:	6062      	str	r2, [r4, #4]
 800602c:	6922      	ldr	r2, [r4, #16]
 800602e:	6022      	str	r2, [r4, #0]
 8006030:	d504      	bpl.n	800603c <__sflush_r+0x7c>
 8006032:	1c42      	adds	r2, r0, #1
 8006034:	d101      	bne.n	800603a <__sflush_r+0x7a>
 8006036:	682b      	ldr	r3, [r5, #0]
 8006038:	b903      	cbnz	r3, 800603c <__sflush_r+0x7c>
 800603a:	6560      	str	r0, [r4, #84]	; 0x54
 800603c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800603e:	602f      	str	r7, [r5, #0]
 8006040:	2900      	cmp	r1, #0
 8006042:	d0ca      	beq.n	8005fda <__sflush_r+0x1a>
 8006044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006048:	4299      	cmp	r1, r3
 800604a:	d002      	beq.n	8006052 <__sflush_r+0x92>
 800604c:	4628      	mov	r0, r5
 800604e:	f000 f9d5 	bl	80063fc <_free_r>
 8006052:	2000      	movs	r0, #0
 8006054:	6360      	str	r0, [r4, #52]	; 0x34
 8006056:	e7c1      	b.n	8005fdc <__sflush_r+0x1c>
 8006058:	6a21      	ldr	r1, [r4, #32]
 800605a:	2301      	movs	r3, #1
 800605c:	4628      	mov	r0, r5
 800605e:	47b0      	blx	r6
 8006060:	1c41      	adds	r1, r0, #1
 8006062:	d1c7      	bne.n	8005ff4 <__sflush_r+0x34>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0c4      	beq.n	8005ff4 <__sflush_r+0x34>
 800606a:	2b1d      	cmp	r3, #29
 800606c:	d001      	beq.n	8006072 <__sflush_r+0xb2>
 800606e:	2b16      	cmp	r3, #22
 8006070:	d101      	bne.n	8006076 <__sflush_r+0xb6>
 8006072:	602f      	str	r7, [r5, #0]
 8006074:	e7b1      	b.n	8005fda <__sflush_r+0x1a>
 8006076:	89a3      	ldrh	r3, [r4, #12]
 8006078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800607c:	81a3      	strh	r3, [r4, #12]
 800607e:	e7ad      	b.n	8005fdc <__sflush_r+0x1c>
 8006080:	690f      	ldr	r7, [r1, #16]
 8006082:	2f00      	cmp	r7, #0
 8006084:	d0a9      	beq.n	8005fda <__sflush_r+0x1a>
 8006086:	0793      	lsls	r3, r2, #30
 8006088:	680e      	ldr	r6, [r1, #0]
 800608a:	600f      	str	r7, [r1, #0]
 800608c:	bf0c      	ite	eq
 800608e:	694b      	ldreq	r3, [r1, #20]
 8006090:	2300      	movne	r3, #0
 8006092:	eba6 0807 	sub.w	r8, r6, r7
 8006096:	608b      	str	r3, [r1, #8]
 8006098:	f1b8 0f00 	cmp.w	r8, #0
 800609c:	dd9d      	ble.n	8005fda <__sflush_r+0x1a>
 800609e:	4643      	mov	r3, r8
 80060a0:	463a      	mov	r2, r7
 80060a2:	6a21      	ldr	r1, [r4, #32]
 80060a4:	4628      	mov	r0, r5
 80060a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060a8:	47b0      	blx	r6
 80060aa:	2800      	cmp	r0, #0
 80060ac:	dc06      	bgt.n	80060bc <__sflush_r+0xfc>
 80060ae:	89a3      	ldrh	r3, [r4, #12]
 80060b0:	f04f 30ff 	mov.w	r0, #4294967295
 80060b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060b8:	81a3      	strh	r3, [r4, #12]
 80060ba:	e78f      	b.n	8005fdc <__sflush_r+0x1c>
 80060bc:	4407      	add	r7, r0
 80060be:	eba8 0800 	sub.w	r8, r8, r0
 80060c2:	e7e9      	b.n	8006098 <__sflush_r+0xd8>
 80060c4:	20400001 	.word	0x20400001

080060c8 <_fflush_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	690b      	ldr	r3, [r1, #16]
 80060cc:	4605      	mov	r5, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	b913      	cbnz	r3, 80060d8 <_fflush_r+0x10>
 80060d2:	2500      	movs	r5, #0
 80060d4:	4628      	mov	r0, r5
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	b118      	cbz	r0, 80060e2 <_fflush_r+0x1a>
 80060da:	6983      	ldr	r3, [r0, #24]
 80060dc:	b90b      	cbnz	r3, 80060e2 <_fflush_r+0x1a>
 80060de:	f000 f887 	bl	80061f0 <__sinit>
 80060e2:	4b14      	ldr	r3, [pc, #80]	; (8006134 <_fflush_r+0x6c>)
 80060e4:	429c      	cmp	r4, r3
 80060e6:	d11b      	bne.n	8006120 <_fflush_r+0x58>
 80060e8:	686c      	ldr	r4, [r5, #4]
 80060ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0ef      	beq.n	80060d2 <_fflush_r+0xa>
 80060f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060f4:	07d0      	lsls	r0, r2, #31
 80060f6:	d404      	bmi.n	8006102 <_fflush_r+0x3a>
 80060f8:	0599      	lsls	r1, r3, #22
 80060fa:	d402      	bmi.n	8006102 <_fflush_r+0x3a>
 80060fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060fe:	f000 f915 	bl	800632c <__retarget_lock_acquire_recursive>
 8006102:	4628      	mov	r0, r5
 8006104:	4621      	mov	r1, r4
 8006106:	f7ff ff5b 	bl	8005fc0 <__sflush_r>
 800610a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800610c:	4605      	mov	r5, r0
 800610e:	07da      	lsls	r2, r3, #31
 8006110:	d4e0      	bmi.n	80060d4 <_fflush_r+0xc>
 8006112:	89a3      	ldrh	r3, [r4, #12]
 8006114:	059b      	lsls	r3, r3, #22
 8006116:	d4dd      	bmi.n	80060d4 <_fflush_r+0xc>
 8006118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800611a:	f000 f908 	bl	800632e <__retarget_lock_release_recursive>
 800611e:	e7d9      	b.n	80060d4 <_fflush_r+0xc>
 8006120:	4b05      	ldr	r3, [pc, #20]	; (8006138 <_fflush_r+0x70>)
 8006122:	429c      	cmp	r4, r3
 8006124:	d101      	bne.n	800612a <_fflush_r+0x62>
 8006126:	68ac      	ldr	r4, [r5, #8]
 8006128:	e7df      	b.n	80060ea <_fflush_r+0x22>
 800612a:	4b04      	ldr	r3, [pc, #16]	; (800613c <_fflush_r+0x74>)
 800612c:	429c      	cmp	r4, r3
 800612e:	bf08      	it	eq
 8006130:	68ec      	ldreq	r4, [r5, #12]
 8006132:	e7da      	b.n	80060ea <_fflush_r+0x22>
 8006134:	0800689c 	.word	0x0800689c
 8006138:	080068bc 	.word	0x080068bc
 800613c:	0800687c 	.word	0x0800687c

08006140 <std>:
 8006140:	2300      	movs	r3, #0
 8006142:	b510      	push	{r4, lr}
 8006144:	4604      	mov	r4, r0
 8006146:	6083      	str	r3, [r0, #8]
 8006148:	8181      	strh	r1, [r0, #12]
 800614a:	4619      	mov	r1, r3
 800614c:	6643      	str	r3, [r0, #100]	; 0x64
 800614e:	81c2      	strh	r2, [r0, #14]
 8006150:	2208      	movs	r2, #8
 8006152:	6183      	str	r3, [r0, #24]
 8006154:	e9c0 3300 	strd	r3, r3, [r0]
 8006158:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800615c:	305c      	adds	r0, #92	; 0x5c
 800615e:	f7ff fdf1 	bl	8005d44 <memset>
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <std+0x38>)
 8006164:	6224      	str	r4, [r4, #32]
 8006166:	6263      	str	r3, [r4, #36]	; 0x24
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <std+0x3c>)
 800616a:	62a3      	str	r3, [r4, #40]	; 0x28
 800616c:	4b04      	ldr	r3, [pc, #16]	; (8006180 <std+0x40>)
 800616e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006170:	4b04      	ldr	r3, [pc, #16]	; (8006184 <std+0x44>)
 8006172:	6323      	str	r3, [r4, #48]	; 0x30
 8006174:	bd10      	pop	{r4, pc}
 8006176:	bf00      	nop
 8006178:	080065dd 	.word	0x080065dd
 800617c:	080065ff 	.word	0x080065ff
 8006180:	08006637 	.word	0x08006637
 8006184:	0800665b 	.word	0x0800665b

08006188 <_cleanup_r>:
 8006188:	4901      	ldr	r1, [pc, #4]	; (8006190 <_cleanup_r+0x8>)
 800618a:	f000 b8af 	b.w	80062ec <_fwalk_reent>
 800618e:	bf00      	nop
 8006190:	080060c9 	.word	0x080060c9

08006194 <__sfmoreglue>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	2268      	movs	r2, #104	; 0x68
 8006198:	1e4d      	subs	r5, r1, #1
 800619a:	460e      	mov	r6, r1
 800619c:	4355      	muls	r5, r2
 800619e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061a2:	f000 f997 	bl	80064d4 <_malloc_r>
 80061a6:	4604      	mov	r4, r0
 80061a8:	b140      	cbz	r0, 80061bc <__sfmoreglue+0x28>
 80061aa:	2100      	movs	r1, #0
 80061ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061b0:	e9c0 1600 	strd	r1, r6, [r0]
 80061b4:	300c      	adds	r0, #12
 80061b6:	60a0      	str	r0, [r4, #8]
 80061b8:	f7ff fdc4 	bl	8005d44 <memset>
 80061bc:	4620      	mov	r0, r4
 80061be:	bd70      	pop	{r4, r5, r6, pc}

080061c0 <__sfp_lock_acquire>:
 80061c0:	4801      	ldr	r0, [pc, #4]	; (80061c8 <__sfp_lock_acquire+0x8>)
 80061c2:	f000 b8b3 	b.w	800632c <__retarget_lock_acquire_recursive>
 80061c6:	bf00      	nop
 80061c8:	20000129 	.word	0x20000129

080061cc <__sfp_lock_release>:
 80061cc:	4801      	ldr	r0, [pc, #4]	; (80061d4 <__sfp_lock_release+0x8>)
 80061ce:	f000 b8ae 	b.w	800632e <__retarget_lock_release_recursive>
 80061d2:	bf00      	nop
 80061d4:	20000129 	.word	0x20000129

080061d8 <__sinit_lock_acquire>:
 80061d8:	4801      	ldr	r0, [pc, #4]	; (80061e0 <__sinit_lock_acquire+0x8>)
 80061da:	f000 b8a7 	b.w	800632c <__retarget_lock_acquire_recursive>
 80061de:	bf00      	nop
 80061e0:	2000012a 	.word	0x2000012a

080061e4 <__sinit_lock_release>:
 80061e4:	4801      	ldr	r0, [pc, #4]	; (80061ec <__sinit_lock_release+0x8>)
 80061e6:	f000 b8a2 	b.w	800632e <__retarget_lock_release_recursive>
 80061ea:	bf00      	nop
 80061ec:	2000012a 	.word	0x2000012a

080061f0 <__sinit>:
 80061f0:	b510      	push	{r4, lr}
 80061f2:	4604      	mov	r4, r0
 80061f4:	f7ff fff0 	bl	80061d8 <__sinit_lock_acquire>
 80061f8:	69a3      	ldr	r3, [r4, #24]
 80061fa:	b11b      	cbz	r3, 8006204 <__sinit+0x14>
 80061fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006200:	f7ff bff0 	b.w	80061e4 <__sinit_lock_release>
 8006204:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006208:	6523      	str	r3, [r4, #80]	; 0x50
 800620a:	4620      	mov	r0, r4
 800620c:	4b12      	ldr	r3, [pc, #72]	; (8006258 <__sinit+0x68>)
 800620e:	4a13      	ldr	r2, [pc, #76]	; (800625c <__sinit+0x6c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	62a2      	str	r2, [r4, #40]	; 0x28
 8006214:	42a3      	cmp	r3, r4
 8006216:	bf04      	itt	eq
 8006218:	2301      	moveq	r3, #1
 800621a:	61a3      	streq	r3, [r4, #24]
 800621c:	f000 f820 	bl	8006260 <__sfp>
 8006220:	6060      	str	r0, [r4, #4]
 8006222:	4620      	mov	r0, r4
 8006224:	f000 f81c 	bl	8006260 <__sfp>
 8006228:	60a0      	str	r0, [r4, #8]
 800622a:	4620      	mov	r0, r4
 800622c:	f000 f818 	bl	8006260 <__sfp>
 8006230:	2200      	movs	r2, #0
 8006232:	2104      	movs	r1, #4
 8006234:	60e0      	str	r0, [r4, #12]
 8006236:	6860      	ldr	r0, [r4, #4]
 8006238:	f7ff ff82 	bl	8006140 <std>
 800623c:	2201      	movs	r2, #1
 800623e:	2109      	movs	r1, #9
 8006240:	68a0      	ldr	r0, [r4, #8]
 8006242:	f7ff ff7d 	bl	8006140 <std>
 8006246:	2202      	movs	r2, #2
 8006248:	2112      	movs	r1, #18
 800624a:	68e0      	ldr	r0, [r4, #12]
 800624c:	f7ff ff78 	bl	8006140 <std>
 8006250:	2301      	movs	r3, #1
 8006252:	61a3      	str	r3, [r4, #24]
 8006254:	e7d2      	b.n	80061fc <__sinit+0xc>
 8006256:	bf00      	nop
 8006258:	08006878 	.word	0x08006878
 800625c:	08006189 	.word	0x08006189

08006260 <__sfp>:
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006262:	4607      	mov	r7, r0
 8006264:	f7ff ffac 	bl	80061c0 <__sfp_lock_acquire>
 8006268:	4b1e      	ldr	r3, [pc, #120]	; (80062e4 <__sfp+0x84>)
 800626a:	681e      	ldr	r6, [r3, #0]
 800626c:	69b3      	ldr	r3, [r6, #24]
 800626e:	b913      	cbnz	r3, 8006276 <__sfp+0x16>
 8006270:	4630      	mov	r0, r6
 8006272:	f7ff ffbd 	bl	80061f0 <__sinit>
 8006276:	3648      	adds	r6, #72	; 0x48
 8006278:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800627c:	3b01      	subs	r3, #1
 800627e:	d503      	bpl.n	8006288 <__sfp+0x28>
 8006280:	6833      	ldr	r3, [r6, #0]
 8006282:	b30b      	cbz	r3, 80062c8 <__sfp+0x68>
 8006284:	6836      	ldr	r6, [r6, #0]
 8006286:	e7f7      	b.n	8006278 <__sfp+0x18>
 8006288:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800628c:	b9d5      	cbnz	r5, 80062c4 <__sfp+0x64>
 800628e:	4b16      	ldr	r3, [pc, #88]	; (80062e8 <__sfp+0x88>)
 8006290:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006294:	6665      	str	r5, [r4, #100]	; 0x64
 8006296:	60e3      	str	r3, [r4, #12]
 8006298:	f000 f847 	bl	800632a <__retarget_lock_init_recursive>
 800629c:	f7ff ff96 	bl	80061cc <__sfp_lock_release>
 80062a0:	2208      	movs	r2, #8
 80062a2:	4629      	mov	r1, r5
 80062a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062a8:	6025      	str	r5, [r4, #0]
 80062aa:	61a5      	str	r5, [r4, #24]
 80062ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062b4:	f7ff fd46 	bl	8005d44 <memset>
 80062b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062c0:	4620      	mov	r0, r4
 80062c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062c4:	3468      	adds	r4, #104	; 0x68
 80062c6:	e7d9      	b.n	800627c <__sfp+0x1c>
 80062c8:	2104      	movs	r1, #4
 80062ca:	4638      	mov	r0, r7
 80062cc:	f7ff ff62 	bl	8006194 <__sfmoreglue>
 80062d0:	4604      	mov	r4, r0
 80062d2:	6030      	str	r0, [r6, #0]
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d1d5      	bne.n	8006284 <__sfp+0x24>
 80062d8:	f7ff ff78 	bl	80061cc <__sfp_lock_release>
 80062dc:	230c      	movs	r3, #12
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	e7ee      	b.n	80062c0 <__sfp+0x60>
 80062e2:	bf00      	nop
 80062e4:	08006878 	.word	0x08006878
 80062e8:	ffff0001 	.word	0xffff0001

080062ec <_fwalk_reent>:
 80062ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062f0:	4606      	mov	r6, r0
 80062f2:	4688      	mov	r8, r1
 80062f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062f8:	2700      	movs	r7, #0
 80062fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062fe:	f1b9 0901 	subs.w	r9, r9, #1
 8006302:	d505      	bpl.n	8006310 <_fwalk_reent+0x24>
 8006304:	6824      	ldr	r4, [r4, #0]
 8006306:	2c00      	cmp	r4, #0
 8006308:	d1f7      	bne.n	80062fa <_fwalk_reent+0xe>
 800630a:	4638      	mov	r0, r7
 800630c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006310:	89ab      	ldrh	r3, [r5, #12]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d907      	bls.n	8006326 <_fwalk_reent+0x3a>
 8006316:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800631a:	3301      	adds	r3, #1
 800631c:	d003      	beq.n	8006326 <_fwalk_reent+0x3a>
 800631e:	4629      	mov	r1, r5
 8006320:	4630      	mov	r0, r6
 8006322:	47c0      	blx	r8
 8006324:	4307      	orrs	r7, r0
 8006326:	3568      	adds	r5, #104	; 0x68
 8006328:	e7e9      	b.n	80062fe <_fwalk_reent+0x12>

0800632a <__retarget_lock_init_recursive>:
 800632a:	4770      	bx	lr

0800632c <__retarget_lock_acquire_recursive>:
 800632c:	4770      	bx	lr

0800632e <__retarget_lock_release_recursive>:
 800632e:	4770      	bx	lr

08006330 <__swhatbuf_r>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	460e      	mov	r6, r1
 8006334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006338:	b096      	sub	sp, #88	; 0x58
 800633a:	4614      	mov	r4, r2
 800633c:	2900      	cmp	r1, #0
 800633e:	461d      	mov	r5, r3
 8006340:	da08      	bge.n	8006354 <__swhatbuf_r+0x24>
 8006342:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	602a      	str	r2, [r5, #0]
 800634a:	061a      	lsls	r2, r3, #24
 800634c:	d410      	bmi.n	8006370 <__swhatbuf_r+0x40>
 800634e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006352:	e00e      	b.n	8006372 <__swhatbuf_r+0x42>
 8006354:	466a      	mov	r2, sp
 8006356:	f000 f9a7 	bl	80066a8 <_fstat_r>
 800635a:	2800      	cmp	r0, #0
 800635c:	dbf1      	blt.n	8006342 <__swhatbuf_r+0x12>
 800635e:	9a01      	ldr	r2, [sp, #4]
 8006360:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006364:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006368:	425a      	negs	r2, r3
 800636a:	415a      	adcs	r2, r3
 800636c:	602a      	str	r2, [r5, #0]
 800636e:	e7ee      	b.n	800634e <__swhatbuf_r+0x1e>
 8006370:	2340      	movs	r3, #64	; 0x40
 8006372:	2000      	movs	r0, #0
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	b016      	add	sp, #88	; 0x58
 8006378:	bd70      	pop	{r4, r5, r6, pc}
	...

0800637c <__smakebuf_r>:
 800637c:	898b      	ldrh	r3, [r1, #12]
 800637e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006380:	079d      	lsls	r5, r3, #30
 8006382:	4606      	mov	r6, r0
 8006384:	460c      	mov	r4, r1
 8006386:	d507      	bpl.n	8006398 <__smakebuf_r+0x1c>
 8006388:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	6123      	str	r3, [r4, #16]
 8006390:	2301      	movs	r3, #1
 8006392:	6163      	str	r3, [r4, #20]
 8006394:	b002      	add	sp, #8
 8006396:	bd70      	pop	{r4, r5, r6, pc}
 8006398:	ab01      	add	r3, sp, #4
 800639a:	466a      	mov	r2, sp
 800639c:	f7ff ffc8 	bl	8006330 <__swhatbuf_r>
 80063a0:	9900      	ldr	r1, [sp, #0]
 80063a2:	4605      	mov	r5, r0
 80063a4:	4630      	mov	r0, r6
 80063a6:	f000 f895 	bl	80064d4 <_malloc_r>
 80063aa:	b948      	cbnz	r0, 80063c0 <__smakebuf_r+0x44>
 80063ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b0:	059a      	lsls	r2, r3, #22
 80063b2:	d4ef      	bmi.n	8006394 <__smakebuf_r+0x18>
 80063b4:	f023 0303 	bic.w	r3, r3, #3
 80063b8:	f043 0302 	orr.w	r3, r3, #2
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	e7e3      	b.n	8006388 <__smakebuf_r+0xc>
 80063c0:	4b0d      	ldr	r3, [pc, #52]	; (80063f8 <__smakebuf_r+0x7c>)
 80063c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	6020      	str	r0, [r4, #0]
 80063c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063cc:	6120      	str	r0, [r4, #16]
 80063ce:	81a3      	strh	r3, [r4, #12]
 80063d0:	9b00      	ldr	r3, [sp, #0]
 80063d2:	6163      	str	r3, [r4, #20]
 80063d4:	9b01      	ldr	r3, [sp, #4]
 80063d6:	b15b      	cbz	r3, 80063f0 <__smakebuf_r+0x74>
 80063d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063dc:	4630      	mov	r0, r6
 80063de:	f000 f975 	bl	80066cc <_isatty_r>
 80063e2:	b128      	cbz	r0, 80063f0 <__smakebuf_r+0x74>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	f043 0301 	orr.w	r3, r3, #1
 80063ee:	81a3      	strh	r3, [r4, #12]
 80063f0:	89a0      	ldrh	r0, [r4, #12]
 80063f2:	4305      	orrs	r5, r0
 80063f4:	81a5      	strh	r5, [r4, #12]
 80063f6:	e7cd      	b.n	8006394 <__smakebuf_r+0x18>
 80063f8:	08006189 	.word	0x08006189

080063fc <_free_r>:
 80063fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063fe:	2900      	cmp	r1, #0
 8006400:	d043      	beq.n	800648a <_free_r+0x8e>
 8006402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006406:	1f0c      	subs	r4, r1, #4
 8006408:	9001      	str	r0, [sp, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	bfb8      	it	lt
 800640e:	18e4      	addlt	r4, r4, r3
 8006410:	f000 f97e 	bl	8006710 <__malloc_lock>
 8006414:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <_free_r+0x94>)
 8006416:	9801      	ldr	r0, [sp, #4]
 8006418:	6813      	ldr	r3, [r2, #0]
 800641a:	b933      	cbnz	r3, 800642a <_free_r+0x2e>
 800641c:	6063      	str	r3, [r4, #4]
 800641e:	6014      	str	r4, [r2, #0]
 8006420:	b003      	add	sp, #12
 8006422:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006426:	f000 b979 	b.w	800671c <__malloc_unlock>
 800642a:	42a3      	cmp	r3, r4
 800642c:	d908      	bls.n	8006440 <_free_r+0x44>
 800642e:	6825      	ldr	r5, [r4, #0]
 8006430:	1961      	adds	r1, r4, r5
 8006432:	428b      	cmp	r3, r1
 8006434:	bf01      	itttt	eq
 8006436:	6819      	ldreq	r1, [r3, #0]
 8006438:	685b      	ldreq	r3, [r3, #4]
 800643a:	1949      	addeq	r1, r1, r5
 800643c:	6021      	streq	r1, [r4, #0]
 800643e:	e7ed      	b.n	800641c <_free_r+0x20>
 8006440:	461a      	mov	r2, r3
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	b10b      	cbz	r3, 800644a <_free_r+0x4e>
 8006446:	42a3      	cmp	r3, r4
 8006448:	d9fa      	bls.n	8006440 <_free_r+0x44>
 800644a:	6811      	ldr	r1, [r2, #0]
 800644c:	1855      	adds	r5, r2, r1
 800644e:	42a5      	cmp	r5, r4
 8006450:	d10b      	bne.n	800646a <_free_r+0x6e>
 8006452:	6824      	ldr	r4, [r4, #0]
 8006454:	4421      	add	r1, r4
 8006456:	1854      	adds	r4, r2, r1
 8006458:	6011      	str	r1, [r2, #0]
 800645a:	42a3      	cmp	r3, r4
 800645c:	d1e0      	bne.n	8006420 <_free_r+0x24>
 800645e:	681c      	ldr	r4, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	4421      	add	r1, r4
 8006464:	6053      	str	r3, [r2, #4]
 8006466:	6011      	str	r1, [r2, #0]
 8006468:	e7da      	b.n	8006420 <_free_r+0x24>
 800646a:	d902      	bls.n	8006472 <_free_r+0x76>
 800646c:	230c      	movs	r3, #12
 800646e:	6003      	str	r3, [r0, #0]
 8006470:	e7d6      	b.n	8006420 <_free_r+0x24>
 8006472:	6825      	ldr	r5, [r4, #0]
 8006474:	1961      	adds	r1, r4, r5
 8006476:	428b      	cmp	r3, r1
 8006478:	bf02      	ittt	eq
 800647a:	6819      	ldreq	r1, [r3, #0]
 800647c:	685b      	ldreq	r3, [r3, #4]
 800647e:	1949      	addeq	r1, r1, r5
 8006480:	6063      	str	r3, [r4, #4]
 8006482:	bf08      	it	eq
 8006484:	6021      	streq	r1, [r4, #0]
 8006486:	6054      	str	r4, [r2, #4]
 8006488:	e7ca      	b.n	8006420 <_free_r+0x24>
 800648a:	b003      	add	sp, #12
 800648c:	bd30      	pop	{r4, r5, pc}
 800648e:	bf00      	nop
 8006490:	2000012c 	.word	0x2000012c

08006494 <sbrk_aligned>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	4e0e      	ldr	r6, [pc, #56]	; (80064d0 <sbrk_aligned+0x3c>)
 8006498:	460c      	mov	r4, r1
 800649a:	4605      	mov	r5, r0
 800649c:	6831      	ldr	r1, [r6, #0]
 800649e:	b911      	cbnz	r1, 80064a6 <sbrk_aligned+0x12>
 80064a0:	f000 f88c 	bl	80065bc <_sbrk_r>
 80064a4:	6030      	str	r0, [r6, #0]
 80064a6:	4621      	mov	r1, r4
 80064a8:	4628      	mov	r0, r5
 80064aa:	f000 f887 	bl	80065bc <_sbrk_r>
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	d00a      	beq.n	80064c8 <sbrk_aligned+0x34>
 80064b2:	1cc4      	adds	r4, r0, #3
 80064b4:	f024 0403 	bic.w	r4, r4, #3
 80064b8:	42a0      	cmp	r0, r4
 80064ba:	d007      	beq.n	80064cc <sbrk_aligned+0x38>
 80064bc:	1a21      	subs	r1, r4, r0
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 f87c 	bl	80065bc <_sbrk_r>
 80064c4:	3001      	adds	r0, #1
 80064c6:	d101      	bne.n	80064cc <sbrk_aligned+0x38>
 80064c8:	f04f 34ff 	mov.w	r4, #4294967295
 80064cc:	4620      	mov	r0, r4
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	20000130 	.word	0x20000130

080064d4 <_malloc_r>:
 80064d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d8:	1ccd      	adds	r5, r1, #3
 80064da:	4607      	mov	r7, r0
 80064dc:	f025 0503 	bic.w	r5, r5, #3
 80064e0:	3508      	adds	r5, #8
 80064e2:	2d0c      	cmp	r5, #12
 80064e4:	bf38      	it	cc
 80064e6:	250c      	movcc	r5, #12
 80064e8:	2d00      	cmp	r5, #0
 80064ea:	db01      	blt.n	80064f0 <_malloc_r+0x1c>
 80064ec:	42a9      	cmp	r1, r5
 80064ee:	d905      	bls.n	80064fc <_malloc_r+0x28>
 80064f0:	230c      	movs	r3, #12
 80064f2:	2600      	movs	r6, #0
 80064f4:	603b      	str	r3, [r7, #0]
 80064f6:	4630      	mov	r0, r6
 80064f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fc:	4e2e      	ldr	r6, [pc, #184]	; (80065b8 <_malloc_r+0xe4>)
 80064fe:	f000 f907 	bl	8006710 <__malloc_lock>
 8006502:	6833      	ldr	r3, [r6, #0]
 8006504:	461c      	mov	r4, r3
 8006506:	bb34      	cbnz	r4, 8006556 <_malloc_r+0x82>
 8006508:	4629      	mov	r1, r5
 800650a:	4638      	mov	r0, r7
 800650c:	f7ff ffc2 	bl	8006494 <sbrk_aligned>
 8006510:	1c43      	adds	r3, r0, #1
 8006512:	4604      	mov	r4, r0
 8006514:	d14d      	bne.n	80065b2 <_malloc_r+0xde>
 8006516:	6834      	ldr	r4, [r6, #0]
 8006518:	4626      	mov	r6, r4
 800651a:	2e00      	cmp	r6, #0
 800651c:	d140      	bne.n	80065a0 <_malloc_r+0xcc>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	4631      	mov	r1, r6
 8006522:	4638      	mov	r0, r7
 8006524:	eb04 0803 	add.w	r8, r4, r3
 8006528:	f000 f848 	bl	80065bc <_sbrk_r>
 800652c:	4580      	cmp	r8, r0
 800652e:	d13a      	bne.n	80065a6 <_malloc_r+0xd2>
 8006530:	6821      	ldr	r1, [r4, #0]
 8006532:	3503      	adds	r5, #3
 8006534:	4638      	mov	r0, r7
 8006536:	1a6d      	subs	r5, r5, r1
 8006538:	f025 0503 	bic.w	r5, r5, #3
 800653c:	3508      	adds	r5, #8
 800653e:	2d0c      	cmp	r5, #12
 8006540:	bf38      	it	cc
 8006542:	250c      	movcc	r5, #12
 8006544:	4629      	mov	r1, r5
 8006546:	f7ff ffa5 	bl	8006494 <sbrk_aligned>
 800654a:	3001      	adds	r0, #1
 800654c:	d02b      	beq.n	80065a6 <_malloc_r+0xd2>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	442b      	add	r3, r5
 8006552:	6023      	str	r3, [r4, #0]
 8006554:	e00e      	b.n	8006574 <_malloc_r+0xa0>
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	1b52      	subs	r2, r2, r5
 800655a:	d41e      	bmi.n	800659a <_malloc_r+0xc6>
 800655c:	2a0b      	cmp	r2, #11
 800655e:	d916      	bls.n	800658e <_malloc_r+0xba>
 8006560:	1961      	adds	r1, r4, r5
 8006562:	42a3      	cmp	r3, r4
 8006564:	6025      	str	r5, [r4, #0]
 8006566:	bf18      	it	ne
 8006568:	6059      	strne	r1, [r3, #4]
 800656a:	6863      	ldr	r3, [r4, #4]
 800656c:	bf08      	it	eq
 800656e:	6031      	streq	r1, [r6, #0]
 8006570:	5162      	str	r2, [r4, r5]
 8006572:	604b      	str	r3, [r1, #4]
 8006574:	f104 060b 	add.w	r6, r4, #11
 8006578:	4638      	mov	r0, r7
 800657a:	f000 f8cf 	bl	800671c <__malloc_unlock>
 800657e:	1d23      	adds	r3, r4, #4
 8006580:	f026 0607 	bic.w	r6, r6, #7
 8006584:	1af2      	subs	r2, r6, r3
 8006586:	d0b6      	beq.n	80064f6 <_malloc_r+0x22>
 8006588:	1b9b      	subs	r3, r3, r6
 800658a:	50a3      	str	r3, [r4, r2]
 800658c:	e7b3      	b.n	80064f6 <_malloc_r+0x22>
 800658e:	6862      	ldr	r2, [r4, #4]
 8006590:	42a3      	cmp	r3, r4
 8006592:	bf0c      	ite	eq
 8006594:	6032      	streq	r2, [r6, #0]
 8006596:	605a      	strne	r2, [r3, #4]
 8006598:	e7ec      	b.n	8006574 <_malloc_r+0xa0>
 800659a:	4623      	mov	r3, r4
 800659c:	6864      	ldr	r4, [r4, #4]
 800659e:	e7b2      	b.n	8006506 <_malloc_r+0x32>
 80065a0:	4634      	mov	r4, r6
 80065a2:	6876      	ldr	r6, [r6, #4]
 80065a4:	e7b9      	b.n	800651a <_malloc_r+0x46>
 80065a6:	230c      	movs	r3, #12
 80065a8:	4638      	mov	r0, r7
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	f000 f8b6 	bl	800671c <__malloc_unlock>
 80065b0:	e7a1      	b.n	80064f6 <_malloc_r+0x22>
 80065b2:	6025      	str	r5, [r4, #0]
 80065b4:	e7de      	b.n	8006574 <_malloc_r+0xa0>
 80065b6:	bf00      	nop
 80065b8:	2000012c 	.word	0x2000012c

080065bc <_sbrk_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	2300      	movs	r3, #0
 80065c0:	4d05      	ldr	r5, [pc, #20]	; (80065d8 <_sbrk_r+0x1c>)
 80065c2:	4604      	mov	r4, r0
 80065c4:	4608      	mov	r0, r1
 80065c6:	602b      	str	r3, [r5, #0]
 80065c8:	f7fa f9c6 	bl	8000958 <_sbrk>
 80065cc:	1c43      	adds	r3, r0, #1
 80065ce:	d102      	bne.n	80065d6 <_sbrk_r+0x1a>
 80065d0:	682b      	ldr	r3, [r5, #0]
 80065d2:	b103      	cbz	r3, 80065d6 <_sbrk_r+0x1a>
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	bd38      	pop	{r3, r4, r5, pc}
 80065d8:	20000134 	.word	0x20000134

080065dc <__sread>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	460c      	mov	r4, r1
 80065e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e4:	f000 f8a0 	bl	8006728 <_read_r>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	bfab      	itete	ge
 80065ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065ee:	89a3      	ldrhlt	r3, [r4, #12]
 80065f0:	181b      	addge	r3, r3, r0
 80065f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065f6:	bfac      	ite	ge
 80065f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80065fa:	81a3      	strhlt	r3, [r4, #12]
 80065fc:	bd10      	pop	{r4, pc}

080065fe <__swrite>:
 80065fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006602:	461f      	mov	r7, r3
 8006604:	898b      	ldrh	r3, [r1, #12]
 8006606:	4605      	mov	r5, r0
 8006608:	460c      	mov	r4, r1
 800660a:	05db      	lsls	r3, r3, #23
 800660c:	4616      	mov	r6, r2
 800660e:	d505      	bpl.n	800661c <__swrite+0x1e>
 8006610:	2302      	movs	r3, #2
 8006612:	2200      	movs	r2, #0
 8006614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006618:	f000 f868 	bl	80066ec <_lseek_r>
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	4632      	mov	r2, r6
 8006620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006624:	4628      	mov	r0, r5
 8006626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800662a:	81a3      	strh	r3, [r4, #12]
 800662c:	463b      	mov	r3, r7
 800662e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006632:	f000 b817 	b.w	8006664 <_write_r>

08006636 <__sseek>:
 8006636:	b510      	push	{r4, lr}
 8006638:	460c      	mov	r4, r1
 800663a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800663e:	f000 f855 	bl	80066ec <_lseek_r>
 8006642:	1c43      	adds	r3, r0, #1
 8006644:	89a3      	ldrh	r3, [r4, #12]
 8006646:	bf15      	itete	ne
 8006648:	6560      	strne	r0, [r4, #84]	; 0x54
 800664a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800664e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006652:	81a3      	strheq	r3, [r4, #12]
 8006654:	bf18      	it	ne
 8006656:	81a3      	strhne	r3, [r4, #12]
 8006658:	bd10      	pop	{r4, pc}

0800665a <__sclose>:
 800665a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665e:	f000 b813 	b.w	8006688 <_close_r>
	...

08006664 <_write_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	4604      	mov	r4, r0
 8006668:	4d06      	ldr	r5, [pc, #24]	; (8006684 <_write_r+0x20>)
 800666a:	4608      	mov	r0, r1
 800666c:	4611      	mov	r1, r2
 800666e:	2200      	movs	r2, #0
 8006670:	602a      	str	r2, [r5, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	f7f9 ff90 	bl	8000598 <_write>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d102      	bne.n	8006682 <_write_r+0x1e>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	b103      	cbz	r3, 8006682 <_write_r+0x1e>
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	20000134 	.word	0x20000134

08006688 <_close_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	2300      	movs	r3, #0
 800668c:	4d05      	ldr	r5, [pc, #20]	; (80066a4 <_close_r+0x1c>)
 800668e:	4604      	mov	r4, r0
 8006690:	4608      	mov	r0, r1
 8006692:	602b      	str	r3, [r5, #0]
 8006694:	f7fa f92b 	bl	80008ee <_close>
 8006698:	1c43      	adds	r3, r0, #1
 800669a:	d102      	bne.n	80066a2 <_close_r+0x1a>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b103      	cbz	r3, 80066a2 <_close_r+0x1a>
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	20000134 	.word	0x20000134

080066a8 <_fstat_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	2300      	movs	r3, #0
 80066ac:	4d06      	ldr	r5, [pc, #24]	; (80066c8 <_fstat_r+0x20>)
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	602b      	str	r3, [r5, #0]
 80066b6:	f7fa f926 	bl	8000906 <_fstat>
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	d102      	bne.n	80066c4 <_fstat_r+0x1c>
 80066be:	682b      	ldr	r3, [r5, #0]
 80066c0:	b103      	cbz	r3, 80066c4 <_fstat_r+0x1c>
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	bd38      	pop	{r3, r4, r5, pc}
 80066c6:	bf00      	nop
 80066c8:	20000134 	.word	0x20000134

080066cc <_isatty_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	2300      	movs	r3, #0
 80066d0:	4d05      	ldr	r5, [pc, #20]	; (80066e8 <_isatty_r+0x1c>)
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fa f925 	bl	8000926 <_isatty>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_isatty_r+0x1a>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_isatty_r+0x1a>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	20000134 	.word	0x20000134

080066ec <_lseek_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4604      	mov	r4, r0
 80066f0:	4d06      	ldr	r5, [pc, #24]	; (800670c <_lseek_r+0x20>)
 80066f2:	4608      	mov	r0, r1
 80066f4:	4611      	mov	r1, r2
 80066f6:	2200      	movs	r2, #0
 80066f8:	602a      	str	r2, [r5, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	f7fa f91e 	bl	800093c <_lseek>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_lseek_r+0x1e>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	b103      	cbz	r3, 800670a <_lseek_r+0x1e>
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	20000134 	.word	0x20000134

08006710 <__malloc_lock>:
 8006710:	4801      	ldr	r0, [pc, #4]	; (8006718 <__malloc_lock+0x8>)
 8006712:	f7ff be0b 	b.w	800632c <__retarget_lock_acquire_recursive>
 8006716:	bf00      	nop
 8006718:	20000128 	.word	0x20000128

0800671c <__malloc_unlock>:
 800671c:	4801      	ldr	r0, [pc, #4]	; (8006724 <__malloc_unlock+0x8>)
 800671e:	f7ff be06 	b.w	800632e <__retarget_lock_release_recursive>
 8006722:	bf00      	nop
 8006724:	20000128 	.word	0x20000128

08006728 <_read_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4604      	mov	r4, r0
 800672c:	4d06      	ldr	r5, [pc, #24]	; (8006748 <_read_r+0x20>)
 800672e:	4608      	mov	r0, r1
 8006730:	4611      	mov	r1, r2
 8006732:	2200      	movs	r2, #0
 8006734:	602a      	str	r2, [r5, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	f7fa f8bc 	bl	80008b4 <_read>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_read_r+0x1e>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	b103      	cbz	r3, 8006746 <_read_r+0x1e>
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	20000134 	.word	0x20000134

0800674c <_init>:
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	bf00      	nop
 8006750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006752:	bc08      	pop	{r3}
 8006754:	469e      	mov	lr, r3
 8006756:	4770      	bx	lr

08006758 <_fini>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	bf00      	nop
 800675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675e:	bc08      	pop	{r3}
 8006760:	469e      	mov	lr, r3
 8006762:	4770      	bx	lr
