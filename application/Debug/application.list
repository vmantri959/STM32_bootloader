
application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006548  08008238  08008238  00008238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800e780  0800e780  0000e780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e904  0800e904  0000e904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e90c  0800e90c  0000e90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e910  0800e910  0000e910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800e914  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c8  20000070  0800e984  00010070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000138  0800e984  00010138  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f44b  00000000  00000000  000100a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001cfc  00000000  00000000  0001f4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bd8  00000000  00000000  000211f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b20  00000000  00000000  00021dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003254b  00000000  00000000  000228e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e8ca  00000000  00000000  00054e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00138e24  00000000  00000000  000636fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0019c521  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000036e4  00000000  00000000  0019c574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008238 <__do_global_dtors_aux>:
 8008238:	b510      	push	{r4, lr}
 800823a:	4c05      	ldr	r4, [pc, #20]	; (8008250 <__do_global_dtors_aux+0x18>)
 800823c:	7823      	ldrb	r3, [r4, #0]
 800823e:	b933      	cbnz	r3, 800824e <__do_global_dtors_aux+0x16>
 8008240:	4b04      	ldr	r3, [pc, #16]	; (8008254 <__do_global_dtors_aux+0x1c>)
 8008242:	b113      	cbz	r3, 800824a <__do_global_dtors_aux+0x12>
 8008244:	4804      	ldr	r0, [pc, #16]	; (8008258 <__do_global_dtors_aux+0x20>)
 8008246:	e000      	b.n	800824a <__do_global_dtors_aux+0x12>
 8008248:	bf00      	nop
 800824a:	2301      	movs	r3, #1
 800824c:	7023      	strb	r3, [r4, #0]
 800824e:	bd10      	pop	{r4, pc}
 8008250:	20000070 	.word	0x20000070
 8008254:	00000000 	.word	0x00000000
 8008258:	0800e768 	.word	0x0800e768

0800825c <frame_dummy>:
 800825c:	b508      	push	{r3, lr}
 800825e:	4b03      	ldr	r3, [pc, #12]	; (800826c <frame_dummy+0x10>)
 8008260:	b11b      	cbz	r3, 800826a <frame_dummy+0xe>
 8008262:	4903      	ldr	r1, [pc, #12]	; (8008270 <frame_dummy+0x14>)
 8008264:	4803      	ldr	r0, [pc, #12]	; (8008274 <frame_dummy+0x18>)
 8008266:	e000      	b.n	800826a <frame_dummy+0xe>
 8008268:	bf00      	nop
 800826a:	bd08      	pop	{r3, pc}
 800826c:	00000000 	.word	0x00000000
 8008270:	20000074 	.word	0x20000074
 8008274:	0800e768 	.word	0x0800e768

08008278 <__aeabi_uldivmod>:
 8008278:	b953      	cbnz	r3, 8008290 <__aeabi_uldivmod+0x18>
 800827a:	b94a      	cbnz	r2, 8008290 <__aeabi_uldivmod+0x18>
 800827c:	2900      	cmp	r1, #0
 800827e:	bf08      	it	eq
 8008280:	2800      	cmpeq	r0, #0
 8008282:	bf1c      	itt	ne
 8008284:	f04f 31ff 	movne.w	r1, #4294967295
 8008288:	f04f 30ff 	movne.w	r0, #4294967295
 800828c:	f000 b982 	b.w	8008594 <__aeabi_idiv0>
 8008290:	f1ad 0c08 	sub.w	ip, sp, #8
 8008294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008298:	f000 f806 	bl	80082a8 <__udivmoddi4>
 800829c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082a4:	b004      	add	sp, #16
 80082a6:	4770      	bx	lr

080082a8 <__udivmoddi4>:
 80082a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80082ae:	4604      	mov	r4, r0
 80082b0:	460f      	mov	r7, r1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d148      	bne.n	8008348 <__udivmoddi4+0xa0>
 80082b6:	428a      	cmp	r2, r1
 80082b8:	4694      	mov	ip, r2
 80082ba:	d961      	bls.n	8008380 <__udivmoddi4+0xd8>
 80082bc:	fab2 f382 	clz	r3, r2
 80082c0:	b143      	cbz	r3, 80082d4 <__udivmoddi4+0x2c>
 80082c2:	f1c3 0120 	rsb	r1, r3, #32
 80082c6:	409f      	lsls	r7, r3
 80082c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80082cc:	409c      	lsls	r4, r3
 80082ce:	fa20 f101 	lsr.w	r1, r0, r1
 80082d2:	430f      	orrs	r7, r1
 80082d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80082d8:	fa1f fe8c 	uxth.w	lr, ip
 80082dc:	0c22      	lsrs	r2, r4, #16
 80082de:	fbb7 f6f1 	udiv	r6, r7, r1
 80082e2:	fb01 7716 	mls	r7, r1, r6, r7
 80082e6:	fb06 f00e 	mul.w	r0, r6, lr
 80082ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80082ee:	4290      	cmp	r0, r2
 80082f0:	d908      	bls.n	8008304 <__udivmoddi4+0x5c>
 80082f2:	eb1c 0202 	adds.w	r2, ip, r2
 80082f6:	f106 37ff 	add.w	r7, r6, #4294967295
 80082fa:	d202      	bcs.n	8008302 <__udivmoddi4+0x5a>
 80082fc:	4290      	cmp	r0, r2
 80082fe:	f200 8137 	bhi.w	8008570 <__udivmoddi4+0x2c8>
 8008302:	463e      	mov	r6, r7
 8008304:	1a12      	subs	r2, r2, r0
 8008306:	b2a4      	uxth	r4, r4
 8008308:	fbb2 f0f1 	udiv	r0, r2, r1
 800830c:	fb01 2210 	mls	r2, r1, r0, r2
 8008310:	fb00 fe0e 	mul.w	lr, r0, lr
 8008314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008318:	45a6      	cmp	lr, r4
 800831a:	d908      	bls.n	800832e <__udivmoddi4+0x86>
 800831c:	eb1c 0404 	adds.w	r4, ip, r4
 8008320:	f100 32ff 	add.w	r2, r0, #4294967295
 8008324:	d202      	bcs.n	800832c <__udivmoddi4+0x84>
 8008326:	45a6      	cmp	lr, r4
 8008328:	f200 811c 	bhi.w	8008564 <__udivmoddi4+0x2bc>
 800832c:	4610      	mov	r0, r2
 800832e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008332:	eba4 040e 	sub.w	r4, r4, lr
 8008336:	2600      	movs	r6, #0
 8008338:	b11d      	cbz	r5, 8008342 <__udivmoddi4+0x9a>
 800833a:	40dc      	lsrs	r4, r3
 800833c:	2300      	movs	r3, #0
 800833e:	e9c5 4300 	strd	r4, r3, [r5]
 8008342:	4631      	mov	r1, r6
 8008344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008348:	428b      	cmp	r3, r1
 800834a:	d909      	bls.n	8008360 <__udivmoddi4+0xb8>
 800834c:	2d00      	cmp	r5, #0
 800834e:	f000 80fd 	beq.w	800854c <__udivmoddi4+0x2a4>
 8008352:	2600      	movs	r6, #0
 8008354:	e9c5 0100 	strd	r0, r1, [r5]
 8008358:	4630      	mov	r0, r6
 800835a:	4631      	mov	r1, r6
 800835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008360:	fab3 f683 	clz	r6, r3
 8008364:	2e00      	cmp	r6, #0
 8008366:	d14b      	bne.n	8008400 <__udivmoddi4+0x158>
 8008368:	428b      	cmp	r3, r1
 800836a:	f0c0 80f2 	bcc.w	8008552 <__udivmoddi4+0x2aa>
 800836e:	4282      	cmp	r2, r0
 8008370:	f240 80ef 	bls.w	8008552 <__udivmoddi4+0x2aa>
 8008374:	4630      	mov	r0, r6
 8008376:	2d00      	cmp	r5, #0
 8008378:	d0e3      	beq.n	8008342 <__udivmoddi4+0x9a>
 800837a:	e9c5 4700 	strd	r4, r7, [r5]
 800837e:	e7e0      	b.n	8008342 <__udivmoddi4+0x9a>
 8008380:	b902      	cbnz	r2, 8008384 <__udivmoddi4+0xdc>
 8008382:	deff      	udf	#255	; 0xff
 8008384:	fab2 f382 	clz	r3, r2
 8008388:	2b00      	cmp	r3, #0
 800838a:	f040 809d 	bne.w	80084c8 <__udivmoddi4+0x220>
 800838e:	1a89      	subs	r1, r1, r2
 8008390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008394:	b297      	uxth	r7, r2
 8008396:	2601      	movs	r6, #1
 8008398:	0c20      	lsrs	r0, r4, #16
 800839a:	fbb1 f2fe 	udiv	r2, r1, lr
 800839e:	fb0e 1112 	mls	r1, lr, r2, r1
 80083a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80083a6:	fb07 f002 	mul.w	r0, r7, r2
 80083aa:	4288      	cmp	r0, r1
 80083ac:	d90f      	bls.n	80083ce <__udivmoddi4+0x126>
 80083ae:	eb1c 0101 	adds.w	r1, ip, r1
 80083b2:	f102 38ff 	add.w	r8, r2, #4294967295
 80083b6:	bf2c      	ite	cs
 80083b8:	f04f 0901 	movcs.w	r9, #1
 80083bc:	f04f 0900 	movcc.w	r9, #0
 80083c0:	4288      	cmp	r0, r1
 80083c2:	d903      	bls.n	80083cc <__udivmoddi4+0x124>
 80083c4:	f1b9 0f00 	cmp.w	r9, #0
 80083c8:	f000 80cf 	beq.w	800856a <__udivmoddi4+0x2c2>
 80083cc:	4642      	mov	r2, r8
 80083ce:	1a09      	subs	r1, r1, r0
 80083d0:	b2a4      	uxth	r4, r4
 80083d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80083d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80083da:	fb00 f707 	mul.w	r7, r0, r7
 80083de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80083e2:	42a7      	cmp	r7, r4
 80083e4:	d908      	bls.n	80083f8 <__udivmoddi4+0x150>
 80083e6:	eb1c 0404 	adds.w	r4, ip, r4
 80083ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80083ee:	d202      	bcs.n	80083f6 <__udivmoddi4+0x14e>
 80083f0:	42a7      	cmp	r7, r4
 80083f2:	f200 80b4 	bhi.w	800855e <__udivmoddi4+0x2b6>
 80083f6:	4608      	mov	r0, r1
 80083f8:	1be4      	subs	r4, r4, r7
 80083fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80083fe:	e79b      	b.n	8008338 <__udivmoddi4+0x90>
 8008400:	f1c6 0720 	rsb	r7, r6, #32
 8008404:	40b3      	lsls	r3, r6
 8008406:	fa01 f406 	lsl.w	r4, r1, r6
 800840a:	fa22 fc07 	lsr.w	ip, r2, r7
 800840e:	40f9      	lsrs	r1, r7
 8008410:	40b2      	lsls	r2, r6
 8008412:	ea4c 0c03 	orr.w	ip, ip, r3
 8008416:	fa20 f307 	lsr.w	r3, r0, r7
 800841a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800841e:	431c      	orrs	r4, r3
 8008420:	fa1f fe8c 	uxth.w	lr, ip
 8008424:	fa00 f306 	lsl.w	r3, r0, r6
 8008428:	0c20      	lsrs	r0, r4, #16
 800842a:	fbb1 f8f9 	udiv	r8, r1, r9
 800842e:	fb09 1118 	mls	r1, r9, r8, r1
 8008432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008436:	fb08 f00e 	mul.w	r0, r8, lr
 800843a:	4288      	cmp	r0, r1
 800843c:	d90f      	bls.n	800845e <__udivmoddi4+0x1b6>
 800843e:	eb1c 0101 	adds.w	r1, ip, r1
 8008442:	f108 3aff 	add.w	sl, r8, #4294967295
 8008446:	bf2c      	ite	cs
 8008448:	f04f 0b01 	movcs.w	fp, #1
 800844c:	f04f 0b00 	movcc.w	fp, #0
 8008450:	4288      	cmp	r0, r1
 8008452:	d903      	bls.n	800845c <__udivmoddi4+0x1b4>
 8008454:	f1bb 0f00 	cmp.w	fp, #0
 8008458:	f000 808d 	beq.w	8008576 <__udivmoddi4+0x2ce>
 800845c:	46d0      	mov	r8, sl
 800845e:	1a09      	subs	r1, r1, r0
 8008460:	b2a4      	uxth	r4, r4
 8008462:	fbb1 f0f9 	udiv	r0, r1, r9
 8008466:	fb09 1110 	mls	r1, r9, r0, r1
 800846a:	fb00 fe0e 	mul.w	lr, r0, lr
 800846e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008472:	458e      	cmp	lr, r1
 8008474:	d907      	bls.n	8008486 <__udivmoddi4+0x1de>
 8008476:	eb1c 0101 	adds.w	r1, ip, r1
 800847a:	f100 34ff 	add.w	r4, r0, #4294967295
 800847e:	d201      	bcs.n	8008484 <__udivmoddi4+0x1dc>
 8008480:	458e      	cmp	lr, r1
 8008482:	d87f      	bhi.n	8008584 <__udivmoddi4+0x2dc>
 8008484:	4620      	mov	r0, r4
 8008486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800848a:	eba1 010e 	sub.w	r1, r1, lr
 800848e:	fba0 9802 	umull	r9, r8, r0, r2
 8008492:	4541      	cmp	r1, r8
 8008494:	464c      	mov	r4, r9
 8008496:	46c6      	mov	lr, r8
 8008498:	d302      	bcc.n	80084a0 <__udivmoddi4+0x1f8>
 800849a:	d106      	bne.n	80084aa <__udivmoddi4+0x202>
 800849c:	454b      	cmp	r3, r9
 800849e:	d204      	bcs.n	80084aa <__udivmoddi4+0x202>
 80084a0:	3801      	subs	r0, #1
 80084a2:	ebb9 0402 	subs.w	r4, r9, r2
 80084a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80084aa:	2d00      	cmp	r5, #0
 80084ac:	d070      	beq.n	8008590 <__udivmoddi4+0x2e8>
 80084ae:	1b1a      	subs	r2, r3, r4
 80084b0:	eb61 010e 	sbc.w	r1, r1, lr
 80084b4:	fa22 f306 	lsr.w	r3, r2, r6
 80084b8:	fa01 f707 	lsl.w	r7, r1, r7
 80084bc:	40f1      	lsrs	r1, r6
 80084be:	2600      	movs	r6, #0
 80084c0:	431f      	orrs	r7, r3
 80084c2:	e9c5 7100 	strd	r7, r1, [r5]
 80084c6:	e73c      	b.n	8008342 <__udivmoddi4+0x9a>
 80084c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80084cc:	f1c3 0020 	rsb	r0, r3, #32
 80084d0:	fa01 f203 	lsl.w	r2, r1, r3
 80084d4:	fa21 f600 	lsr.w	r6, r1, r0
 80084d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80084dc:	fa24 f100 	lsr.w	r1, r4, r0
 80084e0:	fa1f f78c 	uxth.w	r7, ip
 80084e4:	409c      	lsls	r4, r3
 80084e6:	4311      	orrs	r1, r2
 80084e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80084ec:	0c0a      	lsrs	r2, r1, #16
 80084ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80084f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80084f6:	fb00 f607 	mul.w	r6, r0, r7
 80084fa:	4296      	cmp	r6, r2
 80084fc:	d90e      	bls.n	800851c <__udivmoddi4+0x274>
 80084fe:	eb1c 0202 	adds.w	r2, ip, r2
 8008502:	f100 38ff 	add.w	r8, r0, #4294967295
 8008506:	bf2c      	ite	cs
 8008508:	f04f 0901 	movcs.w	r9, #1
 800850c:	f04f 0900 	movcc.w	r9, #0
 8008510:	4296      	cmp	r6, r2
 8008512:	d902      	bls.n	800851a <__udivmoddi4+0x272>
 8008514:	f1b9 0f00 	cmp.w	r9, #0
 8008518:	d031      	beq.n	800857e <__udivmoddi4+0x2d6>
 800851a:	4640      	mov	r0, r8
 800851c:	1b92      	subs	r2, r2, r6
 800851e:	b289      	uxth	r1, r1
 8008520:	fbb2 f6fe 	udiv	r6, r2, lr
 8008524:	fb0e 2216 	mls	r2, lr, r6, r2
 8008528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800852c:	fb06 f207 	mul.w	r2, r6, r7
 8008530:	428a      	cmp	r2, r1
 8008532:	d907      	bls.n	8008544 <__udivmoddi4+0x29c>
 8008534:	eb1c 0101 	adds.w	r1, ip, r1
 8008538:	f106 38ff 	add.w	r8, r6, #4294967295
 800853c:	d201      	bcs.n	8008542 <__udivmoddi4+0x29a>
 800853e:	428a      	cmp	r2, r1
 8008540:	d823      	bhi.n	800858a <__udivmoddi4+0x2e2>
 8008542:	4646      	mov	r6, r8
 8008544:	1a89      	subs	r1, r1, r2
 8008546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800854a:	e725      	b.n	8008398 <__udivmoddi4+0xf0>
 800854c:	462e      	mov	r6, r5
 800854e:	4628      	mov	r0, r5
 8008550:	e6f7      	b.n	8008342 <__udivmoddi4+0x9a>
 8008552:	1a84      	subs	r4, r0, r2
 8008554:	eb61 0303 	sbc.w	r3, r1, r3
 8008558:	2001      	movs	r0, #1
 800855a:	461f      	mov	r7, r3
 800855c:	e70b      	b.n	8008376 <__udivmoddi4+0xce>
 800855e:	4464      	add	r4, ip
 8008560:	3802      	subs	r0, #2
 8008562:	e749      	b.n	80083f8 <__udivmoddi4+0x150>
 8008564:	4464      	add	r4, ip
 8008566:	3802      	subs	r0, #2
 8008568:	e6e1      	b.n	800832e <__udivmoddi4+0x86>
 800856a:	3a02      	subs	r2, #2
 800856c:	4461      	add	r1, ip
 800856e:	e72e      	b.n	80083ce <__udivmoddi4+0x126>
 8008570:	3e02      	subs	r6, #2
 8008572:	4462      	add	r2, ip
 8008574:	e6c6      	b.n	8008304 <__udivmoddi4+0x5c>
 8008576:	f1a8 0802 	sub.w	r8, r8, #2
 800857a:	4461      	add	r1, ip
 800857c:	e76f      	b.n	800845e <__udivmoddi4+0x1b6>
 800857e:	3802      	subs	r0, #2
 8008580:	4462      	add	r2, ip
 8008582:	e7cb      	b.n	800851c <__udivmoddi4+0x274>
 8008584:	3802      	subs	r0, #2
 8008586:	4461      	add	r1, ip
 8008588:	e77d      	b.n	8008486 <__udivmoddi4+0x1de>
 800858a:	3e02      	subs	r6, #2
 800858c:	4461      	add	r1, ip
 800858e:	e7d9      	b.n	8008544 <__udivmoddi4+0x29c>
 8008590:	462e      	mov	r6, r5
 8008592:	e6d6      	b.n	8008342 <__udivmoddi4+0x9a>

08008594 <__aeabi_idiv0>:
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop

08008598 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Override _write() function for printf
int _write(int file, char *ptr, int len) {
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t *)ptr, len, HAL_MAX_DELAY); // Transmit data via UART
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	f04f 33ff 	mov.w	r3, #4294967295
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	4804      	ldr	r0, [pc, #16]	; (80085c0 <_write+0x28>)
 80085b0:	f004 fe50 	bl	800d254 <HAL_UART_Transmit>
    return len;
 80085b4:	687b      	ldr	r3, [r7, #4]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	2000008c 	.word	0x2000008c

080085c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80085c8:	f000 fa48 	bl	8008a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80085cc:	f000 f80e 	bl	80085ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80085d0:	f000 f8a2 	bl	8008718 <MX_GPIO_Init>
  MX_UART4_Init();
 80085d4:	f000 f854 	bl	8008680 <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Running the application code!\r\n");
 80085d8:	4803      	ldr	r0, [pc, #12]	; (80085e8 <main+0x24>)
 80085da:	f005 fc37 	bl	800de4c <puts>
	  HAL_Delay(2000);
 80085de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80085e2:	f000 fabf 	bl	8008b64 <HAL_Delay>
	  printf("Running the application code!\r\n");
 80085e6:	e7f7      	b.n	80085d8 <main+0x14>
 80085e8:	0800e780 	.word	0x0800e780

080085ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b09e      	sub	sp, #120	; 0x78
 80085f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80085f2:	f107 0318 	add.w	r3, r7, #24
 80085f6:	2260      	movs	r2, #96	; 0x60
 80085f8:	2100      	movs	r1, #0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f005 fbb0 	bl	800dd60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008600:	463b      	mov	r3, r7
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	605a      	str	r2, [r3, #4]
 8008608:	609a      	str	r2, [r3, #8]
 800860a:	60da      	str	r2, [r3, #12]
 800860c:	611a      	str	r2, [r3, #16]
 800860e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8008610:	2000      	movs	r0, #0
 8008612:	f000 fd87 	bl	8009124 <HAL_PWREx_ControlVoltageScaling>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800861c:	f000 f896 	bl	800874c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008620:	2310      	movs	r3, #16
 8008622:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008624:	2301      	movs	r3, #1
 8008626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8008628:	2310      	movs	r3, #16
 800862a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800862c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008630:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008632:	2300      	movs	r3, #0
 8008634:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008636:	f107 0318 	add.w	r3, r7, #24
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fdfe 	bl	800923c <HAL_RCC_OscConfig>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8008646:	f000 f881 	bl	800874c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800864a:	231f      	movs	r3, #31
 800864c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800864e:	2300      	movs	r3, #0
 8008650:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008652:	2300      	movs	r3, #0
 8008654:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008656:	2300      	movs	r3, #0
 8008658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800865a:	2300      	movs	r3, #0
 800865c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800865e:	2300      	movs	r3, #0
 8008660:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008662:	463b      	mov	r3, r7
 8008664:	2100      	movs	r1, #0
 8008666:	4618      	mov	r0, r3
 8008668:	f001 fcc4 	bl	8009ff4 <HAL_RCC_ClockConfig>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8008672:	f000 f86b 	bl	800874c <Error_Handler>
  }
}
 8008676:	bf00      	nop
 8008678:	3778      	adds	r7, #120	; 0x78
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8008684:	4b22      	ldr	r3, [pc, #136]	; (8008710 <MX_UART4_Init+0x90>)
 8008686:	4a23      	ldr	r2, [pc, #140]	; (8008714 <MX_UART4_Init+0x94>)
 8008688:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800868a:	4b21      	ldr	r3, [pc, #132]	; (8008710 <MX_UART4_Init+0x90>)
 800868c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008690:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008692:	4b1f      	ldr	r3, [pc, #124]	; (8008710 <MX_UART4_Init+0x90>)
 8008694:	2200      	movs	r2, #0
 8008696:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008698:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <MX_UART4_Init+0x90>)
 800869a:	2200      	movs	r2, #0
 800869c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800869e:	4b1c      	ldr	r3, [pc, #112]	; (8008710 <MX_UART4_Init+0x90>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80086a4:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <MX_UART4_Init+0x90>)
 80086a6:	220c      	movs	r2, #12
 80086a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80086aa:	4b19      	ldr	r3, [pc, #100]	; (8008710 <MX_UART4_Init+0x90>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80086b0:	4b17      	ldr	r3, [pc, #92]	; (8008710 <MX_UART4_Init+0x90>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80086b6:	4b16      	ldr	r3, [pc, #88]	; (8008710 <MX_UART4_Init+0x90>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80086bc:	4b14      	ldr	r3, [pc, #80]	; (8008710 <MX_UART4_Init+0x90>)
 80086be:	2200      	movs	r2, #0
 80086c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80086c2:	4b13      	ldr	r3, [pc, #76]	; (8008710 <MX_UART4_Init+0x90>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80086c8:	4811      	ldr	r0, [pc, #68]	; (8008710 <MX_UART4_Init+0x90>)
 80086ca:	f004 fd73 	bl	800d1b4 <HAL_UART_Init>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80086d4:	f000 f83a 	bl	800874c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80086d8:	2100      	movs	r1, #0
 80086da:	480d      	ldr	r0, [pc, #52]	; (8008710 <MX_UART4_Init+0x90>)
 80086dc:	f005 fa4c 	bl	800db78 <HAL_UARTEx_SetTxFifoThreshold>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80086e6:	f000 f831 	bl	800874c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80086ea:	2100      	movs	r1, #0
 80086ec:	4808      	ldr	r0, [pc, #32]	; (8008710 <MX_UART4_Init+0x90>)
 80086ee:	f005 fa81 	bl	800dbf4 <HAL_UARTEx_SetRxFifoThreshold>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80086f8:	f000 f828 	bl	800874c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80086fc:	4804      	ldr	r0, [pc, #16]	; (8008710 <MX_UART4_Init+0x90>)
 80086fe:	f005 fa02 	bl	800db06 <HAL_UARTEx_DisableFifoMode>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8008708:	f000 f820 	bl	800874c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800870c:	bf00      	nop
 800870e:	bd80      	pop	{r7, pc}
 8008710:	2000008c 	.word	0x2000008c
 8008714:	40004c00 	.word	0x40004c00

08008718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800871e:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <MX_GPIO_Init+0x30>)
 8008720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008724:	4a08      	ldr	r2, [pc, #32]	; (8008748 <MX_GPIO_Init+0x30>)
 8008726:	f043 0304 	orr.w	r3, r3, #4
 800872a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800872e:	4b06      	ldr	r3, [pc, #24]	; (8008748 <MX_GPIO_Init+0x30>)
 8008730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	607b      	str	r3, [r7, #4]
 800873a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	46020c00 	.word	0x46020c00

0800874c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008750:	b672      	cpsid	i
}
 8008752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008754:	e7fe      	b.n	8008754 <Error_Handler+0x8>

08008756 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008756:	b480      	push	{r7}
 8008758:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800875a:	bf00      	nop
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b0bc      	sub	sp, #240	; 0xf0
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800876c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008770:	2200      	movs	r2, #0
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	605a      	str	r2, [r3, #4]
 8008776:	609a      	str	r2, [r3, #8]
 8008778:	60da      	str	r2, [r3, #12]
 800877a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800877c:	f107 0310 	add.w	r3, r7, #16
 8008780:	22c8      	movs	r2, #200	; 0xc8
 8008782:	2100      	movs	r1, #0
 8008784:	4618      	mov	r0, r3
 8008786:	f005 faeb 	bl	800dd60 <memset>
  if(huart->Instance==UART4)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a26      	ldr	r2, [pc, #152]	; (8008828 <HAL_UART_MspInit+0xc4>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d145      	bne.n	8008820 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8008794:	f04f 0208 	mov.w	r2, #8
 8008798:	f04f 0300 	mov.w	r3, #0
 800879c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80087a0:	2300      	movs	r3, #0
 80087a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80087a4:	f107 0310 	add.w	r3, r7, #16
 80087a8:	4618      	mov	r0, r3
 80087aa:	f001 fff9 	bl	800a7a0 <HAL_RCCEx_PeriphCLKConfig>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80087b4:	f7ff ffca 	bl	800874c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80087b8:	4b1c      	ldr	r3, [pc, #112]	; (800882c <HAL_UART_MspInit+0xc8>)
 80087ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087be:	4a1b      	ldr	r2, [pc, #108]	; (800882c <HAL_UART_MspInit+0xc8>)
 80087c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087c4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80087c8:	4b18      	ldr	r3, [pc, #96]	; (800882c <HAL_UART_MspInit+0xc8>)
 80087ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087d6:	4b15      	ldr	r3, [pc, #84]	; (800882c <HAL_UART_MspInit+0xc8>)
 80087d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087dc:	4a13      	ldr	r2, [pc, #76]	; (800882c <HAL_UART_MspInit+0xc8>)
 80087de:	f043 0304 	orr.w	r3, r3, #4
 80087e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80087e6:	4b11      	ldr	r3, [pc, #68]	; (800882c <HAL_UART_MspInit+0xc8>)
 80087e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	60bb      	str	r3, [r7, #8]
 80087f2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80087f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80087f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087fc:	2302      	movs	r3, #2
 80087fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008802:	2300      	movs	r3, #0
 8008804:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008808:	2300      	movs	r3, #0
 800880a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800880e:	2308      	movs	r3, #8
 8008810:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008814:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008818:	4619      	mov	r1, r3
 800881a:	4805      	ldr	r0, [pc, #20]	; (8008830 <HAL_UART_MspInit+0xcc>)
 800881c:	f000 faaa 	bl	8008d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8008820:	bf00      	nop
 8008822:	37f0      	adds	r7, #240	; 0xf0
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	40004c00 	.word	0x40004c00
 800882c:	46020c00 	.word	0x46020c00
 8008830:	42020800 	.word	0x42020800

08008834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008834:	b480      	push	{r7}
 8008836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008838:	e7fe      	b.n	8008838 <NMI_Handler+0x4>

0800883a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800883a:	b480      	push	{r7}
 800883c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800883e:	e7fe      	b.n	800883e <HardFault_Handler+0x4>

08008840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008840:	b480      	push	{r7}
 8008842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008844:	e7fe      	b.n	8008844 <MemManage_Handler+0x4>

08008846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008846:	b480      	push	{r7}
 8008848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800884a:	e7fe      	b.n	800884a <BusFault_Handler+0x4>

0800884c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008850:	e7fe      	b.n	8008850 <UsageFault_Handler+0x4>

08008852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008852:	b480      	push	{r7}
 8008854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008856:	bf00      	nop
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800886e:	b480      	push	{r7}
 8008870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008872:	bf00      	nop
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008880:	f000 f950 	bl	8008b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008884:	bf00      	nop
 8008886:	bd80      	pop	{r7, pc}

08008888 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008894:	2300      	movs	r3, #0
 8008896:	617b      	str	r3, [r7, #20]
 8008898:	e00a      	b.n	80088b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800889a:	e000      	b.n	800889e <_read+0x16>
 800889c:	bf00      	nop
 800889e:	4601      	mov	r1, r0
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	60ba      	str	r2, [r7, #8]
 80088a6:	b2ca      	uxtb	r2, r1
 80088a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	3301      	adds	r3, #1
 80088ae:	617b      	str	r3, [r7, #20]
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	dbf0      	blt.n	800889a <_read+0x12>
  }

  return len;
 80088b8:	687b      	ldr	r3, [r7, #4]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b083      	sub	sp, #12
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80088ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80088da:	b480      	push	{r7}
 80088dc:	b083      	sub	sp, #12
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80088ea:	605a      	str	r2, [r3, #4]
  return 0;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <_isatty>:

int _isatty(int file)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008902:	2301      	movs	r3, #1
}
 8008904:	4618      	mov	r0, r3
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
	...

0800892c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008934:	4a14      	ldr	r2, [pc, #80]	; (8008988 <_sbrk+0x5c>)
 8008936:	4b15      	ldr	r3, [pc, #84]	; (800898c <_sbrk+0x60>)
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008940:	4b13      	ldr	r3, [pc, #76]	; (8008990 <_sbrk+0x64>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d102      	bne.n	800894e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008948:	4b11      	ldr	r3, [pc, #68]	; (8008990 <_sbrk+0x64>)
 800894a:	4a12      	ldr	r2, [pc, #72]	; (8008994 <_sbrk+0x68>)
 800894c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800894e:	4b10      	ldr	r3, [pc, #64]	; (8008990 <_sbrk+0x64>)
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4413      	add	r3, r2
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	429a      	cmp	r2, r3
 800895a:	d207      	bcs.n	800896c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800895c:	f005 f9d6 	bl	800dd0c <__errno>
 8008960:	4603      	mov	r3, r0
 8008962:	220c      	movs	r2, #12
 8008964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008966:	f04f 33ff 	mov.w	r3, #4294967295
 800896a:	e009      	b.n	8008980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800896c:	4b08      	ldr	r3, [pc, #32]	; (8008990 <_sbrk+0x64>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008972:	4b07      	ldr	r3, [pc, #28]	; (8008990 <_sbrk+0x64>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4413      	add	r3, r2
 800897a:	4a05      	ldr	r2, [pc, #20]	; (8008990 <_sbrk+0x64>)
 800897c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800897e:	68fb      	ldr	r3, [r7, #12]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3718      	adds	r7, #24
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	200c0000 	.word	0x200c0000
 800898c:	00000400 	.word	0x00000400
 8008990:	20000120 	.word	0x20000120
 8008994:	20000138 	.word	0x20000138

08008998 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008998:	b480      	push	{r7}
 800899a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800899c:	4b17      	ldr	r3, [pc, #92]	; (80089fc <SystemInit+0x64>)
 800899e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089a2:	4a16      	ldr	r2, [pc, #88]	; (80089fc <SystemInit+0x64>)
 80089a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80089ac:	4b14      	ldr	r3, [pc, #80]	; (8008a00 <SystemInit+0x68>)
 80089ae:	2201      	movs	r2, #1
 80089b0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80089b2:	4b13      	ldr	r3, [pc, #76]	; (8008a00 <SystemInit+0x68>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80089b8:	4b11      	ldr	r3, [pc, #68]	; (8008a00 <SystemInit+0x68>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80089be:	4b10      	ldr	r3, [pc, #64]	; (8008a00 <SystemInit+0x68>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80089c4:	4b0e      	ldr	r3, [pc, #56]	; (8008a00 <SystemInit+0x68>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a0d      	ldr	r2, [pc, #52]	; (8008a00 <SystemInit+0x68>)
 80089ca:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80089ce:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80089d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80089d4:	4b0a      	ldr	r3, [pc, #40]	; (8008a00 <SystemInit+0x68>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80089da:	4b09      	ldr	r3, [pc, #36]	; (8008a00 <SystemInit+0x68>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a08      	ldr	r2, [pc, #32]	; (8008a00 <SystemInit+0x68>)
 80089e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80089e6:	4b06      	ldr	r3, [pc, #24]	; (8008a00 <SystemInit+0x68>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80089ec:	4b03      	ldr	r3, [pc, #12]	; (80089fc <SystemInit+0x64>)
 80089ee:	4a05      	ldr	r2, [pc, #20]	; (8008a04 <SystemInit+0x6c>)
 80089f0:	609a      	str	r2, [r3, #8]
  #endif
}
 80089f2:	bf00      	nop
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	e000ed00 	.word	0xe000ed00
 8008a00:	46020c00 	.word	0x46020c00
 8008a04:	08008000 	.word	0x08008000

08008a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8008a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a40 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008a0c:	f7ff ffc4 	bl	8008998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008a10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008a12:	e003      	b.n	8008a1c <LoopCopyDataInit>

08008a14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008a14:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008a16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008a18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008a1a:	3104      	adds	r1, #4

08008a1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008a1c:	480a      	ldr	r0, [pc, #40]	; (8008a48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008a1e:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8008a20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008a22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008a24:	d3f6      	bcc.n	8008a14 <CopyDataInit>
	ldr	r2, =_sbss
 8008a26:	4a0a      	ldr	r2, [pc, #40]	; (8008a50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008a28:	e002      	b.n	8008a30 <LoopFillZerobss>

08008a2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008a2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008a2c:	f842 3b04 	str.w	r3, [r2], #4

08008a30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008a30:	4b08      	ldr	r3, [pc, #32]	; (8008a54 <LoopForever+0x16>)
	cmp	r2, r3
 8008a32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008a34:	d3f9      	bcc.n	8008a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008a36:	f005 f96f 	bl	800dd18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008a3a:	f7ff fdc3 	bl	80085c4 <main>

08008a3e <LoopForever>:

LoopForever:
    b LoopForever
 8008a3e:	e7fe      	b.n	8008a3e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8008a40:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8008a44:	0800e914 	.word	0x0800e914
	ldr	r0, =_sdata
 8008a48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008a4c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8008a50:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8008a54:	20000138 	.word	0x20000138

08008a58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008a58:	e7fe      	b.n	8008a58 <ADC1_IRQHandler>
	...

08008a5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008a60:	4b11      	ldr	r3, [pc, #68]	; (8008aa8 <HAL_Init+0x4c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a10      	ldr	r2, [pc, #64]	; (8008aa8 <HAL_Init+0x4c>)
 8008a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a6c:	2003      	movs	r0, #3
 8008a6e:	f000 f94f 	bl	8008d10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008a72:	f001 fcb1 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 8008a76:	4602      	mov	r2, r0
 8008a78:	4b0c      	ldr	r3, [pc, #48]	; (8008aac <HAL_Init+0x50>)
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	490b      	ldr	r1, [pc, #44]	; (8008ab0 <HAL_Init+0x54>)
 8008a82:	5ccb      	ldrb	r3, [r1, r3]
 8008a84:	fa22 f303 	lsr.w	r3, r2, r3
 8008a88:	4a0a      	ldr	r2, [pc, #40]	; (8008ab4 <HAL_Init+0x58>)
 8008a8a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008a8c:	200f      	movs	r0, #15
 8008a8e:	f000 f813 	bl	8008ab8 <HAL_InitTick>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e002      	b.n	8008aa2 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008a9c:	f7ff fe5b 	bl	8008756 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	40022000 	.word	0x40022000
 8008aac:	46020c00 	.word	0x46020c00
 8008ab0:	0800e7a0 	.word	0x0800e7a0
 8008ab4:	20000000 	.word	0x20000000

08008ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8008ac0:	4b15      	ldr	r3, [pc, #84]	; (8008b18 <HAL_InitTick+0x60>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e021      	b.n	8008b10 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008acc:	4b13      	ldr	r3, [pc, #76]	; (8008b1c <HAL_InitTick+0x64>)
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	4b11      	ldr	r3, [pc, #68]	; (8008b18 <HAL_InitTick+0x60>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 f939 	bl	8008d5a <HAL_SYSTICK_Config>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e00e      	b.n	8008b10 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b0f      	cmp	r3, #15
 8008af6:	d80a      	bhi.n	8008b0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008af8:	2200      	movs	r2, #0
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295
 8008b00:	f000 f911 	bl	8008d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008b04:	4a06      	ldr	r2, [pc, #24]	; (8008b20 <HAL_InitTick+0x68>)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	e000      	b.n	8008b10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	20000008 	.word	0x20000008
 8008b1c:	20000000 	.word	0x20000000
 8008b20:	20000004 	.word	0x20000004

08008b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008b28:	4b06      	ldr	r3, [pc, #24]	; (8008b44 <HAL_IncTick+0x20>)
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <HAL_IncTick+0x24>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4413      	add	r3, r2
 8008b34:	4a04      	ldr	r2, [pc, #16]	; (8008b48 <HAL_IncTick+0x24>)
 8008b36:	6013      	str	r3, [r2, #0]
}
 8008b38:	bf00      	nop
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20000008 	.word	0x20000008
 8008b48:	20000124 	.word	0x20000124

08008b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8008b50:	4b03      	ldr	r3, [pc, #12]	; (8008b60 <HAL_GetTick+0x14>)
 8008b52:	681b      	ldr	r3, [r3, #0]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	20000124 	.word	0x20000124

08008b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008b6c:	f7ff ffee 	bl	8008b4c <HAL_GetTick>
 8008b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7c:	d005      	beq.n	8008b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008b7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <HAL_Delay+0x44>)
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4413      	add	r3, r2
 8008b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008b8a:	bf00      	nop
 8008b8c:	f7ff ffde 	bl	8008b4c <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d8f7      	bhi.n	8008b8c <HAL_Delay+0x28>
  {
  }
}
 8008b9c:	bf00      	nop
 8008b9e:	bf00      	nop
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000008 	.word	0x20000008

08008bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008bbc:	4b0c      	ldr	r3, [pc, #48]	; (8008bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008bc8:	4013      	ands	r3, r2
 8008bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008bde:	4a04      	ldr	r2, [pc, #16]	; (8008bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	60d3      	str	r3, [r2, #12]
}
 8008be4:	bf00      	nop
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	e000ed00 	.word	0xe000ed00

08008bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008bf8:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <__NVIC_GetPriorityGrouping+0x18>)
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	0a1b      	lsrs	r3, r3, #8
 8008bfe:	f003 0307 	and.w	r3, r3, #7
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	e000ed00 	.word	0xe000ed00

08008c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	6039      	str	r1, [r7, #0]
 8008c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	db0a      	blt.n	8008c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	490c      	ldr	r1, [pc, #48]	; (8008c5c <__NVIC_SetPriority+0x4c>)
 8008c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c2e:	0112      	lsls	r2, r2, #4
 8008c30:	b2d2      	uxtb	r2, r2
 8008c32:	440b      	add	r3, r1
 8008c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008c38:	e00a      	b.n	8008c50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	4908      	ldr	r1, [pc, #32]	; (8008c60 <__NVIC_SetPriority+0x50>)
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	f003 030f 	and.w	r3, r3, #15
 8008c46:	3b04      	subs	r3, #4
 8008c48:	0112      	lsls	r2, r2, #4
 8008c4a:	b2d2      	uxtb	r2, r2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	761a      	strb	r2, [r3, #24]
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	e000e100 	.word	0xe000e100
 8008c60:	e000ed00 	.word	0xe000ed00

08008c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b089      	sub	sp, #36	; 0x24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	f1c3 0307 	rsb	r3, r3, #7
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	bf28      	it	cs
 8008c82:	2304      	movcs	r3, #4
 8008c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	3304      	adds	r3, #4
 8008c8a:	2b06      	cmp	r3, #6
 8008c8c:	d902      	bls.n	8008c94 <NVIC_EncodePriority+0x30>
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	3b03      	subs	r3, #3
 8008c92:	e000      	b.n	8008c96 <NVIC_EncodePriority+0x32>
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c98:	f04f 32ff 	mov.w	r2, #4294967295
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	43da      	mvns	r2, r3
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	401a      	ands	r2, r3
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008cac:	f04f 31ff 	mov.w	r1, #4294967295
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb6:	43d9      	mvns	r1, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cbc:	4313      	orrs	r3, r2
         );
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3724      	adds	r7, #36	; 0x24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cdc:	d301      	bcc.n	8008ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e00f      	b.n	8008d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ce2:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <SysTick_Config+0x40>)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008cea:	210f      	movs	r1, #15
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	f7ff ff8e 	bl	8008c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008cf4:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <SysTick_Config+0x40>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008cfa:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <SysTick_Config+0x40>)
 8008cfc:	2207      	movs	r2, #7
 8008cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	e000e010 	.word	0xe000e010

08008d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff ff47 	bl	8008bac <__NVIC_SetPriorityGrouping>
}
 8008d1e:	bf00      	nop
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b086      	sub	sp, #24
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	607a      	str	r2, [r7, #4]
 8008d32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008d34:	f7ff ff5e 	bl	8008bf4 <__NVIC_GetPriorityGrouping>
 8008d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	68b9      	ldr	r1, [r7, #8]
 8008d3e:	6978      	ldr	r0, [r7, #20]
 8008d40:	f7ff ff90 	bl	8008c64 <NVIC_EncodePriority>
 8008d44:	4602      	mov	r2, r0
 8008d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff ff5f 	bl	8008c10 <__NVIC_SetPriority>
}
 8008d52:	bf00      	nop
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff ffb2 	bl	8008ccc <SysTick_Config>
 8008d68:	4603      	mov	r3, r0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b089      	sub	sp, #36	; 0x24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8008d86:	e1ba      	b.n	80090fe <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	fa01 f303 	lsl.w	r3, r1, r3
 8008d94:	4013      	ands	r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 81aa 	beq.w	80090f8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a55      	ldr	r2, [pc, #340]	; (8008efc <HAL_GPIO_Init+0x188>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d15d      	bne.n	8008e68 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8008db2:	2201      	movs	r2, #1
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dba:	43db      	mvns	r3, r3
 8008dbc:	69fa      	ldr	r2, [r7, #28]
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f003 0201 	and.w	r2, r3, #1
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8008ddc:	4a48      	ldr	r2, [pc, #288]	; (8008f00 <HAL_GPIO_Init+0x18c>)
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008de4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8008de6:	4a46      	ldr	r2, [pc, #280]	; (8008f00 <HAL_GPIO_Init+0x18c>)
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	4413      	add	r3, r2
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	08da      	lsrs	r2, r3, #3
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	3208      	adds	r2, #8
 8008dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dfe:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	220f      	movs	r2, #15
 8008e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0e:	43db      	mvns	r3, r3
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	4013      	ands	r3, r2
 8008e14:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	f003 0307 	and.w	r3, r3, #7
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	220b      	movs	r2, #11
 8008e20:	fa02 f303 	lsl.w	r3, r2, r3
 8008e24:	69fa      	ldr	r2, [r7, #28]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	08da      	lsrs	r2, r3, #3
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	3208      	adds	r2, #8
 8008e32:	69f9      	ldr	r1, [r7, #28]
 8008e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	2203      	movs	r2, #3
 8008e44:	fa02 f303 	lsl.w	r3, r2, r3
 8008e48:	43db      	mvns	r3, r3
 8008e4a:	69fa      	ldr	r2, [r7, #28]
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	2202      	movs	r2, #2
 8008e56:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5a:	69fa      	ldr	r2, [r7, #28]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	69fa      	ldr	r2, [r7, #28]
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	e067      	b.n	8008f38 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d003      	beq.n	8008e78 <HAL_GPIO_Init+0x104>
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	2b12      	cmp	r3, #18
 8008e76:	d145      	bne.n	8008f04 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	08da      	lsrs	r2, r3, #3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3208      	adds	r2, #8
 8008e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	f003 0307 	and.w	r3, r3, #7
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	220f      	movs	r2, #15
 8008e90:	fa02 f303 	lsl.w	r3, r2, r3
 8008e94:	43db      	mvns	r3, r3
 8008e96:	69fa      	ldr	r2, [r7, #28]
 8008e98:	4013      	ands	r3, r2
 8008e9a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	f003 020f 	and.w	r2, r3, #15
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	08da      	lsrs	r2, r3, #3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3208      	adds	r2, #8
 8008ebe:	69f9      	ldr	r1, [r7, #28]
 8008ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	2203      	movs	r2, #3
 8008ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed4:	43db      	mvns	r3, r3
 8008ed6:	69fa      	ldr	r2, [r7, #28]
 8008ed8:	4013      	ands	r3, r2
 8008eda:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f003 0203 	and.w	r2, r3, #3
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	005b      	lsls	r3, r3, #1
 8008ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8008eec:	69fa      	ldr	r2, [r7, #28]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	69fa      	ldr	r2, [r7, #28]
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	e01e      	b.n	8008f38 <HAL_GPIO_Init+0x1c4>
 8008efa:	bf00      	nop
 8008efc:	46020000 	.word	0x46020000
 8008f00:	0800e7f8 	.word	0x0800e7f8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	2203      	movs	r2, #3
 8008f10:	fa02 f303 	lsl.w	r3, r2, r3
 8008f14:	43db      	mvns	r3, r3
 8008f16:	69fa      	ldr	r2, [r7, #28]
 8008f18:	4013      	ands	r3, r2
 8008f1a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	f003 0203 	and.w	r2, r3, #3
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2c:	69fa      	ldr	r2, [r7, #28]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	69fa      	ldr	r2, [r7, #28]
 8008f36:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d00b      	beq.n	8008f58 <HAL_GPIO_Init+0x1e4>
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d007      	beq.n	8008f58 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f4c:	2b11      	cmp	r3, #17
 8008f4e:	d003      	beq.n	8008f58 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	2b12      	cmp	r3, #18
 8008f56:	d130      	bne.n	8008fba <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	2203      	movs	r2, #3
 8008f64:	fa02 f303 	lsl.w	r3, r2, r3
 8008f68:	43db      	mvns	r3, r3
 8008f6a:	69fa      	ldr	r2, [r7, #28]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	68da      	ldr	r2, [r3, #12]
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	69fa      	ldr	r2, [r7, #28]
 8008f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8008f8e:	2201      	movs	r2, #1
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	fa02 f303 	lsl.w	r3, r2, r3
 8008f96:	43db      	mvns	r3, r3
 8008f98:	69fa      	ldr	r2, [r7, #28]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	091b      	lsrs	r3, r3, #4
 8008fa4:	f003 0201 	and.w	r2, r3, #1
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	fa02 f303 	lsl.w	r3, r2, r3
 8008fae:	69fa      	ldr	r2, [r7, #28]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d017      	beq.n	8008ff2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	2203      	movs	r2, #3
 8008fce:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd2:	43db      	mvns	r3, r3
 8008fd4:	69fa      	ldr	r2, [r7, #28]
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	689a      	ldr	r2, [r3, #8]
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe6:	69fa      	ldr	r2, [r7, #28]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d07c      	beq.n	80090f8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8008ffe:	4a47      	ldr	r2, [pc, #284]	; (800911c <HAL_GPIO_Init+0x3a8>)
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	089b      	lsrs	r3, r3, #2
 8009004:	3318      	adds	r3, #24
 8009006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800900a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f003 0303 	and.w	r3, r3, #3
 8009012:	00db      	lsls	r3, r3, #3
 8009014:	220f      	movs	r2, #15
 8009016:	fa02 f303 	lsl.w	r3, r2, r3
 800901a:	43db      	mvns	r3, r3
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	4013      	ands	r3, r2
 8009020:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	0a9a      	lsrs	r2, r3, #10
 8009026:	4b3e      	ldr	r3, [pc, #248]	; (8009120 <HAL_GPIO_Init+0x3ac>)
 8009028:	4013      	ands	r3, r2
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	f002 0203 	and.w	r2, r2, #3
 8009030:	00d2      	lsls	r2, r2, #3
 8009032:	4093      	lsls	r3, r2
 8009034:	69fa      	ldr	r2, [r7, #28]
 8009036:	4313      	orrs	r3, r2
 8009038:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800903a:	4938      	ldr	r1, [pc, #224]	; (800911c <HAL_GPIO_Init+0x3a8>)
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	089b      	lsrs	r3, r3, #2
 8009040:	3318      	adds	r3, #24
 8009042:	69fa      	ldr	r2, [r7, #28]
 8009044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8009048:	4b34      	ldr	r3, [pc, #208]	; (800911c <HAL_GPIO_Init+0x3a8>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	43db      	mvns	r3, r3
 8009052:	69fa      	ldr	r2, [r7, #28]
 8009054:	4013      	ands	r3, r2
 8009056:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8009064:	69fa      	ldr	r2, [r7, #28]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4313      	orrs	r3, r2
 800906a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800906c:	4a2b      	ldr	r2, [pc, #172]	; (800911c <HAL_GPIO_Init+0x3a8>)
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8009072:	4b2a      	ldr	r3, [pc, #168]	; (800911c <HAL_GPIO_Init+0x3a8>)
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	43db      	mvns	r3, r3
 800907c:	69fa      	ldr	r2, [r7, #28]
 800907e:	4013      	ands	r3, r2
 8009080:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d003      	beq.n	8009096 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800908e:	69fa      	ldr	r2, [r7, #28]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4313      	orrs	r3, r2
 8009094:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8009096:	4a21      	ldr	r2, [pc, #132]	; (800911c <HAL_GPIO_Init+0x3a8>)
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800909c:	4b1f      	ldr	r3, [pc, #124]	; (800911c <HAL_GPIO_Init+0x3a8>)
 800909e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	43db      	mvns	r3, r3
 80090a8:	69fa      	ldr	r2, [r7, #28]
 80090aa:	4013      	ands	r3, r2
 80090ac:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4313      	orrs	r3, r2
 80090c0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80090c2:	4a16      	ldr	r2, [pc, #88]	; (800911c <HAL_GPIO_Init+0x3a8>)
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80090ca:	4b14      	ldr	r3, [pc, #80]	; (800911c <HAL_GPIO_Init+0x3a8>)
 80090cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	43db      	mvns	r3, r3
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	4013      	ands	r3, r2
 80090da:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d003      	beq.n	80090f0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80090e8:	69fa      	ldr	r2, [r7, #28]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80090f0:	4a0a      	ldr	r2, [pc, #40]	; (800911c <HAL_GPIO_Init+0x3a8>)
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	3301      	adds	r3, #1
 80090fc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	fa22 f303 	lsr.w	r3, r2, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	f47f ae3d 	bne.w	8008d88 <HAL_GPIO_Init+0x14>
  }
}
 800910e:	bf00      	nop
 8009110:	bf00      	nop
 8009112:	3724      	adds	r7, #36	; 0x24
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	46022000 	.word	0x46022000
 8009120:	002f7f7f 	.word	0x002f7f7f

08009124 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800912c:	4b39      	ldr	r3, [pc, #228]	; (8009214 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800912e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009134:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	429a      	cmp	r2, r3
 800913c:	d10b      	bne.n	8009156 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009144:	d905      	bls.n	8009152 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009146:	4b33      	ldr	r3, [pc, #204]	; (8009214 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	4a32      	ldr	r2, [pc, #200]	; (8009214 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800914c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009150:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	e057      	b.n	8009206 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800915c:	d90a      	bls.n	8009174 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800915e:	4b2d      	ldr	r3, [pc, #180]	; (8009214 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4313      	orrs	r3, r2
 800916a:	4a2a      	ldr	r2, [pc, #168]	; (8009214 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800916c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009170:	60d3      	str	r3, [r2, #12]
 8009172:	e007      	b.n	8009184 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009174:	4b27      	ldr	r3, [pc, #156]	; (8009214 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800917c:	4925      	ldr	r1, [pc, #148]	; (8009214 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4313      	orrs	r3, r2
 8009182:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009184:	4b24      	ldr	r3, [pc, #144]	; (8009218 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a24      	ldr	r2, [pc, #144]	; (800921c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800918a:	fba2 2303 	umull	r2, r3, r2, r3
 800918e:	099b      	lsrs	r3, r3, #6
 8009190:	2232      	movs	r2, #50	; 0x32
 8009192:	fb02 f303 	mul.w	r3, r2, r3
 8009196:	4a21      	ldr	r2, [pc, #132]	; (800921c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009198:	fba2 2303 	umull	r2, r3, r2, r3
 800919c:	099b      	lsrs	r3, r3, #6
 800919e:	3301      	adds	r3, #1
 80091a0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80091a2:	e002      	b.n	80091aa <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80091aa:	4b1a      	ldr	r3, [pc, #104]	; (8009214 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d102      	bne.n	80091bc <HAL_PWREx_ControlVoltageScaling+0x98>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1f3      	bne.n	80091a4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d01b      	beq.n	80091fa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80091c2:	4b15      	ldr	r3, [pc, #84]	; (8009218 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a15      	ldr	r2, [pc, #84]	; (800921c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80091c8:	fba2 2303 	umull	r2, r3, r2, r3
 80091cc:	099b      	lsrs	r3, r3, #6
 80091ce:	2232      	movs	r2, #50	; 0x32
 80091d0:	fb02 f303 	mul.w	r3, r2, r3
 80091d4:	4a11      	ldr	r2, [pc, #68]	; (800921c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80091d6:	fba2 2303 	umull	r2, r3, r2, r3
 80091da:	099b      	lsrs	r3, r3, #6
 80091dc:	3301      	adds	r3, #1
 80091de:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80091e0:	e002      	b.n	80091e8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80091e8:	4b0a      	ldr	r3, [pc, #40]	; (8009214 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80091ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d102      	bne.n	80091fa <HAL_PWREx_ControlVoltageScaling+0xd6>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1f3      	bne.n	80091e2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	e000      	b.n	8009206 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	46020800 	.word	0x46020800
 8009218:	20000000 	.word	0x20000000
 800921c:	10624dd3 	.word	0x10624dd3

08009220 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009220:	b480      	push	{r7}
 8009222:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009224:	4b04      	ldr	r3, [pc, #16]	; (8009238 <HAL_PWREx_GetVoltageRange+0x18>)
 8009226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800922c:	4618      	mov	r0, r3
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	46020800 	.word	0x46020800

0800923c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08e      	sub	sp, #56	; 0x38
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009244:	2300      	movs	r3, #0
 8009246:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d102      	bne.n	8009256 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	f000 bec8 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009256:	4b99      	ldr	r3, [pc, #612]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	f003 030c 	and.w	r3, r3, #12
 800925e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009260:	4b96      	ldr	r3, [pc, #600]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009264:	f003 0303 	and.w	r3, r3, #3
 8009268:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0310 	and.w	r3, r3, #16
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 816c 	beq.w	8009550 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	2b00      	cmp	r3, #0
 800927c:	d007      	beq.n	800928e <HAL_RCC_OscConfig+0x52>
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	2b0c      	cmp	r3, #12
 8009282:	f040 80de 	bne.w	8009442 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009288:	2b01      	cmp	r3, #1
 800928a:	f040 80da 	bne.w	8009442 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d102      	bne.n	800929c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	f000 bea5 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092a0:	4b86      	ldr	r3, [pc, #536]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d004      	beq.n	80092b6 <HAL_RCC_OscConfig+0x7a>
 80092ac:	4b83      	ldr	r3, [pc, #524]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80092b4:	e005      	b.n	80092c2 <HAL_RCC_OscConfig+0x86>
 80092b6:	4b81      	ldr	r3, [pc, #516]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80092b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80092bc:	041b      	lsls	r3, r3, #16
 80092be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d255      	bcs.n	8009372 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80092c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10a      	bne.n	80092e2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d0:	4618      	mov	r0, r3
 80092d2:	f001 f9df 	bl	800a694 <RCC_SetFlashLatencyFromMSIRange>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	f000 be82 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80092e2:	4b76      	ldr	r3, [pc, #472]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	4a75      	ldr	r2, [pc, #468]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80092e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092ec:	6093      	str	r3, [r2, #8]
 80092ee:	4b73      	ldr	r3, [pc, #460]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fa:	4970      	ldr	r1, [pc, #448]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80092fc:	4313      	orrs	r3, r2
 80092fe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009304:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009308:	d309      	bcc.n	800931e <HAL_RCC_OscConfig+0xe2>
 800930a:	4b6c      	ldr	r3, [pc, #432]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	f023 021f 	bic.w	r2, r3, #31
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	4969      	ldr	r1, [pc, #420]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009318:	4313      	orrs	r3, r2
 800931a:	60cb      	str	r3, [r1, #12]
 800931c:	e07e      	b.n	800941c <HAL_RCC_OscConfig+0x1e0>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	2b00      	cmp	r3, #0
 8009324:	da0a      	bge.n	800933c <HAL_RCC_OscConfig+0x100>
 8009326:	4b65      	ldr	r3, [pc, #404]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a1b      	ldr	r3, [r3, #32]
 8009332:	015b      	lsls	r3, r3, #5
 8009334:	4961      	ldr	r1, [pc, #388]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009336:	4313      	orrs	r3, r2
 8009338:	60cb      	str	r3, [r1, #12]
 800933a:	e06f      	b.n	800941c <HAL_RCC_OscConfig+0x1e0>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009344:	d30a      	bcc.n	800935c <HAL_RCC_OscConfig+0x120>
 8009346:	4b5d      	ldr	r3, [pc, #372]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	029b      	lsls	r3, r3, #10
 8009354:	4959      	ldr	r1, [pc, #356]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009356:	4313      	orrs	r3, r2
 8009358:	60cb      	str	r3, [r1, #12]
 800935a:	e05f      	b.n	800941c <HAL_RCC_OscConfig+0x1e0>
 800935c:	4b57      	ldr	r3, [pc, #348]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a1b      	ldr	r3, [r3, #32]
 8009368:	03db      	lsls	r3, r3, #15
 800936a:	4954      	ldr	r1, [pc, #336]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 800936c:	4313      	orrs	r3, r2
 800936e:	60cb      	str	r3, [r1, #12]
 8009370:	e054      	b.n	800941c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009372:	4b52      	ldr	r3, [pc, #328]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	4a51      	ldr	r2, [pc, #324]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009378:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800937c:	6093      	str	r3, [r2, #8]
 800937e:	4b4f      	ldr	r3, [pc, #316]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	494c      	ldr	r1, [pc, #304]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 800938c:	4313      	orrs	r3, r2
 800938e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009394:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009398:	d309      	bcc.n	80093ae <HAL_RCC_OscConfig+0x172>
 800939a:	4b48      	ldr	r3, [pc, #288]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	f023 021f 	bic.w	r2, r3, #31
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	4945      	ldr	r1, [pc, #276]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	60cb      	str	r3, [r1, #12]
 80093ac:	e028      	b.n	8009400 <HAL_RCC_OscConfig+0x1c4>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	da0a      	bge.n	80093cc <HAL_RCC_OscConfig+0x190>
 80093b6:	4b41      	ldr	r3, [pc, #260]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	015b      	lsls	r3, r3, #5
 80093c4:	493d      	ldr	r1, [pc, #244]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80093c6:	4313      	orrs	r3, r2
 80093c8:	60cb      	str	r3, [r1, #12]
 80093ca:	e019      	b.n	8009400 <HAL_RCC_OscConfig+0x1c4>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093d4:	d30a      	bcc.n	80093ec <HAL_RCC_OscConfig+0x1b0>
 80093d6:	4b39      	ldr	r3, [pc, #228]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	029b      	lsls	r3, r3, #10
 80093e4:	4935      	ldr	r1, [pc, #212]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	60cb      	str	r3, [r1, #12]
 80093ea:	e009      	b.n	8009400 <HAL_RCC_OscConfig+0x1c4>
 80093ec:	4b33      	ldr	r3, [pc, #204]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	03db      	lsls	r3, r3, #15
 80093fa:	4930      	ldr	r1, [pc, #192]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10a      	bne.n	800941c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940a:	4618      	mov	r0, r3
 800940c:	f001 f942 	bl	800a694 <RCC_SetFlashLatencyFromMSIRange>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d002      	beq.n	800941c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	f000 bde5 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800941c:	f001 f8e4 	bl	800a5e8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009420:	4b27      	ldr	r3, [pc, #156]	; (80094c0 <HAL_RCC_OscConfig+0x284>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4618      	mov	r0, r3
 8009426:	f7ff fb47 	bl	8008ab8 <HAL_InitTick>
 800942a:	4603      	mov	r3, r0
 800942c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8009430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 808a 	beq.w	800954e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800943a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800943e:	f000 bdd2 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d066      	beq.n	8009518 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800944a:	4b1c      	ldr	r3, [pc, #112]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a1b      	ldr	r2, [pc, #108]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009450:	f043 0301 	orr.w	r3, r3, #1
 8009454:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009456:	f7ff fb79 	bl	8008b4c <HAL_GetTick>
 800945a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800945c:	e009      	b.n	8009472 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800945e:	f7ff fb75 	bl	8008b4c <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	2b02      	cmp	r3, #2
 800946a:	d902      	bls.n	8009472 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	f000 bdba 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009472:	4b12      	ldr	r3, [pc, #72]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0304 	and.w	r3, r3, #4
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0ef      	beq.n	800945e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800947e:	4b0f      	ldr	r3, [pc, #60]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	4a0e      	ldr	r2, [pc, #56]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009484:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009488:	6093      	str	r3, [r2, #8]
 800948a:	4b0c      	ldr	r3, [pc, #48]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009496:	4909      	ldr	r1, [pc, #36]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 8009498:	4313      	orrs	r3, r2
 800949a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80094a4:	d30e      	bcc.n	80094c4 <HAL_RCC_OscConfig+0x288>
 80094a6:	4b05      	ldr	r3, [pc, #20]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f023 021f 	bic.w	r2, r3, #31
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	4902      	ldr	r1, [pc, #8]	; (80094bc <HAL_RCC_OscConfig+0x280>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	60cb      	str	r3, [r1, #12]
 80094b8:	e04a      	b.n	8009550 <HAL_RCC_OscConfig+0x314>
 80094ba:	bf00      	nop
 80094bc:	46020c00 	.word	0x46020c00
 80094c0:	20000004 	.word	0x20000004
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	da0a      	bge.n	80094e2 <HAL_RCC_OscConfig+0x2a6>
 80094cc:	4b98      	ldr	r3, [pc, #608]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a1b      	ldr	r3, [r3, #32]
 80094d8:	015b      	lsls	r3, r3, #5
 80094da:	4995      	ldr	r1, [pc, #596]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	60cb      	str	r3, [r1, #12]
 80094e0:	e036      	b.n	8009550 <HAL_RCC_OscConfig+0x314>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ea:	d30a      	bcc.n	8009502 <HAL_RCC_OscConfig+0x2c6>
 80094ec:	4b90      	ldr	r3, [pc, #576]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a1b      	ldr	r3, [r3, #32]
 80094f8:	029b      	lsls	r3, r3, #10
 80094fa:	498d      	ldr	r1, [pc, #564]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60cb      	str	r3, [r1, #12]
 8009500:	e026      	b.n	8009550 <HAL_RCC_OscConfig+0x314>
 8009502:	4b8b      	ldr	r3, [pc, #556]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	03db      	lsls	r3, r3, #15
 8009510:	4987      	ldr	r1, [pc, #540]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 8009512:	4313      	orrs	r3, r2
 8009514:	60cb      	str	r3, [r1, #12]
 8009516:	e01b      	b.n	8009550 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009518:	4b85      	ldr	r3, [pc, #532]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a84      	ldr	r2, [pc, #528]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 800951e:	f023 0301 	bic.w	r3, r3, #1
 8009522:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009524:	f7ff fb12 	bl	8008b4c <HAL_GetTick>
 8009528:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800952a:	e009      	b.n	8009540 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800952c:	f7ff fb0e 	bl	8008b4c <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d902      	bls.n	8009540 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	f000 bd53 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009540:	4b7b      	ldr	r3, [pc, #492]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1ef      	bne.n	800952c <HAL_RCC_OscConfig+0x2f0>
 800954c:	e000      	b.n	8009550 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800954e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 808b 	beq.w	8009674 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	2b08      	cmp	r3, #8
 8009562:	d005      	beq.n	8009570 <HAL_RCC_OscConfig+0x334>
 8009564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009566:	2b0c      	cmp	r3, #12
 8009568:	d109      	bne.n	800957e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956c:	2b03      	cmp	r3, #3
 800956e:	d106      	bne.n	800957e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d17d      	bne.n	8009674 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	f000 bd34 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009586:	d106      	bne.n	8009596 <HAL_RCC_OscConfig+0x35a>
 8009588:	4b69      	ldr	r3, [pc, #420]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a68      	ldr	r2, [pc, #416]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 800958e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	e041      	b.n	800961a <HAL_RCC_OscConfig+0x3de>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800959e:	d112      	bne.n	80095c6 <HAL_RCC_OscConfig+0x38a>
 80095a0:	4b63      	ldr	r3, [pc, #396]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a62      	ldr	r2, [pc, #392]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	4b60      	ldr	r3, [pc, #384]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a5f      	ldr	r2, [pc, #380]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	4b5d      	ldr	r3, [pc, #372]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a5c      	ldr	r2, [pc, #368]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	e029      	b.n	800961a <HAL_RCC_OscConfig+0x3de>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80095ce:	d112      	bne.n	80095f6 <HAL_RCC_OscConfig+0x3ba>
 80095d0:	4b57      	ldr	r3, [pc, #348]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a56      	ldr	r2, [pc, #344]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095da:	6013      	str	r3, [r2, #0]
 80095dc:	4b54      	ldr	r3, [pc, #336]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a53      	ldr	r2, [pc, #332]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	4b51      	ldr	r3, [pc, #324]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a50      	ldr	r2, [pc, #320]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	e011      	b.n	800961a <HAL_RCC_OscConfig+0x3de>
 80095f6:	4b4e      	ldr	r3, [pc, #312]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a4d      	ldr	r2, [pc, #308]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80095fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	4b4b      	ldr	r3, [pc, #300]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a4a      	ldr	r2, [pc, #296]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 8009608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	4b48      	ldr	r3, [pc, #288]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a47      	ldr	r2, [pc, #284]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 8009614:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009618:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d014      	beq.n	800964c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009622:	f7ff fa93 	bl	8008b4c <HAL_GetTick>
 8009626:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009628:	e009      	b.n	800963e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800962a:	f7ff fa8f 	bl	8008b4c <HAL_GetTick>
 800962e:	4602      	mov	r2, r0
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	2b64      	cmp	r3, #100	; 0x64
 8009636:	d902      	bls.n	800963e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	f000 bcd4 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800963e:	4b3c      	ldr	r3, [pc, #240]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0ef      	beq.n	800962a <HAL_RCC_OscConfig+0x3ee>
 800964a:	e013      	b.n	8009674 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800964c:	f7ff fa7e 	bl	8008b4c <HAL_GetTick>
 8009650:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009652:	e009      	b.n	8009668 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009654:	f7ff fa7a 	bl	8008b4c <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	2b64      	cmp	r3, #100	; 0x64
 8009660:	d902      	bls.n	8009668 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	f000 bcbf 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009668:	4b31      	ldr	r3, [pc, #196]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1ef      	bne.n	8009654 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d05f      	beq.n	8009740 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009682:	2b04      	cmp	r3, #4
 8009684:	d005      	beq.n	8009692 <HAL_RCC_OscConfig+0x456>
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	2b0c      	cmp	r3, #12
 800968a:	d114      	bne.n	80096b6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968e:	2b02      	cmp	r3, #2
 8009690:	d111      	bne.n	80096b6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d102      	bne.n	80096a0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	f000 bca3 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80096a0:	4b23      	ldr	r3, [pc, #140]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	041b      	lsls	r3, r3, #16
 80096ae:	4920      	ldr	r1, [pc, #128]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80096b0:	4313      	orrs	r3, r2
 80096b2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80096b4:	e044      	b.n	8009740 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d024      	beq.n	8009708 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80096be:	4b1c      	ldr	r3, [pc, #112]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a1b      	ldr	r2, [pc, #108]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80096c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096c8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80096ca:	f7ff fa3f 	bl	8008b4c <HAL_GetTick>
 80096ce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096d0:	e009      	b.n	80096e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096d2:	f7ff fa3b 	bl	8008b4c <HAL_GetTick>
 80096d6:	4602      	mov	r2, r0
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d902      	bls.n	80096e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80096e0:	2303      	movs	r3, #3
 80096e2:	f000 bc80 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096e6:	4b12      	ldr	r3, [pc, #72]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d0ef      	beq.n	80096d2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80096f2:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	041b      	lsls	r3, r3, #16
 8009700:	490b      	ldr	r1, [pc, #44]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 8009702:	4313      	orrs	r3, r2
 8009704:	610b      	str	r3, [r1, #16]
 8009706:	e01b      	b.n	8009740 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009708:	4b09      	ldr	r3, [pc, #36]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a08      	ldr	r2, [pc, #32]	; (8009730 <HAL_RCC_OscConfig+0x4f4>)
 800970e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009712:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009714:	f7ff fa1a 	bl	8008b4c <HAL_GetTick>
 8009718:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800971a:	e00b      	b.n	8009734 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800971c:	f7ff fa16 	bl	8008b4c <HAL_GetTick>
 8009720:	4602      	mov	r2, r0
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	2b02      	cmp	r3, #2
 8009728:	d904      	bls.n	8009734 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	f000 bc5b 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
 8009730:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009734:	4baf      	ldr	r3, [pc, #700]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1ed      	bne.n	800971c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 0308 	and.w	r3, r3, #8
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 80c8 	beq.w	80098de <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800974e:	2300      	movs	r3, #0
 8009750:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009754:	4ba7      	ldr	r3, [pc, #668]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800975a:	f003 0304 	and.w	r3, r3, #4
 800975e:	2b00      	cmp	r3, #0
 8009760:	d111      	bne.n	8009786 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009762:	4ba4      	ldr	r3, [pc, #656]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009768:	4aa2      	ldr	r2, [pc, #648]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 800976a:	f043 0304 	orr.w	r3, r3, #4
 800976e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009772:	4ba0      	ldr	r3, [pc, #640]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	617b      	str	r3, [r7, #20]
 800977e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009780:	2301      	movs	r3, #1
 8009782:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009786:	4b9c      	ldr	r3, [pc, #624]	; (80099f8 <HAL_RCC_OscConfig+0x7bc>)
 8009788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	d119      	bne.n	80097c6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009792:	4b99      	ldr	r3, [pc, #612]	; (80099f8 <HAL_RCC_OscConfig+0x7bc>)
 8009794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009796:	4a98      	ldr	r2, [pc, #608]	; (80099f8 <HAL_RCC_OscConfig+0x7bc>)
 8009798:	f043 0301 	orr.w	r3, r3, #1
 800979c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800979e:	f7ff f9d5 	bl	8008b4c <HAL_GetTick>
 80097a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80097a4:	e009      	b.n	80097ba <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097a6:	f7ff f9d1 	bl	8008b4c <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d902      	bls.n	80097ba <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80097b4:	2303      	movs	r3, #3
 80097b6:	f000 bc16 	b.w	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80097ba:	4b8f      	ldr	r3, [pc, #572]	; (80099f8 <HAL_RCC_OscConfig+0x7bc>)
 80097bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0ef      	beq.n	80097a6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d05f      	beq.n	800988e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80097ce:	4b89      	ldr	r3, [pc, #548]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 80097d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097d4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	699a      	ldr	r2, [r3, #24]
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d037      	beq.n	8009854 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d006      	beq.n	80097fc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e3f4      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d01b      	beq.n	800983e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8009806:	4b7b      	ldr	r3, [pc, #492]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800980c:	4a79      	ldr	r2, [pc, #484]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 800980e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8009812:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8009816:	f7ff f999 	bl	8008b4c <HAL_GetTick>
 800981a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800981c:	e008      	b.n	8009830 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800981e:	f7ff f995 	bl	8008b4c <HAL_GetTick>
 8009822:	4602      	mov	r2, r0
 8009824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	2b05      	cmp	r3, #5
 800982a:	d901      	bls.n	8009830 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800982c:	2303      	movs	r3, #3
 800982e:	e3da      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009830:	4b70      	ldr	r3, [pc, #448]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1ef      	bne.n	800981e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800983e:	4b6d      	ldr	r3, [pc, #436]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009844:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	4969      	ldr	r1, [pc, #420]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 800984e:	4313      	orrs	r3, r2
 8009850:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009854:	4b67      	ldr	r3, [pc, #412]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800985a:	4a66      	ldr	r2, [pc, #408]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 800985c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009860:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8009864:	f7ff f972 	bl	8008b4c <HAL_GetTick>
 8009868:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800986a:	e008      	b.n	800987e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800986c:	f7ff f96e 	bl	8008b4c <HAL_GetTick>
 8009870:	4602      	mov	r2, r0
 8009872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	2b05      	cmp	r3, #5
 8009878:	d901      	bls.n	800987e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e3b3      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800987e:	4b5d      	ldr	r3, [pc, #372]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d0ef      	beq.n	800986c <HAL_RCC_OscConfig+0x630>
 800988c:	e01b      	b.n	80098c6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800988e:	4b59      	ldr	r3, [pc, #356]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009894:	4a57      	ldr	r2, [pc, #348]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009896:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800989a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800989e:	f7ff f955 	bl	8008b4c <HAL_GetTick>
 80098a2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80098a4:	e008      	b.n	80098b8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098a6:	f7ff f951 	bl	8008b4c <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	2b05      	cmp	r3, #5
 80098b2:	d901      	bls.n	80098b8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e396      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80098b8:	4b4e      	ldr	r3, [pc, #312]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 80098ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80098be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1ef      	bne.n	80098a6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80098c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d107      	bne.n	80098de <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098ce:	4b49      	ldr	r3, [pc, #292]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 80098d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098d4:	4a47      	ldr	r2, [pc, #284]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 80098d6:	f023 0304 	bic.w	r3, r3, #4
 80098da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0304 	and.w	r3, r3, #4
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 8111 	beq.w	8009b0e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80098ec:	2300      	movs	r3, #0
 80098ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098f2:	4b40      	ldr	r3, [pc, #256]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 80098f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d111      	bne.n	8009924 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009900:	4b3c      	ldr	r3, [pc, #240]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009906:	4a3b      	ldr	r2, [pc, #236]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009908:	f043 0304 	orr.w	r3, r3, #4
 800990c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009910:	4b38      	ldr	r3, [pc, #224]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009916:	f003 0304 	and.w	r3, r3, #4
 800991a:	613b      	str	r3, [r7, #16]
 800991c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800991e:	2301      	movs	r3, #1
 8009920:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009924:	4b34      	ldr	r3, [pc, #208]	; (80099f8 <HAL_RCC_OscConfig+0x7bc>)
 8009926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009928:	f003 0301 	and.w	r3, r3, #1
 800992c:	2b00      	cmp	r3, #0
 800992e:	d118      	bne.n	8009962 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009930:	4b31      	ldr	r3, [pc, #196]	; (80099f8 <HAL_RCC_OscConfig+0x7bc>)
 8009932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009934:	4a30      	ldr	r2, [pc, #192]	; (80099f8 <HAL_RCC_OscConfig+0x7bc>)
 8009936:	f043 0301 	orr.w	r3, r3, #1
 800993a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800993c:	f7ff f906 	bl	8008b4c <HAL_GetTick>
 8009940:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009942:	e008      	b.n	8009956 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009944:	f7ff f902 	bl	8008b4c <HAL_GetTick>
 8009948:	4602      	mov	r2, r0
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	2b02      	cmp	r3, #2
 8009950:	d901      	bls.n	8009956 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	e347      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009956:	4b28      	ldr	r3, [pc, #160]	; (80099f8 <HAL_RCC_OscConfig+0x7bc>)
 8009958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0f0      	beq.n	8009944 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	2b00      	cmp	r3, #0
 800996c:	d01f      	beq.n	80099ae <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f003 0304 	and.w	r3, r3, #4
 8009976:	2b00      	cmp	r3, #0
 8009978:	d010      	beq.n	800999c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800997a:	4b1e      	ldr	r3, [pc, #120]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 800997c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009980:	4a1c      	ldr	r2, [pc, #112]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009982:	f043 0304 	orr.w	r3, r3, #4
 8009986:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800998a:	4b1a      	ldr	r3, [pc, #104]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 800998c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009990:	4a18      	ldr	r2, [pc, #96]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 8009992:	f043 0301 	orr.w	r3, r3, #1
 8009996:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800999a:	e018      	b.n	80099ce <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800999c:	4b15      	ldr	r3, [pc, #84]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 800999e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099a2:	4a14      	ldr	r2, [pc, #80]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 80099a4:	f043 0301 	orr.w	r3, r3, #1
 80099a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80099ac:	e00f      	b.n	80099ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80099ae:	4b11      	ldr	r3, [pc, #68]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 80099b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099b4:	4a0f      	ldr	r2, [pc, #60]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 80099b6:	f023 0301 	bic.w	r3, r3, #1
 80099ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80099be:	4b0d      	ldr	r3, [pc, #52]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 80099c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099c4:	4a0b      	ldr	r2, [pc, #44]	; (80099f4 <HAL_RCC_OscConfig+0x7b8>)
 80099c6:	f023 0304 	bic.w	r3, r3, #4
 80099ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d057      	beq.n	8009a86 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80099d6:	f7ff f8b9 	bl	8008b4c <HAL_GetTick>
 80099da:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099dc:	e00e      	b.n	80099fc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099de:	f7ff f8b5 	bl	8008b4c <HAL_GetTick>
 80099e2:	4602      	mov	r2, r0
 80099e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d905      	bls.n	80099fc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e2f8      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
 80099f4:	46020c00 	.word	0x46020c00
 80099f8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099fc:	4b9c      	ldr	r3, [pc, #624]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 80099fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a02:	f003 0302 	and.w	r3, r3, #2
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0e9      	beq.n	80099de <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d01b      	beq.n	8009a4e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009a16:	4b96      	ldr	r3, [pc, #600]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a1c:	4a94      	ldr	r2, [pc, #592]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009a26:	e00a      	b.n	8009a3e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a28:	f7ff f890 	bl	8008b4c <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d901      	bls.n	8009a3e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e2d3      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009a3e:	4b8c      	ldr	r3, [pc, #560]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d0ed      	beq.n	8009a28 <HAL_RCC_OscConfig+0x7ec>
 8009a4c:	e053      	b.n	8009af6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009a4e:	4b88      	ldr	r3, [pc, #544]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a54:	4a86      	ldr	r2, [pc, #536]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009a5e:	e00a      	b.n	8009a76 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a60:	f7ff f874 	bl	8008b4c <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d901      	bls.n	8009a76 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e2b7      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009a76:	4b7e      	ldr	r3, [pc, #504]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1ed      	bne.n	8009a60 <HAL_RCC_OscConfig+0x824>
 8009a84:	e037      	b.n	8009af6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8009a86:	f7ff f861 	bl	8008b4c <HAL_GetTick>
 8009a8a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a8c:	e00a      	b.n	8009aa4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a8e:	f7ff f85d 	bl	8008b4c <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d901      	bls.n	8009aa4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e2a0      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009aa4:	4b72      	ldr	r3, [pc, #456]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009aaa:	f003 0302 	and.w	r3, r3, #2
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1ed      	bne.n	8009a8e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8009ab2:	4b6f      	ldr	r3, [pc, #444]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d01a      	beq.n	8009af6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009ac0:	4b6b      	ldr	r3, [pc, #428]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ac6:	4a6a      	ldr	r2, [pc, #424]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009acc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009ad0:	e00a      	b.n	8009ae8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ad2:	f7ff f83b 	bl	8008b4c <HAL_GetTick>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d901      	bls.n	8009ae8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e27e      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009ae8:	4b61      	ldr	r3, [pc, #388]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1ed      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009af6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d107      	bne.n	8009b0e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009afe:	4b5c      	ldr	r3, [pc, #368]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b04:	4a5a      	ldr	r2, [pc, #360]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009b06:	f023 0304 	bic.w	r3, r3, #4
 8009b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d036      	beq.n	8009b88 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d019      	beq.n	8009b56 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8009b22:	4b53      	ldr	r3, [pc, #332]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a52      	ldr	r2, [pc, #328]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009b28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b2c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009b2e:	f7ff f80d 	bl	8008b4c <HAL_GetTick>
 8009b32:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009b34:	e008      	b.n	8009b48 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b36:	f7ff f809 	bl	8008b4c <HAL_GetTick>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d901      	bls.n	8009b48 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e24e      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009b48:	4b49      	ldr	r3, [pc, #292]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0f0      	beq.n	8009b36 <HAL_RCC_OscConfig+0x8fa>
 8009b54:	e018      	b.n	8009b88 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8009b56:	4b46      	ldr	r3, [pc, #280]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a45      	ldr	r2, [pc, #276]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b60:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009b62:	f7fe fff3 	bl	8008b4c <HAL_GetTick>
 8009b66:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009b68:	e008      	b.n	8009b7c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b6a:	f7fe ffef 	bl	8008b4c <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d901      	bls.n	8009b7c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e234      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009b7c:	4b3c      	ldr	r3, [pc, #240]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1f0      	bne.n	8009b6a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d036      	beq.n	8009c02 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d019      	beq.n	8009bd0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8009b9c:	4b34      	ldr	r3, [pc, #208]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a33      	ldr	r2, [pc, #204]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009ba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ba6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009ba8:	f7fe ffd0 	bl	8008b4c <HAL_GetTick>
 8009bac:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009bae:	e008      	b.n	8009bc2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009bb0:	f7fe ffcc 	bl	8008b4c <HAL_GetTick>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d901      	bls.n	8009bc2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	e211      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009bc2:	4b2b      	ldr	r3, [pc, #172]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d0f0      	beq.n	8009bb0 <HAL_RCC_OscConfig+0x974>
 8009bce:	e018      	b.n	8009c02 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8009bd0:	4b27      	ldr	r3, [pc, #156]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a26      	ldr	r2, [pc, #152]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bda:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009bdc:	f7fe ffb6 	bl	8008b4c <HAL_GetTick>
 8009be0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009be2:	e008      	b.n	8009bf6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009be4:	f7fe ffb2 	bl	8008b4c <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d901      	bls.n	8009bf6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e1f7      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009bf6:	4b1e      	ldr	r3, [pc, #120]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1f0      	bne.n	8009be4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d07f      	beq.n	8009d0e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d062      	beq.n	8009cdc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8009c16:	4b16      	ldr	r3, [pc, #88]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	4a15      	ldr	r2, [pc, #84]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009c1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c20:	6093      	str	r3, [r2, #8]
 8009c22:	4b13      	ldr	r3, [pc, #76]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c2e:	4910      	ldr	r1, [pc, #64]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009c30:	4313      	orrs	r3, r2
 8009c32:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c38:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009c3c:	d309      	bcc.n	8009c52 <HAL_RCC_OscConfig+0xa16>
 8009c3e:	4b0c      	ldr	r3, [pc, #48]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	f023 021f 	bic.w	r2, r3, #31
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	4909      	ldr	r1, [pc, #36]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60cb      	str	r3, [r1, #12]
 8009c50:	e02a      	b.n	8009ca8 <HAL_RCC_OscConfig+0xa6c>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	da0c      	bge.n	8009c74 <HAL_RCC_OscConfig+0xa38>
 8009c5a:	4b05      	ldr	r3, [pc, #20]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	015b      	lsls	r3, r3, #5
 8009c68:	4901      	ldr	r1, [pc, #4]	; (8009c70 <HAL_RCC_OscConfig+0xa34>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	60cb      	str	r3, [r1, #12]
 8009c6e:	e01b      	b.n	8009ca8 <HAL_RCC_OscConfig+0xa6c>
 8009c70:	46020c00 	.word	0x46020c00
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c7c:	d30a      	bcc.n	8009c94 <HAL_RCC_OscConfig+0xa58>
 8009c7e:	4ba1      	ldr	r3, [pc, #644]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	029b      	lsls	r3, r3, #10
 8009c8c:	499d      	ldr	r1, [pc, #628]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	60cb      	str	r3, [r1, #12]
 8009c92:	e009      	b.n	8009ca8 <HAL_RCC_OscConfig+0xa6c>
 8009c94:	4b9b      	ldr	r3, [pc, #620]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	03db      	lsls	r3, r3, #15
 8009ca2:	4998      	ldr	r1, [pc, #608]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8009ca8:	4b96      	ldr	r3, [pc, #600]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a95      	ldr	r2, [pc, #596]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009cae:	f043 0310 	orr.w	r3, r3, #16
 8009cb2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009cb4:	f7fe ff4a 	bl	8008b4c <HAL_GetTick>
 8009cb8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009cba:	e008      	b.n	8009cce <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009cbc:	f7fe ff46 	bl	8008b4c <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e18b      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009cce:	4b8d      	ldr	r3, [pc, #564]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0320 	and.w	r3, r3, #32
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0f0      	beq.n	8009cbc <HAL_RCC_OscConfig+0xa80>
 8009cda:	e018      	b.n	8009d0e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8009cdc:	4b89      	ldr	r3, [pc, #548]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a88      	ldr	r2, [pc, #544]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009ce2:	f023 0310 	bic.w	r3, r3, #16
 8009ce6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009ce8:	f7fe ff30 	bl	8008b4c <HAL_GetTick>
 8009cec:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009cee:	e008      	b.n	8009d02 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009cf0:	f7fe ff2c 	bl	8008b4c <HAL_GetTick>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d901      	bls.n	8009d02 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e171      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009d02:	4b80      	ldr	r3, [pc, #512]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0320 	and.w	r3, r3, #32
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1f0      	bne.n	8009cf0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 8166 	beq.w	8009fe4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d1e:	4b79      	ldr	r3, [pc, #484]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	f003 030c 	and.w	r3, r3, #12
 8009d26:	2b0c      	cmp	r3, #12
 8009d28:	f000 80f2 	beq.w	8009f10 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	f040 80c5 	bne.w	8009ec0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009d36:	4b73      	ldr	r3, [pc, #460]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a72      	ldr	r2, [pc, #456]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009d3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d40:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009d42:	f7fe ff03 	bl	8008b4c <HAL_GetTick>
 8009d46:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009d48:	e008      	b.n	8009d5c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d4a:	f7fe feff 	bl	8008b4c <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d901      	bls.n	8009d5c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e144      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009d5c:	4b69      	ldr	r3, [pc, #420]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1f0      	bne.n	8009d4a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d68:	4b66      	ldr	r3, [pc, #408]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d6e:	f003 0304 	and.w	r3, r3, #4
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d111      	bne.n	8009d9a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8009d76:	4b63      	ldr	r3, [pc, #396]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d7c:	4a61      	ldr	r2, [pc, #388]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009d7e:	f043 0304 	orr.w	r3, r3, #4
 8009d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009d86:	4b5f      	ldr	r3, [pc, #380]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d8c:	f003 0304 	and.w	r3, r3, #4
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8009d94:	2301      	movs	r3, #1
 8009d96:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8009d9a:	4b5b      	ldr	r3, [pc, #364]	; (8009f08 <HAL_RCC_OscConfig+0xccc>)
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009da2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009da6:	d102      	bne.n	8009dae <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8009da8:	2301      	movs	r3, #1
 8009daa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009dae:	4b56      	ldr	r3, [pc, #344]	; (8009f08 <HAL_RCC_OscConfig+0xccc>)
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	4a55      	ldr	r2, [pc, #340]	; (8009f08 <HAL_RCC_OscConfig+0xccc>)
 8009db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009db8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8009dba:	4b52      	ldr	r3, [pc, #328]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dc2:	f023 0303 	bic.w	r3, r3, #3
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009dce:	3a01      	subs	r2, #1
 8009dd0:	0212      	lsls	r2, r2, #8
 8009dd2:	4311      	orrs	r1, r2
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	494a      	ldr	r1, [pc, #296]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	628b      	str	r3, [r1, #40]	; 0x28
 8009de0:	4b48      	ldr	r3, [pc, #288]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009de4:	4b49      	ldr	r3, [pc, #292]	; (8009f0c <HAL_RCC_OscConfig+0xcd0>)
 8009de6:	4013      	ands	r3, r2
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009dec:	3a01      	subs	r2, #1
 8009dee:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009df6:	3a01      	subs	r2, #1
 8009df8:	0252      	lsls	r2, r2, #9
 8009dfa:	b292      	uxth	r2, r2
 8009dfc:	4311      	orrs	r1, r2
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009e02:	3a01      	subs	r2, #1
 8009e04:	0412      	lsls	r2, r2, #16
 8009e06:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009e0a:	4311      	orrs	r1, r2
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009e10:	3a01      	subs	r2, #1
 8009e12:	0612      	lsls	r2, r2, #24
 8009e14:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	493a      	ldr	r1, [pc, #232]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8009e20:	4b38      	ldr	r3, [pc, #224]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	4a37      	ldr	r2, [pc, #220]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e26:	f023 0310 	bic.w	r3, r3, #16
 8009e2a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e30:	4a34      	ldr	r2, [pc, #208]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e32:	00db      	lsls	r3, r3, #3
 8009e34:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009e36:	4b33      	ldr	r3, [pc, #204]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3a:	4a32      	ldr	r2, [pc, #200]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e3c:	f043 0310 	orr.w	r3, r3, #16
 8009e40:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8009e42:	4b30      	ldr	r3, [pc, #192]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e46:	f023 020c 	bic.w	r2, r3, #12
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e4e:	492d      	ldr	r1, [pc, #180]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8009e54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d105      	bne.n	8009e68 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009e5c:	4b2a      	ldr	r3, [pc, #168]	; (8009f08 <HAL_RCC_OscConfig+0xccc>)
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	4a29      	ldr	r2, [pc, #164]	; (8009f08 <HAL_RCC_OscConfig+0xccc>)
 8009e62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e66:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8009e68:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d107      	bne.n	8009e80 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8009e70:	4b24      	ldr	r3, [pc, #144]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e76:	4a23      	ldr	r2, [pc, #140]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e78:	f023 0304 	bic.w	r3, r3, #4
 8009e7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e80:	4b20      	ldr	r3, [pc, #128]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e84:	4a1f      	ldr	r2, [pc, #124]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e8a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8009e8c:	4b1d      	ldr	r3, [pc, #116]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a1c      	ldr	r2, [pc, #112]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e96:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009e98:	f7fe fe58 	bl	8008b4c <HAL_GetTick>
 8009e9c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009e9e:	e008      	b.n	8009eb2 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ea0:	f7fe fe54 	bl	8008b4c <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e099      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009eb2:	4b14      	ldr	r3, [pc, #80]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d0f0      	beq.n	8009ea0 <HAL_RCC_OscConfig+0xc64>
 8009ebe:	e091      	b.n	8009fe4 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009ec0:	4b10      	ldr	r3, [pc, #64]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a0f      	ldr	r2, [pc, #60]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009eca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009ecc:	f7fe fe3e 	bl	8008b4c <HAL_GetTick>
 8009ed0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009ed2:	e008      	b.n	8009ee6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ed4:	f7fe fe3a 	bl	8008b4c <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d901      	bls.n	8009ee6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e07f      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009ee6:	4b07      	ldr	r3, [pc, #28]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1f0      	bne.n	8009ed4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8009ef2:	4b04      	ldr	r3, [pc, #16]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef6:	4a03      	ldr	r2, [pc, #12]	; (8009f04 <HAL_RCC_OscConfig+0xcc8>)
 8009ef8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009efc:	f023 0303 	bic.w	r3, r3, #3
 8009f00:	6293      	str	r3, [r2, #40]	; 0x28
 8009f02:	e06f      	b.n	8009fe4 <HAL_RCC_OscConfig+0xda8>
 8009f04:	46020c00 	.word	0x46020c00
 8009f08:	46020800 	.word	0x46020800
 8009f0c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8009f10:	4b37      	ldr	r3, [pc, #220]	; (8009ff0 <HAL_RCC_OscConfig+0xdb4>)
 8009f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f14:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f16:	4b36      	ldr	r3, [pc, #216]	; (8009ff0 <HAL_RCC_OscConfig+0xdb4>)
 8009f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f1a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d039      	beq.n	8009f98 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	f003 0203 	and.w	r2, r3, #3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d132      	bne.n	8009f98 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	0a1b      	lsrs	r3, r3, #8
 8009f36:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d129      	bne.n	8009f98 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d122      	bne.n	8009f98 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f5c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d11a      	bne.n	8009f98 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	0a5b      	lsrs	r3, r3, #9
 8009f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d111      	bne.n	8009f98 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	0c1b      	lsrs	r3, r3, #16
 8009f78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f80:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d108      	bne.n	8009f98 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	0e1b      	lsrs	r3, r3, #24
 8009f8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f92:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d001      	beq.n	8009f9c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e024      	b.n	8009fe6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009f9c:	4b14      	ldr	r3, [pc, #80]	; (8009ff0 <HAL_RCC_OscConfig+0xdb4>)
 8009f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa0:	08db      	lsrs	r3, r3, #3
 8009fa2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d01a      	beq.n	8009fe4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8009fae:	4b10      	ldr	r3, [pc, #64]	; (8009ff0 <HAL_RCC_OscConfig+0xdb4>)
 8009fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb2:	4a0f      	ldr	r2, [pc, #60]	; (8009ff0 <HAL_RCC_OscConfig+0xdb4>)
 8009fb4:	f023 0310 	bic.w	r3, r3, #16
 8009fb8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fba:	f7fe fdc7 	bl	8008b4c <HAL_GetTick>
 8009fbe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8009fc0:	bf00      	nop
 8009fc2:	f7fe fdc3 	bl	8008b4c <HAL_GetTick>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d0f9      	beq.n	8009fc2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd2:	4a07      	ldr	r2, [pc, #28]	; (8009ff0 <HAL_RCC_OscConfig+0xdb4>)
 8009fd4:	00db      	lsls	r3, r3, #3
 8009fd6:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009fd8:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <HAL_RCC_OscConfig+0xdb4>)
 8009fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fdc:	4a04      	ldr	r2, [pc, #16]	; (8009ff0 <HAL_RCC_OscConfig+0xdb4>)
 8009fde:	f043 0310 	orr.w	r3, r3, #16
 8009fe2:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3738      	adds	r7, #56	; 0x38
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	46020c00 	.word	0x46020c00

08009ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e1d9      	b.n	800a3bc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a008:	4b9b      	ldr	r3, [pc, #620]	; (800a278 <HAL_RCC_ClockConfig+0x284>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 030f 	and.w	r3, r3, #15
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	429a      	cmp	r2, r3
 800a014:	d910      	bls.n	800a038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a016:	4b98      	ldr	r3, [pc, #608]	; (800a278 <HAL_RCC_ClockConfig+0x284>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f023 020f 	bic.w	r2, r3, #15
 800a01e:	4996      	ldr	r1, [pc, #600]	; (800a278 <HAL_RCC_ClockConfig+0x284>)
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	4313      	orrs	r3, r2
 800a024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a026:	4b94      	ldr	r3, [pc, #592]	; (800a278 <HAL_RCC_ClockConfig+0x284>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 030f 	and.w	r3, r3, #15
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	429a      	cmp	r2, r3
 800a032:	d001      	beq.n	800a038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e1c1      	b.n	800a3bc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0310 	and.w	r3, r3, #16
 800a040:	2b00      	cmp	r3, #0
 800a042:	d010      	beq.n	800a066 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	695a      	ldr	r2, [r3, #20]
 800a048:	4b8c      	ldr	r3, [pc, #560]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a050:	429a      	cmp	r2, r3
 800a052:	d908      	bls.n	800a066 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a054:	4b89      	ldr	r3, [pc, #548]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	4986      	ldr	r1, [pc, #536]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a062:	4313      	orrs	r3, r2
 800a064:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 0308 	and.w	r3, r3, #8
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d012      	beq.n	800a098 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	691a      	ldr	r2, [r3, #16]
 800a076:	4b81      	ldr	r3, [pc, #516]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	091b      	lsrs	r3, r3, #4
 800a07c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a080:	429a      	cmp	r2, r3
 800a082:	d909      	bls.n	800a098 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a084:	4b7d      	ldr	r3, [pc, #500]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	011b      	lsls	r3, r3, #4
 800a092:	497a      	ldr	r1, [pc, #488]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a094:	4313      	orrs	r3, r2
 800a096:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 0304 	and.w	r3, r3, #4
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d010      	beq.n	800a0c6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	68da      	ldr	r2, [r3, #12]
 800a0a8:	4b74      	ldr	r3, [pc, #464]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a0aa:	6a1b      	ldr	r3, [r3, #32]
 800a0ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d908      	bls.n	800a0c6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a0b4:	4b71      	ldr	r3, [pc, #452]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a0b6:	6a1b      	ldr	r3, [r3, #32]
 800a0b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	496e      	ldr	r1, [pc, #440]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d010      	beq.n	800a0f4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	4b69      	ldr	r3, [pc, #420]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	f003 030f 	and.w	r3, r3, #15
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d908      	bls.n	800a0f4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a0e2:	4b66      	ldr	r3, [pc, #408]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	f023 020f 	bic.w	r2, r3, #15
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	4963      	ldr	r1, [pc, #396]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0301 	and.w	r3, r3, #1
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 80d2 	beq.w	800a2a6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a102:	2300      	movs	r3, #0
 800a104:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d143      	bne.n	800a196 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a10e:	4b5b      	ldr	r3, [pc, #364]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a114:	f003 0304 	and.w	r3, r3, #4
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d110      	bne.n	800a13e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a11c:	4b57      	ldr	r3, [pc, #348]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a11e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a122:	4a56      	ldr	r2, [pc, #344]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a124:	f043 0304 	orr.w	r3, r3, #4
 800a128:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a12c:	4b53      	ldr	r3, [pc, #332]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a12e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a132:	f003 0304 	and.w	r3, r3, #4
 800a136:	60bb      	str	r3, [r7, #8]
 800a138:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a13a:	2301      	movs	r3, #1
 800a13c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a13e:	f7fe fd05 	bl	8008b4c <HAL_GetTick>
 800a142:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a144:	4b4e      	ldr	r3, [pc, #312]	; (800a280 <HAL_RCC_ClockConfig+0x28c>)
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00f      	beq.n	800a170 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a150:	e008      	b.n	800a164 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a152:	f7fe fcfb 	bl	8008b4c <HAL_GetTick>
 800a156:	4602      	mov	r2, r0
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	1ad3      	subs	r3, r2, r3
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d901      	bls.n	800a164 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e12b      	b.n	800a3bc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a164:	4b46      	ldr	r3, [pc, #280]	; (800a280 <HAL_RCC_ClockConfig+0x28c>)
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d0f0      	beq.n	800a152 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a170:	7dfb      	ldrb	r3, [r7, #23]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d107      	bne.n	800a186 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a176:	4b41      	ldr	r3, [pc, #260]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a17c:	4a3f      	ldr	r2, [pc, #252]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a17e:	f023 0304 	bic.w	r3, r3, #4
 800a182:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a186:	4b3d      	ldr	r3, [pc, #244]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d121      	bne.n	800a1d6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e112      	b.n	800a3bc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d107      	bne.n	800a1ae <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a19e:	4b37      	ldr	r3, [pc, #220]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d115      	bne.n	800a1d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e106      	b.n	800a3bc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d107      	bne.n	800a1c6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a1b6:	4b31      	ldr	r3, [pc, #196]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f003 0304 	and.w	r3, r3, #4
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d109      	bne.n	800a1d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e0fa      	b.n	800a3bc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a1c6:	4b2d      	ldr	r3, [pc, #180]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e0f2      	b.n	800a3bc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a1d6:	4b29      	ldr	r3, [pc, #164]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a1d8:	69db      	ldr	r3, [r3, #28]
 800a1da:	f023 0203 	bic.w	r2, r3, #3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	4926      	ldr	r1, [pc, #152]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a1e8:	f7fe fcb0 	bl	8008b4c <HAL_GetTick>
 800a1ec:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d112      	bne.n	800a21c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a1f6:	e00a      	b.n	800a20e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1f8:	f7fe fca8 	bl	8008b4c <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	f241 3288 	movw	r2, #5000	; 0x1388
 800a206:	4293      	cmp	r3, r2
 800a208:	d901      	bls.n	800a20e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e0d6      	b.n	800a3bc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a20e:	4b1b      	ldr	r3, [pc, #108]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	f003 030c 	and.w	r3, r3, #12
 800a216:	2b0c      	cmp	r3, #12
 800a218:	d1ee      	bne.n	800a1f8 <HAL_RCC_ClockConfig+0x204>
 800a21a:	e044      	b.n	800a2a6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	2b02      	cmp	r3, #2
 800a222:	d112      	bne.n	800a24a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a224:	e00a      	b.n	800a23c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a226:	f7fe fc91 	bl	8008b4c <HAL_GetTick>
 800a22a:	4602      	mov	r2, r0
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	f241 3288 	movw	r2, #5000	; 0x1388
 800a234:	4293      	cmp	r3, r2
 800a236:	d901      	bls.n	800a23c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e0bf      	b.n	800a3bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a23c:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	f003 030c 	and.w	r3, r3, #12
 800a244:	2b08      	cmp	r3, #8
 800a246:	d1ee      	bne.n	800a226 <HAL_RCC_ClockConfig+0x232>
 800a248:	e02d      	b.n	800a2a6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d123      	bne.n	800a29a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a252:	e00a      	b.n	800a26a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a254:	f7fe fc7a 	bl	8008b4c <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a262:	4293      	cmp	r3, r2
 800a264:	d901      	bls.n	800a26a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e0a8      	b.n	800a3bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a26a:	4b04      	ldr	r3, [pc, #16]	; (800a27c <HAL_RCC_ClockConfig+0x288>)
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	f003 030c 	and.w	r3, r3, #12
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1ee      	bne.n	800a254 <HAL_RCC_ClockConfig+0x260>
 800a276:	e016      	b.n	800a2a6 <HAL_RCC_ClockConfig+0x2b2>
 800a278:	40022000 	.word	0x40022000
 800a27c:	46020c00 	.word	0x46020c00
 800a280:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a284:	f7fe fc62 	bl	8008b4c <HAL_GetTick>
 800a288:	4602      	mov	r2, r0
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a292:	4293      	cmp	r3, r2
 800a294:	d901      	bls.n	800a29a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a296:	2303      	movs	r3, #3
 800a298:	e090      	b.n	800a3bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a29a:	4b4a      	ldr	r3, [pc, #296]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a29c:	69db      	ldr	r3, [r3, #28]
 800a29e:	f003 030c 	and.w	r3, r3, #12
 800a2a2:	2b04      	cmp	r3, #4
 800a2a4:	d1ee      	bne.n	800a284 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0302 	and.w	r3, r3, #2
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d010      	beq.n	800a2d4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	689a      	ldr	r2, [r3, #8]
 800a2b6:	4b43      	ldr	r3, [pc, #268]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	f003 030f 	and.w	r3, r3, #15
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d208      	bcs.n	800a2d4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a2c2:	4b40      	ldr	r3, [pc, #256]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	f023 020f 	bic.w	r2, r3, #15
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	493d      	ldr	r1, [pc, #244]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a2d4:	4b3c      	ldr	r3, [pc, #240]	; (800a3c8 <HAL_RCC_ClockConfig+0x3d4>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 030f 	and.w	r3, r3, #15
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d210      	bcs.n	800a304 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2e2:	4b39      	ldr	r3, [pc, #228]	; (800a3c8 <HAL_RCC_ClockConfig+0x3d4>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f023 020f 	bic.w	r2, r3, #15
 800a2ea:	4937      	ldr	r1, [pc, #220]	; (800a3c8 <HAL_RCC_ClockConfig+0x3d4>)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2f2:	4b35      	ldr	r3, [pc, #212]	; (800a3c8 <HAL_RCC_ClockConfig+0x3d4>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 030f 	and.w	r3, r3, #15
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d001      	beq.n	800a304 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e05b      	b.n	800a3bc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d010      	beq.n	800a332 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	68da      	ldr	r2, [r3, #12]
 800a314:	4b2b      	ldr	r3, [pc, #172]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a316:	6a1b      	ldr	r3, [r3, #32]
 800a318:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d208      	bcs.n	800a332 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a320:	4b28      	ldr	r3, [pc, #160]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a322:	6a1b      	ldr	r3, [r3, #32]
 800a324:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	4925      	ldr	r1, [pc, #148]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a32e:	4313      	orrs	r3, r2
 800a330:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 0308 	and.w	r3, r3, #8
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d012      	beq.n	800a364 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	691a      	ldr	r2, [r3, #16]
 800a342:	4b20      	ldr	r3, [pc, #128]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	091b      	lsrs	r3, r3, #4
 800a348:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d209      	bcs.n	800a364 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a350:	4b1c      	ldr	r3, [pc, #112]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	011b      	lsls	r3, r3, #4
 800a35e:	4919      	ldr	r1, [pc, #100]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a360:	4313      	orrs	r3, r2
 800a362:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 0310 	and.w	r3, r3, #16
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d010      	beq.n	800a392 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	695a      	ldr	r2, [r3, #20]
 800a374:	4b13      	ldr	r3, [pc, #76]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a378:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d208      	bcs.n	800a392 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800a380:	4b10      	ldr	r3, [pc, #64]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a384:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	490d      	ldr	r1, [pc, #52]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a38e:	4313      	orrs	r3, r2
 800a390:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a392:	f000 f821 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800a396:	4602      	mov	r2, r0
 800a398:	4b0a      	ldr	r3, [pc, #40]	; (800a3c4 <HAL_RCC_ClockConfig+0x3d0>)
 800a39a:	6a1b      	ldr	r3, [r3, #32]
 800a39c:	f003 030f 	and.w	r3, r3, #15
 800a3a0:	490a      	ldr	r1, [pc, #40]	; (800a3cc <HAL_RCC_ClockConfig+0x3d8>)
 800a3a2:	5ccb      	ldrb	r3, [r1, r3]
 800a3a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a8:	4a09      	ldr	r2, [pc, #36]	; (800a3d0 <HAL_RCC_ClockConfig+0x3dc>)
 800a3aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a3ac:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <HAL_RCC_ClockConfig+0x3e0>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fe fb81 	bl	8008ab8 <HAL_InitTick>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	73fb      	strb	r3, [r7, #15]

  return status;
 800a3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	46020c00 	.word	0x46020c00
 800a3c8:	40022000 	.word	0x40022000
 800a3cc:	0800e7a0 	.word	0x0800e7a0
 800a3d0:	20000000 	.word	0x20000000
 800a3d4:	20000004 	.word	0x20000004

0800a3d8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b08b      	sub	sp, #44	; 0x2c
 800a3dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3e6:	4b7b      	ldr	r3, [pc, #492]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	f003 030c 	and.w	r3, r3, #12
 800a3ee:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a3f0:	4b78      	ldr	r3, [pc, #480]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f4:	f003 0303 	and.w	r3, r3, #3
 800a3f8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d005      	beq.n	800a40c <HAL_RCC_GetSysClockFreq+0x34>
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	2b0c      	cmp	r3, #12
 800a404:	d121      	bne.n	800a44a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d11e      	bne.n	800a44a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800a40c:	4b71      	ldr	r3, [pc, #452]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d107      	bne.n	800a428 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800a418:	4b6e      	ldr	r3, [pc, #440]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a41a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a41e:	0b1b      	lsrs	r3, r3, #12
 800a420:	f003 030f 	and.w	r3, r3, #15
 800a424:	627b      	str	r3, [r7, #36]	; 0x24
 800a426:	e005      	b.n	800a434 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800a428:	4b6a      	ldr	r3, [pc, #424]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	0f1b      	lsrs	r3, r3, #28
 800a42e:	f003 030f 	and.w	r3, r3, #15
 800a432:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a434:	4a68      	ldr	r2, [pc, #416]	; (800a5d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a43c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d110      	bne.n	800a466 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a448:	e00d      	b.n	800a466 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a44a:	4b62      	ldr	r3, [pc, #392]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a44c:	69db      	ldr	r3, [r3, #28]
 800a44e:	f003 030c 	and.w	r3, r3, #12
 800a452:	2b04      	cmp	r3, #4
 800a454:	d102      	bne.n	800a45c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a456:	4b61      	ldr	r3, [pc, #388]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x204>)
 800a458:	623b      	str	r3, [r7, #32]
 800a45a:	e004      	b.n	800a466 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	2b08      	cmp	r3, #8
 800a460:	d101      	bne.n	800a466 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a462:	4b5e      	ldr	r3, [pc, #376]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x204>)
 800a464:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	2b0c      	cmp	r3, #12
 800a46a:	f040 80ac 	bne.w	800a5c6 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a46e:	4b59      	ldr	r3, [pc, #356]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a472:	f003 0303 	and.w	r3, r3, #3
 800a476:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a478:	4b56      	ldr	r3, [pc, #344]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47c:	0a1b      	lsrs	r3, r3, #8
 800a47e:	f003 030f 	and.w	r3, r3, #15
 800a482:	3301      	adds	r3, #1
 800a484:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a486:	4b53      	ldr	r3, [pc, #332]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48a:	091b      	lsrs	r3, r3, #4
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a492:	4b50      	ldr	r3, [pc, #320]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a496:	08db      	lsrs	r3, r3, #3
 800a498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	fb02 f303 	mul.w	r3, r2, r3
 800a4a2:	ee07 3a90 	vmov	s15, r3
 800a4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4aa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f000 8086 	beq.w	800a5c2 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d003      	beq.n	800a4c4 <HAL_RCC_GetSysClockFreq+0xec>
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	d022      	beq.n	800a508 <HAL_RCC_GetSysClockFreq+0x130>
 800a4c2:	e043      	b.n	800a54c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	ee07 3a90 	vmov	s15, r3
 800a4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ce:	eddf 6a44 	vldr	s13, [pc, #272]	; 800a5e0 <HAL_RCC_GetSysClockFreq+0x208>
 800a4d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4d6:	4b3f      	ldr	r3, [pc, #252]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4de:	ee07 3a90 	vmov	s15, r3
 800a4e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a4e6:	ed97 6a01 	vldr	s12, [r7, #4]
 800a4ea:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a5e4 <HAL_RCC_GetSysClockFreq+0x20c>
 800a4ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a4f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a4f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a4fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a502:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800a506:	e046      	b.n	800a596 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	ee07 3a90 	vmov	s15, r3
 800a50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a512:	eddf 6a33 	vldr	s13, [pc, #204]	; 800a5e0 <HAL_RCC_GetSysClockFreq+0x208>
 800a516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a51a:	4b2e      	ldr	r3, [pc, #184]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a51e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a522:	ee07 3a90 	vmov	s15, r3
 800a526:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a52a:	ed97 6a01 	vldr	s12, [r7, #4]
 800a52e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800a5e4 <HAL_RCC_GetSysClockFreq+0x20c>
 800a532:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a536:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a53a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a53e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a542:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a546:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800a54a:	e024      	b.n	800a596 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54e:	ee07 3a90 	vmov	s15, r3
 800a552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	ee07 3a90 	vmov	s15, r3
 800a55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a564:	4b1b      	ldr	r3, [pc, #108]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a56c:	ee07 3a90 	vmov	s15, r3
 800a570:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a574:	ed97 6a01 	vldr	s12, [r7, #4]
 800a578:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800a5e4 <HAL_RCC_GetSysClockFreq+0x20c>
 800a57c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a580:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a588:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a58c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a590:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800a594:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800a596:	4b0f      	ldr	r3, [pc, #60]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59a:	0e1b      	lsrs	r3, r3, #24
 800a59c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	ee07 3a90 	vmov	s15, r3
 800a5aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a5ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5ba:	ee17 3a90 	vmov	r3, s15
 800a5be:	623b      	str	r3, [r7, #32]
 800a5c0:	e001      	b.n	800a5c6 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	372c      	adds	r7, #44	; 0x2c
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr
 800a5d4:	46020c00 	.word	0x46020c00
 800a5d8:	0800e7b8 	.word	0x0800e7b8
 800a5dc:	00f42400 	.word	0x00f42400
 800a5e0:	4b742400 	.word	0x4b742400
 800a5e4:	46000000 	.word	0x46000000

0800a5e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a5ec:	f7ff fef4 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	4b07      	ldr	r3, [pc, #28]	; (800a610 <HAL_RCC_GetHCLKFreq+0x28>)
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	f003 030f 	and.w	r3, r3, #15
 800a5fa:	4906      	ldr	r1, [pc, #24]	; (800a614 <HAL_RCC_GetHCLKFreq+0x2c>)
 800a5fc:	5ccb      	ldrb	r3, [r1, r3]
 800a5fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a602:	4a05      	ldr	r2, [pc, #20]	; (800a618 <HAL_RCC_GetHCLKFreq+0x30>)
 800a604:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800a606:	4b04      	ldr	r3, [pc, #16]	; (800a618 <HAL_RCC_GetHCLKFreq+0x30>)
 800a608:	681b      	ldr	r3, [r3, #0]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	46020c00 	.word	0x46020c00
 800a614:	0800e7a0 	.word	0x0800e7a0
 800a618:	20000000 	.word	0x20000000

0800a61c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800a620:	f7ff ffe2 	bl	800a5e8 <HAL_RCC_GetHCLKFreq>
 800a624:	4602      	mov	r2, r0
 800a626:	4b05      	ldr	r3, [pc, #20]	; (800a63c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	091b      	lsrs	r3, r3, #4
 800a62c:	f003 0307 	and.w	r3, r3, #7
 800a630:	4903      	ldr	r1, [pc, #12]	; (800a640 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a632:	5ccb      	ldrb	r3, [r1, r3]
 800a634:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a638:	4618      	mov	r0, r3
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	46020c00 	.word	0x46020c00
 800a640:	0800e7b0 	.word	0x0800e7b0

0800a644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800a648:	f7ff ffce 	bl	800a5e8 <HAL_RCC_GetHCLKFreq>
 800a64c:	4602      	mov	r2, r0
 800a64e:	4b05      	ldr	r3, [pc, #20]	; (800a664 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a650:	6a1b      	ldr	r3, [r3, #32]
 800a652:	0a1b      	lsrs	r3, r3, #8
 800a654:	f003 0307 	and.w	r3, r3, #7
 800a658:	4903      	ldr	r1, [pc, #12]	; (800a668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a65a:	5ccb      	ldrb	r3, [r1, r3]
 800a65c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a660:	4618      	mov	r0, r3
 800a662:	bd80      	pop	{r7, pc}
 800a664:	46020c00 	.word	0x46020c00
 800a668:	0800e7b0 	.word	0x0800e7b0

0800a66c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800a670:	f7ff ffba 	bl	800a5e8 <HAL_RCC_GetHCLKFreq>
 800a674:	4602      	mov	r2, r0
 800a676:	4b05      	ldr	r3, [pc, #20]	; (800a68c <HAL_RCC_GetPCLK3Freq+0x20>)
 800a678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67a:	091b      	lsrs	r3, r3, #4
 800a67c:	f003 0307 	and.w	r3, r3, #7
 800a680:	4903      	ldr	r1, [pc, #12]	; (800a690 <HAL_RCC_GetPCLK3Freq+0x24>)
 800a682:	5ccb      	ldrb	r3, [r1, r3]
 800a684:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a688:	4618      	mov	r0, r3
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	46020c00 	.word	0x46020c00
 800a690:	0800e7b0 	.word	0x0800e7b0

0800a694 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a69c:	4b3e      	ldr	r3, [pc, #248]	; (800a798 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a69e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6a2:	f003 0304 	and.w	r3, r3, #4
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a6aa:	f7fe fdb9 	bl	8009220 <HAL_PWREx_GetVoltageRange>
 800a6ae:	6178      	str	r0, [r7, #20]
 800a6b0:	e019      	b.n	800a6e6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a6b2:	4b39      	ldr	r3, [pc, #228]	; (800a798 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a6b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6b8:	4a37      	ldr	r2, [pc, #220]	; (800a798 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a6ba:	f043 0304 	orr.w	r3, r3, #4
 800a6be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a6c2:	4b35      	ldr	r3, [pc, #212]	; (800a798 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a6c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6c8:	f003 0304 	and.w	r3, r3, #4
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a6d0:	f7fe fda6 	bl	8009220 <HAL_PWREx_GetVoltageRange>
 800a6d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a6d6:	4b30      	ldr	r3, [pc, #192]	; (800a798 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a6d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6dc:	4a2e      	ldr	r2, [pc, #184]	; (800a798 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a6de:	f023 0304 	bic.w	r3, r3, #4
 800a6e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a6ec:	d003      	beq.n	800a6f6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6f4:	d109      	bne.n	800a70a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6fc:	d202      	bcs.n	800a704 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800a6fe:	2301      	movs	r3, #1
 800a700:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a702:	e033      	b.n	800a76c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800a704:	2300      	movs	r3, #0
 800a706:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a708:	e030      	b.n	800a76c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a710:	d208      	bcs.n	800a724 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a718:	d102      	bne.n	800a720 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800a71a:	2303      	movs	r3, #3
 800a71c:	613b      	str	r3, [r7, #16]
 800a71e:	e025      	b.n	800a76c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	e035      	b.n	800a790 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a72a:	d90f      	bls.n	800a74c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d109      	bne.n	800a746 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a738:	d902      	bls.n	800a740 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800a73a:	2300      	movs	r3, #0
 800a73c:	613b      	str	r3, [r7, #16]
 800a73e:	e015      	b.n	800a76c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800a740:	2301      	movs	r3, #1
 800a742:	613b      	str	r3, [r7, #16]
 800a744:	e012      	b.n	800a76c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800a746:	2300      	movs	r3, #0
 800a748:	613b      	str	r3, [r7, #16]
 800a74a:	e00f      	b.n	800a76c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a752:	d109      	bne.n	800a768 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a75a:	d102      	bne.n	800a762 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800a75c:	2301      	movs	r3, #1
 800a75e:	613b      	str	r3, [r7, #16]
 800a760:	e004      	b.n	800a76c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800a762:	2302      	movs	r3, #2
 800a764:	613b      	str	r3, [r7, #16]
 800a766:	e001      	b.n	800a76c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800a768:	2301      	movs	r3, #1
 800a76a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a76c:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f023 020f 	bic.w	r2, r3, #15
 800a774:	4909      	ldr	r1, [pc, #36]	; (800a79c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	4313      	orrs	r3, r2
 800a77a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800a77c:	4b07      	ldr	r3, [pc, #28]	; (800a79c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 030f 	and.w	r3, r3, #15
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	429a      	cmp	r2, r3
 800a788:	d001      	beq.n	800a78e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e000      	b.n	800a790 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	46020c00 	.word	0x46020c00
 800a79c:	40022000 	.word	0x40022000

0800a7a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800a7a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7a4:	b0ba      	sub	sp, #232	; 0xe8
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a7b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f002 0401 	and.w	r4, r2, #1
 800a7c4:	2500      	movs	r5, #0
 800a7c6:	ea54 0305 	orrs.w	r3, r4, r5
 800a7ca:	d00b      	beq.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800a7cc:	4bcb      	ldr	r3, [pc, #812]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a7ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7d2:	f023 0103 	bic.w	r1, r3, #3
 800a7d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7dc:	4ac7      	ldr	r2, [pc, #796]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a7de:	430b      	orrs	r3, r1
 800a7e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a7e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	f002 0802 	and.w	r8, r2, #2
 800a7f0:	f04f 0900 	mov.w	r9, #0
 800a7f4:	ea58 0309 	orrs.w	r3, r8, r9
 800a7f8:	d00b      	beq.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800a7fa:	4bc0      	ldr	r3, [pc, #768]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a7fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a800:	f023 010c 	bic.w	r1, r3, #12
 800a804:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a80a:	4abc      	ldr	r2, [pc, #752]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a80c:	430b      	orrs	r3, r1
 800a80e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	f002 0a04 	and.w	sl, r2, #4
 800a81e:	f04f 0b00 	mov.w	fp, #0
 800a822:	ea5a 030b 	orrs.w	r3, sl, fp
 800a826:	d00b      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a828:	4bb4      	ldr	r3, [pc, #720]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a82a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a82e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a838:	4ab0      	ldr	r2, [pc, #704]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a83a:	430b      	orrs	r3, r1
 800a83c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a840:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	f002 0308 	and.w	r3, r2, #8
 800a84c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a850:	2300      	movs	r3, #0
 800a852:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a856:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a85a:	460b      	mov	r3, r1
 800a85c:	4313      	orrs	r3, r2
 800a85e:	d00b      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a860:	4ba6      	ldr	r3, [pc, #664]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a866:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a86a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a86e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a870:	4aa2      	ldr	r2, [pc, #648]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a872:	430b      	orrs	r3, r1
 800a874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a878:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	f002 0310 	and.w	r3, r2, #16
 800a884:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a888:	2300      	movs	r3, #0
 800a88a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a88e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a892:	460b      	mov	r3, r1
 800a894:	4313      	orrs	r3, r2
 800a896:	d00b      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800a898:	4b98      	ldr	r3, [pc, #608]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a89a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a89e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a8a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8a8:	4a94      	ldr	r2, [pc, #592]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8aa:	430b      	orrs	r3, r1
 800a8ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a8b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f002 0320 	and.w	r3, r2, #32
 800a8bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a8c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	d00b      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800a8d0:	4b8a      	ldr	r3, [pc, #552]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a8d6:	f023 0107 	bic.w	r1, r3, #7
 800a8da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8e0:	4a86      	ldr	r2, [pc, #536]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8e2:	430b      	orrs	r3, r1
 800a8e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a8e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a8f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a902:	460b      	mov	r3, r1
 800a904:	4313      	orrs	r3, r2
 800a906:	d00b      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800a908:	4b7c      	ldr	r3, [pc, #496]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a90a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a90e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800a912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a918:	4a78      	ldr	r2, [pc, #480]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a91a:	430b      	orrs	r3, r1
 800a91c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a928:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a92c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a930:	2300      	movs	r3, #0
 800a932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a936:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a93a:	460b      	mov	r3, r1
 800a93c:	4313      	orrs	r3, r2
 800a93e:	d00b      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800a940:	4b6e      	ldr	r3, [pc, #440]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a94a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a950:	4a6a      	ldr	r2, [pc, #424]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a952:	430b      	orrs	r3, r1
 800a954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a958:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800a964:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a968:	2300      	movs	r3, #0
 800a96a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a96e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a972:	460b      	mov	r3, r1
 800a974:	4313      	orrs	r3, r2
 800a976:	d00b      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800a978:	4b60      	ldr	r3, [pc, #384]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a97a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a97e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a988:	4a5c      	ldr	r2, [pc, #368]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a98a:	430b      	orrs	r3, r1
 800a98c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a990:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a99c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a9a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	d00b      	beq.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800a9b0:	4b52      	ldr	r3, [pc, #328]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9b6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800a9ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9c0:	4a4e      	ldr	r2, [pc, #312]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9c2:	430b      	orrs	r3, r1
 800a9c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a9c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d0:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800a9d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a9de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	d00b      	beq.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800a9e8:	4b44      	ldr	r3, [pc, #272]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a9ee:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800a9f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9f8:	4a40      	ldr	r2, [pc, #256]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9fa:	430b      	orrs	r3, r1
 800a9fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800aa00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800aa0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aa10:	2300      	movs	r3, #0
 800aa12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aa16:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	d00b      	beq.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800aa20:	4b36      	ldr	r3, [pc, #216]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800aa22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa26:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800aa2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa30:	4a32      	ldr	r2, [pc, #200]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800aa32:	430b      	orrs	r3, r1
 800aa34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800aa38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aa44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa48:	2300      	movs	r3, #0
 800aa4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800aa52:	460b      	mov	r3, r1
 800aa54:	4313      	orrs	r3, r2
 800aa56:	d00c      	beq.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800aa58:	4b28      	ldr	r3, [pc, #160]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800aa5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aa62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa6a:	4a24      	ldr	r2, [pc, #144]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800aa6c:	430b      	orrs	r3, r1
 800aa6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800aa72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800aa7e:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa80:	2300      	movs	r3, #0
 800aa82:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800aa88:	460b      	mov	r3, r1
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	d04f      	beq.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800aa8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa96:	2b80      	cmp	r3, #128	; 0x80
 800aa98:	d02d      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800aa9a:	2b80      	cmp	r3, #128	; 0x80
 800aa9c:	d827      	bhi.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800aa9e:	2b60      	cmp	r3, #96	; 0x60
 800aaa0:	d02e      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800aaa2:	2b60      	cmp	r3, #96	; 0x60
 800aaa4:	d823      	bhi.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800aaa6:	2b40      	cmp	r3, #64	; 0x40
 800aaa8:	d006      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800aaaa:	2b40      	cmp	r3, #64	; 0x40
 800aaac:	d81f      	bhi.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d009      	beq.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800aab2:	2b20      	cmp	r3, #32
 800aab4:	d011      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800aab6:	e01a      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aab8:	4b10      	ldr	r3, [pc, #64]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800aaba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aabc:	4a0f      	ldr	r2, [pc, #60]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800aabe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aac2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800aac4:	e01d      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aaca:	3308      	adds	r3, #8
 800aacc:	4618      	mov	r0, r3
 800aace:	f002 fa41 	bl	800cf54 <RCCEx_PLL2_Config>
 800aad2:	4603      	mov	r3, r0
 800aad4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800aad8:	e013      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aade:	332c      	adds	r3, #44	; 0x2c
 800aae0:	4618      	mov	r0, r3
 800aae2:	f002 facf 	bl	800d084 <RCCEx_PLL3_Config>
 800aae6:	4603      	mov	r3, r0
 800aae8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800aaec:	e009      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800aaf4:	e005      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800aaf6:	bf00      	nop
 800aaf8:	e003      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800aafa:	bf00      	nop
 800aafc:	46020c00 	.word	0x46020c00
        break;
 800ab00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab02:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10d      	bne.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800ab0a:	4bb6      	ldr	r3, [pc, #728]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ab0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ab10:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800ab14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab1c:	4ab1      	ldr	r2, [pc, #708]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ab1e:	430b      	orrs	r3, r1
 800ab20:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800ab24:	e003      	b.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab26:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ab2a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ab2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab36:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ab3a:	673b      	str	r3, [r7, #112]	; 0x70
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	677b      	str	r3, [r7, #116]	; 0x74
 800ab40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ab44:	460b      	mov	r3, r1
 800ab46:	4313      	orrs	r3, r2
 800ab48:	d053      	beq.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800ab4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab56:	d033      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ab58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab5c:	d82c      	bhi.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800ab5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab62:	d02f      	beq.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800ab64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab68:	d826      	bhi.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800ab6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab6e:	d008      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800ab70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab74:	d820      	bhi.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00a      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800ab7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab7e:	d011      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800ab80:	e01a      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ab82:	4b98      	ldr	r3, [pc, #608]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ab84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab86:	4a97      	ldr	r2, [pc, #604]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ab88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab8c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ab8e:	e01a      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ab90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab94:	3308      	adds	r3, #8
 800ab96:	4618      	mov	r0, r3
 800ab98:	f002 f9dc 	bl	800cf54 <RCCEx_PLL2_Config>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800aba2:	e010      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aba8:	332c      	adds	r3, #44	; 0x2c
 800abaa:	4618      	mov	r0, r3
 800abac:	f002 fa6a 	bl	800d084 <RCCEx_PLL3_Config>
 800abb0:	4603      	mov	r3, r0
 800abb2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800abb6:	e006      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800abbe:	e002      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800abc0:	bf00      	nop
 800abc2:	e000      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800abc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abc6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10d      	bne.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800abce:	4b85      	ldr	r3, [pc, #532]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800abd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800abd4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800abd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800abdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abe0:	4a80      	ldr	r2, [pc, #512]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800abe2:	430b      	orrs	r3, r1
 800abe4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800abe8:	e003      	b.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800abee:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800abf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800abf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfa:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800abfe:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac00:	2300      	movs	r3, #0
 800ac02:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac04:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	d046      	beq.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800ac0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac16:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ac1a:	d028      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800ac1c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ac20:	d821      	bhi.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800ac22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac26:	d022      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800ac28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac2c:	d81b      	bhi.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800ac2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac32:	d01c      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800ac34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac38:	d815      	bhi.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800ac3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac3e:	d008      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800ac40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac44:	d80f      	bhi.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d011      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800ac4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac4e:	d00e      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800ac50:	e009      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ac52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac56:	3308      	adds	r3, #8
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f002 f97b 	bl	800cf54 <RCCEx_PLL2_Config>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800ac64:	e004      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800ac6c:	e000      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800ac6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac70:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10d      	bne.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800ac78:	4b5a      	ldr	r3, [pc, #360]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ac7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ac7e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ac82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac8a:	4a56      	ldr	r2, [pc, #344]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ac8c:	430b      	orrs	r3, r1
 800ac8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ac92:	e003      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac94:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ac98:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800ac9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800aca8:	663b      	str	r3, [r7, #96]	; 0x60
 800acaa:	2300      	movs	r3, #0
 800acac:	667b      	str	r3, [r7, #100]	; 0x64
 800acae:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800acb2:	460b      	mov	r3, r1
 800acb4:	4313      	orrs	r3, r2
 800acb6:	d03f      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800acb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800acbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc0:	2b04      	cmp	r3, #4
 800acc2:	d81e      	bhi.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x562>
 800acc4:	a201      	add	r2, pc, #4	; (adr r2, 800accc <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800acc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acca:	bf00      	nop
 800accc:	0800ad0b 	.word	0x0800ad0b
 800acd0:	0800ace1 	.word	0x0800ace1
 800acd4:	0800acef 	.word	0x0800acef
 800acd8:	0800ad0b 	.word	0x0800ad0b
 800acdc:	0800ad0b 	.word	0x0800ad0b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ace0:	4b40      	ldr	r3, [pc, #256]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ace2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace4:	4a3f      	ldr	r2, [pc, #252]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ace6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acea:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800acec:	e00e      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800acee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800acf2:	332c      	adds	r3, #44	; 0x2c
 800acf4:	4618      	mov	r0, r3
 800acf6:	f002 f9c5 	bl	800d084 <RCCEx_PLL3_Config>
 800acfa:	4603      	mov	r3, r0
 800acfc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800ad00:	e004      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800ad08:	e000      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800ad0a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ad0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d10d      	bne.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800ad14:	4b33      	ldr	r3, [pc, #204]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ad16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ad1a:	f023 0107 	bic.w	r1, r3, #7
 800ad1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad26:	4a2f      	ldr	r2, [pc, #188]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ad28:	430b      	orrs	r3, r1
 800ad2a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800ad2e:	e003      	b.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad30:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ad34:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800ad38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad40:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ad44:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad46:	2300      	movs	r3, #0
 800ad48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4313      	orrs	r3, r2
 800ad52:	d04d      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800ad54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad60:	d028      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800ad62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad66:	d821      	bhi.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800ad68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad6c:	d024      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800ad6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad72:	d81b      	bhi.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800ad74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad78:	d00e      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800ad7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad7e:	d815      	bhi.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d01b      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800ad84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad88:	d110      	bne.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad8a:	4b16      	ldr	r3, [pc, #88]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ad8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad8e:	4a15      	ldr	r2, [pc, #84]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ad90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad94:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800ad96:	e012      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ad98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad9c:	332c      	adds	r3, #44	; 0x2c
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f002 f970 	bl	800d084 <RCCEx_PLL3_Config>
 800ada4:	4603      	mov	r3, r0
 800ada6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800adaa:	e008      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800adb2:	e004      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800adb4:	bf00      	nop
 800adb6:	e002      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800adb8:	bf00      	nop
 800adba:	e000      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800adbc:	bf00      	nop
    }
    if (ret == HAL_OK)
 800adbe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d110      	bne.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800adc6:	4b07      	ldr	r3, [pc, #28]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800adc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800adcc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800add0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800add4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800add8:	4a02      	ldr	r2, [pc, #8]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800adda:	430b      	orrs	r3, r1
 800addc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ade0:	e006      	b.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800ade2:	bf00      	nop
 800ade4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ade8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800adec:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800adf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800adfc:	653b      	str	r3, [r7, #80]	; 0x50
 800adfe:	2300      	movs	r3, #0
 800ae00:	657b      	str	r3, [r7, #84]	; 0x54
 800ae02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ae06:	460b      	mov	r3, r1
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	f000 80b5 	beq.w	800af78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae14:	4b9d      	ldr	r3, [pc, #628]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ae16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae1a:	f003 0304 	and.w	r3, r3, #4
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d113      	bne.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae22:	4b9a      	ldr	r3, [pc, #616]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ae24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae28:	4a98      	ldr	r2, [pc, #608]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ae2a:	f043 0304 	orr.w	r3, r3, #4
 800ae2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800ae32:	4b96      	ldr	r3, [pc, #600]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ae34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae38:	f003 0304 	and.w	r3, r3, #4
 800ae3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800ae44:	2301      	movs	r3, #1
 800ae46:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800ae4a:	4b91      	ldr	r3, [pc, #580]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800ae4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4e:	4a90      	ldr	r2, [pc, #576]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800ae50:	f043 0301 	orr.w	r3, r3, #1
 800ae54:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae56:	f7fd fe79 	bl	8008b4c <HAL_GetTick>
 800ae5a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ae5e:	e00b      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae60:	f7fd fe74 	bl	8008b4c <HAL_GetTick>
 800ae64:	4602      	mov	r2, r0
 800ae66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d903      	bls.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800ae70:	2303      	movs	r3, #3
 800ae72:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800ae76:	e005      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ae78:	4b85      	ldr	r3, [pc, #532]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800ae7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7c:	f003 0301 	and.w	r3, r3, #1
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d0ed      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800ae84:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d165      	bne.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ae8c:	4b7f      	ldr	r3, [pc, #508]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ae8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800ae9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d023      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800aea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aea6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800aeaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d01b      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aeb2:	4b76      	ldr	r3, [pc, #472]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800aeb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aeb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aebc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aec0:	4b72      	ldr	r3, [pc, #456]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800aec2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aec6:	4a71      	ldr	r2, [pc, #452]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800aec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aecc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aed0:	4b6e      	ldr	r3, [pc, #440]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800aed2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aed6:	4a6d      	ldr	r2, [pc, #436]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800aed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aedc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aee0:	4a6a      	ldr	r2, [pc, #424]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800aee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aee6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aeea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeee:	f003 0301 	and.w	r3, r3, #1
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d019      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aef6:	f7fd fe29 	bl	8008b4c <HAL_GetTick>
 800aefa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aefe:	e00d      	b.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af00:	f7fd fe24 	bl	8008b4c <HAL_GetTick>
 800af04:	4602      	mov	r2, r0
 800af06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af0a:	1ad2      	subs	r2, r2, r3
 800af0c:	f241 3388 	movw	r3, #5000	; 0x1388
 800af10:	429a      	cmp	r2, r3
 800af12:	d903      	bls.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800af14:	2303      	movs	r3, #3
 800af16:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800af1a:	e006      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af1c:	4b5b      	ldr	r3, [pc, #364]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800af1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af22:	f003 0302 	and.w	r3, r3, #2
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0ea      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800af2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10d      	bne.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800af32:	4b56      	ldr	r3, [pc, #344]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800af34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af38:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800af3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800af44:	4a51      	ldr	r2, [pc, #324]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800af46:	430b      	orrs	r3, r1
 800af48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800af4c:	e008      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800af52:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800af56:	e003      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af58:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800af5c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800af60:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800af64:	2b01      	cmp	r3, #1
 800af66:	d107      	bne.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af68:	4b48      	ldr	r3, [pc, #288]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800af6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af6e:	4a47      	ldr	r2, [pc, #284]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800af70:	f023 0304 	bic.w	r3, r3, #4
 800af74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800af78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800af84:	64bb      	str	r3, [r7, #72]	; 0x48
 800af86:	2300      	movs	r3, #0
 800af88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af8a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800af8e:	460b      	mov	r3, r1
 800af90:	4313      	orrs	r3, r2
 800af92:	d042      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800af94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af9c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800afa0:	d022      	beq.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800afa2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800afa6:	d81b      	bhi.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800afa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afac:	d011      	beq.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800afae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afb2:	d815      	bhi.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d019      	beq.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800afb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afbc:	d110      	bne.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800afbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afc2:	3308      	adds	r3, #8
 800afc4:	4618      	mov	r0, r3
 800afc6:	f001 ffc5 	bl	800cf54 <RCCEx_PLL2_Config>
 800afca:	4603      	mov	r3, r0
 800afcc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800afd0:	e00d      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afd2:	4b2e      	ldr	r3, [pc, #184]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800afd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd6:	4a2d      	ldr	r2, [pc, #180]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800afd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afdc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800afde:	e006      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800afe6:	e002      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800afe8:	bf00      	nop
 800afea:	e000      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800afec:	bf00      	nop
    }
    if (ret == HAL_OK)
 800afee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10d      	bne.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800aff6:	4b25      	ldr	r3, [pc, #148]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800aff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800affc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800b000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b004:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b008:	4a20      	ldr	r2, [pc, #128]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800b00a:	430b      	orrs	r3, r1
 800b00c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b010:	e003      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b012:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b016:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b01a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b022:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b026:	643b      	str	r3, [r7, #64]	; 0x40
 800b028:	2300      	movs	r3, #0
 800b02a:	647b      	str	r3, [r7, #68]	; 0x44
 800b02c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b030:	460b      	mov	r3, r1
 800b032:	4313      	orrs	r3, r2
 800b034:	d032      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b03a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b03e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b042:	d00b      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800b044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b048:	d804      	bhi.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d008      	beq.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800b04e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b052:	d007      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b05a:	e004      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800b05c:	bf00      	nop
 800b05e:	e002      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800b060:	bf00      	nop
 800b062:	e000      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800b064:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b066:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d112      	bne.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b06e:	4b07      	ldr	r3, [pc, #28]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800b070:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b074:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b078:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b07c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b080:	4a02      	ldr	r2, [pc, #8]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800b082:	430b      	orrs	r3, r1
 800b084:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800b088:	e008      	b.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800b08a:	bf00      	nop
 800b08c:	46020c00 	.word	0x46020c00
 800b090:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b094:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b098:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b09c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b0a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	d00c      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b0b8:	4b98      	ldr	r3, [pc, #608]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b0ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b0be:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800b0c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0ca:	4a94      	ldr	r2, [pc, #592]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b0cc:	430b      	orrs	r3, r1
 800b0ce:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b0d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0da:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b0de:	633b      	str	r3, [r7, #48]	; 0x30
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b0e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	d019      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b0ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b0f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0fa:	d105      	bne.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b0fc:	4b87      	ldr	r3, [pc, #540]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b100:	4a86      	ldr	r2, [pc, #536]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b106:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b108:	4b84      	ldr	r3, [pc, #528]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b10a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b10e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800b112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b116:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b11a:	4a80      	ldr	r2, [pc, #512]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b11c:	430b      	orrs	r3, r1
 800b11e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b12e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b130:	2300      	movs	r3, #0
 800b132:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b134:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b138:	460b      	mov	r3, r1
 800b13a:	4313      	orrs	r3, r2
 800b13c:	d00c      	beq.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b13e:	4b77      	ldr	r3, [pc, #476]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b144:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b148:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b14c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b150:	4972      	ldr	r1, [pc, #456]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b152:	4313      	orrs	r3, r2
 800b154:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b158:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b164:	623b      	str	r3, [r7, #32]
 800b166:	2300      	movs	r3, #0
 800b168:	627b      	str	r3, [r7, #36]	; 0x24
 800b16a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b16e:	460b      	mov	r3, r1
 800b170:	4313      	orrs	r3, r2
 800b172:	d00c      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b174:	4b69      	ldr	r3, [pc, #420]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b17a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b17e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b182:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b186:	4965      	ldr	r1, [pc, #404]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b188:	4313      	orrs	r3, r2
 800b18a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b18e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b196:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b19a:	61bb      	str	r3, [r7, #24]
 800b19c:	2300      	movs	r3, #0
 800b19e:	61fb      	str	r3, [r7, #28]
 800b1a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	d00c      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b1aa:	4b5c      	ldr	r3, [pc, #368]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b1ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b1b0:	f023 0218 	bic.w	r2, r3, #24
 800b1b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b1bc:	4957      	ldr	r1, [pc, #348]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b1c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800b1d0:	613b      	str	r3, [r7, #16]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	617b      	str	r3, [r7, #20]
 800b1d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	d032      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b1e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1ec:	d105      	bne.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1ee:	4b4b      	ldr	r3, [pc, #300]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f2:	4a4a      	ldr	r2, [pc, #296]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b1f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1f8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b1fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b202:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b206:	d108      	bne.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b20c:	3308      	adds	r3, #8
 800b20e:	4618      	mov	r0, r3
 800b210:	f001 fea0 	bl	800cf54 <RCCEx_PLL2_Config>
 800b214:	4603      	mov	r3, r0
 800b216:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800b21a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10d      	bne.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b222:	4b3e      	ldr	r3, [pc, #248]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b224:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b228:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b22c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b230:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b234:	4939      	ldr	r1, [pc, #228]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b236:	4313      	orrs	r3, r2
 800b238:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800b23c:	e003      	b.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b23e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b242:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800b246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800b252:	60bb      	str	r3, [r7, #8]
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]
 800b258:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b25c:	460b      	mov	r3, r1
 800b25e:	4313      	orrs	r3, r2
 800b260:	d03a      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800b262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b26a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b26e:	d00e      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800b270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b274:	d815      	bhi.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b276:	2b00      	cmp	r3, #0
 800b278:	d017      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800b27a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b27e:	d110      	bne.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b280:	4b26      	ldr	r3, [pc, #152]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b284:	4a25      	ldr	r2, [pc, #148]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b28a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b28c:	e00e      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b28e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b292:	3308      	adds	r3, #8
 800b294:	4618      	mov	r0, r3
 800b296:	f001 fe5d 	bl	800cf54 <RCCEx_PLL2_Config>
 800b29a:	4603      	mov	r3, r0
 800b29c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b2a0:	e004      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b2a8:	e000      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800b2aa:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b2ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10d      	bne.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800b2b4:	4b19      	ldr	r3, [pc, #100]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b2b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b2ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b2be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2c6:	4915      	ldr	r1, [pc, #84]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800b2ce:	e003      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b2d4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800b2d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800b2e4:	603b      	str	r3, [r7, #0]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	607b      	str	r3, [r7, #4]
 800b2ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	d00c      	beq.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800b2f4:	4b09      	ldr	r3, [pc, #36]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b2f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b2fa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800b2fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b302:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b306:	4905      	ldr	r1, [pc, #20]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b308:	4313      	orrs	r3, r2
 800b30a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800b30e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800b312:	4618      	mov	r0, r3
 800b314:	37e8      	adds	r7, #232	; 0xe8
 800b316:	46bd      	mov	sp, r7
 800b318:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b31c:	46020c00 	.word	0x46020c00

0800b320 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b320:	b480      	push	{r7}
 800b322:	b089      	sub	sp, #36	; 0x24
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800b328:	4bad      	ldr	r3, [pc, #692]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b330:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b332:	4bab      	ldr	r3, [pc, #684]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b336:	f003 0303 	and.w	r3, r3, #3
 800b33a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b33c:	4ba8      	ldr	r3, [pc, #672]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b340:	0a1b      	lsrs	r3, r3, #8
 800b342:	f003 030f 	and.w	r3, r3, #15
 800b346:	3301      	adds	r3, #1
 800b348:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b34a:	4ba5      	ldr	r3, [pc, #660]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34e:	091b      	lsrs	r3, r3, #4
 800b350:	f003 0301 	and.w	r3, r3, #1
 800b354:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b356:	4ba2      	ldr	r3, [pc, #648]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35a:	08db      	lsrs	r3, r3, #3
 800b35c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	fb02 f303 	mul.w	r3, r2, r3
 800b366:	ee07 3a90 	vmov	s15, r3
 800b36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b36e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	2b00      	cmp	r3, #0
 800b376:	f000 8123 	beq.w	800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	d062      	beq.n	800b446 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	2b03      	cmp	r3, #3
 800b384:	f200 8081 	bhi.w	800b48a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d024      	beq.n	800b3d8 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2b02      	cmp	r3, #2
 800b392:	d17a      	bne.n	800b48a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	ee07 3a90 	vmov	s15, r3
 800b39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39e:	eddf 6a91 	vldr	s13, [pc, #580]	; 800b5e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800b3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a6:	4b8e      	ldr	r3, [pc, #568]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ae:	ee07 3a90 	vmov	s15, r3
 800b3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3ba:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800b5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800b3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3d6:	e08f      	b.n	800b4f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b3d8:	4b81      	ldr	r3, [pc, #516]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d005      	beq.n	800b3f0 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 800b3e4:	4b7e      	ldr	r3, [pc, #504]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	0f1b      	lsrs	r3, r3, #28
 800b3ea:	f003 030f 	and.w	r3, r3, #15
 800b3ee:	e006      	b.n	800b3fe <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 800b3f0:	4b7b      	ldr	r3, [pc, #492]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b3f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b3f6:	041b      	lsls	r3, r3, #16
 800b3f8:	0f1b      	lsrs	r3, r3, #28
 800b3fa:	f003 030f 	and.w	r3, r3, #15
 800b3fe:	4a7b      	ldr	r2, [pc, #492]	; (800b5ec <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800b400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b404:	ee07 3a90 	vmov	s15, r3
 800b408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	ee07 3a90 	vmov	s15, r3
 800b420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b424:	ed97 6a02 	vldr	s12, [r7, #8]
 800b428:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800b5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800b42c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b438:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b43c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b440:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b444:	e058      	b.n	800b4f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	ee07 3a90 	vmov	s15, r3
 800b44c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b450:	eddf 6a64 	vldr	s13, [pc, #400]	; 800b5e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800b454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b458:	4b61      	ldr	r3, [pc, #388]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b45c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b460:	ee07 3a90 	vmov	s15, r3
 800b464:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800b468:	ed97 6a02 	vldr	s12, [r7, #8]
 800b46c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800b5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800b470:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b474:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800b478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b47c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b480:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b484:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b488:	e036      	b.n	800b4f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b48a:	4b55      	ldr	r3, [pc, #340]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b492:	2b00      	cmp	r3, #0
 800b494:	d005      	beq.n	800b4a2 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800b496:	4b52      	ldr	r3, [pc, #328]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	0f1b      	lsrs	r3, r3, #28
 800b49c:	f003 030f 	and.w	r3, r3, #15
 800b4a0:	e006      	b.n	800b4b0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 800b4a2:	4b4f      	ldr	r3, [pc, #316]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b4a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b4a8:	041b      	lsls	r3, r3, #16
 800b4aa:	0f1b      	lsrs	r3, r3, #28
 800b4ac:	f003 030f 	and.w	r3, r3, #15
 800b4b0:	4a4e      	ldr	r2, [pc, #312]	; (800b5ec <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800b4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4b6:	ee07 3a90 	vmov	s15, r3
 800b4ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	ee07 3a90 	vmov	s15, r3
 800b4c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	ee07 3a90 	vmov	s15, r3
 800b4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4da:	eddf 5a43 	vldr	s11, [pc, #268]	; 800b5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800b4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4f6:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800b4f8:	4b39      	ldr	r3, [pc, #228]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b500:	2b00      	cmp	r3, #0
 800b502:	d017      	beq.n	800b534 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b504:	4b36      	ldr	r3, [pc, #216]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b508:	0a5b      	lsrs	r3, r3, #9
 800b50a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b50e:	ee07 3a90 	vmov	s15, r3
 800b512:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800b516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b51a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b51e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b52a:	ee17 2a90 	vmov	r2, s15
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	e002      	b.n	800b53a <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800b53a:	4b29      	ldr	r3, [pc, #164]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b53e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d017      	beq.n	800b576 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b546:	4b26      	ldr	r3, [pc, #152]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b54a:	0c1b      	lsrs	r3, r3, #16
 800b54c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b550:	ee07 3a90 	vmov	s15, r3
 800b554:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800b558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b55c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b560:	edd7 6a07 	vldr	s13, [r7, #28]
 800b564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b56c:	ee17 2a90 	vmov	r2, s15
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	605a      	str	r2, [r3, #4]
 800b574:	e002      	b.n	800b57c <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800b57c:	4b18      	ldr	r3, [pc, #96]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b584:	2b00      	cmp	r3, #0
 800b586:	d017      	beq.n	800b5b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b588:	4b15      	ldr	r3, [pc, #84]	; (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800b58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58c:	0e1b      	lsrs	r3, r3, #24
 800b58e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b592:	ee07 3a90 	vmov	s15, r3
 800b596:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800b59a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b59e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b5a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ae:	ee17 2a90 	vmov	r2, s15
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b5b6:	e00c      	b.n	800b5d2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	609a      	str	r2, [r3, #8]
}
 800b5be:	e008      	b.n	800b5d2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	609a      	str	r2, [r3, #8]
}
 800b5d2:	bf00      	nop
 800b5d4:	3724      	adds	r7, #36	; 0x24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	46020c00 	.word	0x46020c00
 800b5e4:	4b742400 	.word	0x4b742400
 800b5e8:	46000000 	.word	0x46000000
 800b5ec:	0800e7b8 	.word	0x0800e7b8

0800b5f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b089      	sub	sp, #36	; 0x24
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800b5f8:	4bad      	ldr	r3, [pc, #692]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b600:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800b602:	4bab      	ldr	r3, [pc, #684]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b606:	f003 0303 	and.w	r3, r3, #3
 800b60a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800b60c:	4ba8      	ldr	r3, [pc, #672]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b610:	0a1b      	lsrs	r3, r3, #8
 800b612:	f003 030f 	and.w	r3, r3, #15
 800b616:	3301      	adds	r3, #1
 800b618:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800b61a:	4ba5      	ldr	r3, [pc, #660]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61e:	091b      	lsrs	r3, r3, #4
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800b626:	4ba2      	ldr	r3, [pc, #648]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b62a:	08db      	lsrs	r3, r3, #3
 800b62c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	fb02 f303 	mul.w	r3, r2, r3
 800b636:	ee07 3a90 	vmov	s15, r3
 800b63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b63e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	2b00      	cmp	r3, #0
 800b646:	f000 8123 	beq.w	800b890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2b03      	cmp	r3, #3
 800b64e:	d062      	beq.n	800b716 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	2b03      	cmp	r3, #3
 800b654:	f200 8081 	bhi.w	800b75a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d024      	beq.n	800b6a8 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2b02      	cmp	r3, #2
 800b662:	d17a      	bne.n	800b75a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	ee07 3a90 	vmov	s15, r3
 800b66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66e:	eddf 6a91 	vldr	s13, [pc, #580]	; 800b8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800b672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b676:	4b8e      	ldr	r3, [pc, #568]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b67e:	ee07 3a90 	vmov	s15, r3
 800b682:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800b686:	ed97 6a02 	vldr	s12, [r7, #8]
 800b68a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800b68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b692:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800b696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6a6:	e08f      	b.n	800b7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800b6a8:	4b81      	ldr	r3, [pc, #516]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d005      	beq.n	800b6c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 800b6b4:	4b7e      	ldr	r3, [pc, #504]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	0f1b      	lsrs	r3, r3, #28
 800b6ba:	f003 030f 	and.w	r3, r3, #15
 800b6be:	e006      	b.n	800b6ce <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 800b6c0:	4b7b      	ldr	r3, [pc, #492]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b6c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b6c6:	041b      	lsls	r3, r3, #16
 800b6c8:	0f1b      	lsrs	r3, r3, #28
 800b6ca:	f003 030f 	and.w	r3, r3, #15
 800b6ce:	4a7b      	ldr	r2, [pc, #492]	; (800b8bc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800b6d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6d4:	ee07 3a90 	vmov	s15, r3
 800b6d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	ee07 3a90 	vmov	s15, r3
 800b6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	ee07 3a90 	vmov	s15, r3
 800b6f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6f4:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6f8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800b6fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b708:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800b70c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b710:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b714:	e058      	b.n	800b7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	ee07 3a90 	vmov	s15, r3
 800b71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b720:	eddf 6a64 	vldr	s13, [pc, #400]	; 800b8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800b724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b728:	4b61      	ldr	r3, [pc, #388]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b72a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b72c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b730:	ee07 3a90 	vmov	s15, r3
 800b734:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800b738:	ed97 6a02 	vldr	s12, [r7, #8]
 800b73c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800b740:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b744:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800b748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b74c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b750:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b754:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b758:	e036      	b.n	800b7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800b75a:	4b55      	ldr	r3, [pc, #340]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b762:	2b00      	cmp	r3, #0
 800b764:	d005      	beq.n	800b772 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800b766:	4b52      	ldr	r3, [pc, #328]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	0f1b      	lsrs	r3, r3, #28
 800b76c:	f003 030f 	and.w	r3, r3, #15
 800b770:	e006      	b.n	800b780 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 800b772:	4b4f      	ldr	r3, [pc, #316]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b778:	041b      	lsls	r3, r3, #16
 800b77a:	0f1b      	lsrs	r3, r3, #28
 800b77c:	f003 030f 	and.w	r3, r3, #15
 800b780:	4a4e      	ldr	r2, [pc, #312]	; (800b8bc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800b782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	ee07 3a90 	vmov	s15, r3
 800b794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7aa:	eddf 5a43 	vldr	s11, [pc, #268]	; 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800b7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800b7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7c6:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800b7c8:	4b39      	ldr	r3, [pc, #228]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d017      	beq.n	800b804 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b7d4:	4b36      	ldr	r3, [pc, #216]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7d8:	0a5b      	lsrs	r3, r3, #9
 800b7da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7de:	ee07 3a90 	vmov	s15, r3
 800b7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800b7e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7ea:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b7ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7fa:	ee17 2a90 	vmov	r2, s15
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	601a      	str	r2, [r3, #0]
 800b802:	e002      	b.n	800b80a <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800b80a:	4b29      	ldr	r3, [pc, #164]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b812:	2b00      	cmp	r3, #0
 800b814:	d017      	beq.n	800b846 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b816:	4b26      	ldr	r3, [pc, #152]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b81a:	0c1b      	lsrs	r3, r3, #16
 800b81c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b820:	ee07 3a90 	vmov	s15, r3
 800b824:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800b828:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b82c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b830:	edd7 6a07 	vldr	s13, [r7, #28]
 800b834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b83c:	ee17 2a90 	vmov	r2, s15
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	605a      	str	r2, [r3, #4]
 800b844:	e002      	b.n	800b84c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800b84c:	4b18      	ldr	r3, [pc, #96]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b854:	2b00      	cmp	r3, #0
 800b856:	d017      	beq.n	800b888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b858:	4b15      	ldr	r3, [pc, #84]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b85c:	0e1b      	lsrs	r3, r3, #24
 800b85e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b862:	ee07 3a90 	vmov	s15, r3
 800b866:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800b86a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b86e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b872:	edd7 6a07 	vldr	s13, [r7, #28]
 800b876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b87a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b87e:	ee17 2a90 	vmov	r2, s15
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b886:	e00c      	b.n	800b8a2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	609a      	str	r2, [r3, #8]
}
 800b88e:	e008      	b.n	800b8a2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	609a      	str	r2, [r3, #8]
}
 800b8a2:	bf00      	nop
 800b8a4:	3724      	adds	r7, #36	; 0x24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	46020c00 	.word	0x46020c00
 800b8b4:	4b742400 	.word	0x4b742400
 800b8b8:	46000000 	.word	0x46000000
 800b8bc:	0800e7b8 	.word	0x0800e7b8

0800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b089      	sub	sp, #36	; 0x24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800b8c8:	4bad      	ldr	r3, [pc, #692]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b8ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8d0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800b8d2:	4bab      	ldr	r3, [pc, #684]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d6:	f003 0303 	and.w	r3, r3, #3
 800b8da:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800b8dc:	4ba8      	ldr	r3, [pc, #672]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b8de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e0:	0a1b      	lsrs	r3, r3, #8
 800b8e2:	f003 030f 	and.w	r3, r3, #15
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800b8ea:	4ba5      	ldr	r3, [pc, #660]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ee:	091b      	lsrs	r3, r3, #4
 800b8f0:	f003 0301 	and.w	r3, r3, #1
 800b8f4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800b8f6:	4ba2      	ldr	r3, [pc, #648]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b8f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8fa:	08db      	lsrs	r3, r3, #3
 800b8fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	fb02 f303 	mul.w	r3, r2, r3
 800b906:	ee07 3a90 	vmov	s15, r3
 800b90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b90e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	2b00      	cmp	r3, #0
 800b916:	f000 8123 	beq.w	800bb60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	2b03      	cmp	r3, #3
 800b91e:	d062      	beq.n	800b9e6 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	2b03      	cmp	r3, #3
 800b924:	f200 8081 	bhi.w	800ba2a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d024      	beq.n	800b978 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2b02      	cmp	r3, #2
 800b932:	d17a      	bne.n	800ba2a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	ee07 3a90 	vmov	s15, r3
 800b93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b93e:	eddf 6a91 	vldr	s13, [pc, #580]	; 800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800b942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b946:	4b8e      	ldr	r3, [pc, #568]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b94a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b94e:	ee07 3a90 	vmov	s15, r3
 800b952:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b956:	ed97 6a02 	vldr	s12, [r7, #8]
 800b95a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800bb88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800b95e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b962:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b972:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800b976:	e08f      	b.n	800ba98 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b978:	4b81      	ldr	r3, [pc, #516]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d005      	beq.n	800b990 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 800b984:	4b7e      	ldr	r3, [pc, #504]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	0f1b      	lsrs	r3, r3, #28
 800b98a:	f003 030f 	and.w	r3, r3, #15
 800b98e:	e006      	b.n	800b99e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 800b990:	4b7b      	ldr	r3, [pc, #492]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b996:	041b      	lsls	r3, r3, #16
 800b998:	0f1b      	lsrs	r3, r3, #28
 800b99a:	f003 030f 	and.w	r3, r3, #15
 800b99e:	4a7b      	ldr	r2, [pc, #492]	; (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800b9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9a4:	ee07 3a90 	vmov	s15, r3
 800b9a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	ee07 3a90 	vmov	s15, r3
 800b9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	ee07 3a90 	vmov	s15, r3
 800b9c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9c4:	ed97 6a02 	vldr	s12, [r7, #8]
 800b9c8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800bb88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800b9cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b9dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9e4:	e058      	b.n	800ba98 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	ee07 3a90 	vmov	s15, r3
 800b9ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f0:	eddf 6a64 	vldr	s13, [pc, #400]	; 800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800b9f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9f8:	4b61      	ldr	r3, [pc, #388]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b9fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba00:	ee07 3a90 	vmov	s15, r3
 800ba04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba08:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba0c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800bb88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ba10:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ba14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ba20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba28:	e036      	b.n	800ba98 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ba2a:	4b55      	ldr	r3, [pc, #340]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d005      	beq.n	800ba42 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800ba36:	4b52      	ldr	r3, [pc, #328]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	0f1b      	lsrs	r3, r3, #28
 800ba3c:	f003 030f 	and.w	r3, r3, #15
 800ba40:	e006      	b.n	800ba50 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800ba42:	4b4f      	ldr	r3, [pc, #316]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ba44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ba48:	041b      	lsls	r3, r3, #16
 800ba4a:	0f1b      	lsrs	r3, r3, #28
 800ba4c:	f003 030f 	and.w	r3, r3, #15
 800ba50:	4a4e      	ldr	r2, [pc, #312]	; (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800ba52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba56:	ee07 3a90 	vmov	s15, r3
 800ba5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	ee07 3a90 	vmov	s15, r3
 800ba64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	ee07 3a90 	vmov	s15, r3
 800ba72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba76:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba7a:	eddf 5a43 	vldr	s11, [pc, #268]	; 800bb88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ba7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ba8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba96:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800ba98:	4b39      	ldr	r3, [pc, #228]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ba9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d017      	beq.n	800bad4 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800baa4:	4b36      	ldr	r3, [pc, #216]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800baa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa8:	0a5b      	lsrs	r3, r3, #9
 800baaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baae:	ee07 3a90 	vmov	s15, r3
 800bab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800bab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800baba:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800babe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baca:	ee17 2a90 	vmov	r2, s15
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	601a      	str	r2, [r3, #0]
 800bad2:	e002      	b.n	800bada <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800bada:	4b29      	ldr	r3, [pc, #164]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800badc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d017      	beq.n	800bb16 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bae6:	4b26      	ldr	r3, [pc, #152]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800bae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baea:	0c1b      	lsrs	r3, r3, #16
 800baec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baf0:	ee07 3a90 	vmov	s15, r3
 800baf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800baf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bafc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bb00:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb0c:	ee17 2a90 	vmov	r2, s15
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	605a      	str	r2, [r3, #4]
 800bb14:	e002      	b.n	800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800bb1c:	4b18      	ldr	r3, [pc, #96]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800bb1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d017      	beq.n	800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bb28:	4b15      	ldr	r3, [pc, #84]	; (800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800bb2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2c:	0e1b      	lsrs	r3, r3, #24
 800bb2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb32:	ee07 3a90 	vmov	s15, r3
 800bb36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800bb3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb3e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bb42:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb4e:	ee17 2a90 	vmov	r2, s15
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800bb56:	e00c      	b.n	800bb72 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	609a      	str	r2, [r3, #8]
}
 800bb5e:	e008      	b.n	800bb72 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	609a      	str	r2, [r3, #8]
}
 800bb72:	bf00      	nop
 800bb74:	3724      	adds	r7, #36	; 0x24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	46020c00 	.word	0x46020c00
 800bb84:	4b742400 	.word	0x4b742400
 800bb88:	46000000 	.word	0x46000000
 800bb8c:	0800e7b8 	.word	0x0800e7b8

0800bb90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b08e      	sub	sp, #56	; 0x38
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800bb9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb9e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800bba2:	430b      	orrs	r3, r1
 800bba4:	d145      	bne.n	800bc32 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800bba6:	4ba7      	ldr	r3, [pc, #668]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bbac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbb0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800bbb2:	4ba4      	ldr	r3, [pc, #656]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bbb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bbb8:	f003 0302 	and.w	r3, r3, #2
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d108      	bne.n	800bbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800bbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbc6:	d104      	bne.n	800bbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800bbc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbcc:	637b      	str	r3, [r7, #52]	; 0x34
 800bbce:	f001 b9b3 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800bbd2:	4b9c      	ldr	r3, [pc, #624]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bbd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bbd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbe0:	d114      	bne.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbe8:	d110      	bne.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bbea:	4b96      	ldr	r3, [pc, #600]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bbec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bbf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbf8:	d103      	bne.n	800bc02 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800bbfa:	23fa      	movs	r3, #250	; 0xfa
 800bbfc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bbfe:	f001 b99b 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800bc02:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bc06:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bc08:	f001 b996 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800bc0c:	4b8d      	ldr	r3, [pc, #564]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc18:	d107      	bne.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc20:	d103      	bne.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800bc22:	4b89      	ldr	r3, [pc, #548]	; (800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800bc24:	637b      	str	r3, [r7, #52]	; 0x34
 800bc26:	f001 b987 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc2e:	f001 b983 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bc32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc36:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800bc3a:	430b      	orrs	r3, r1
 800bc3c:	d151      	bne.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800bc3e:	4b81      	ldr	r3, [pc, #516]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bc40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bc44:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800bc48:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	2b80      	cmp	r3, #128	; 0x80
 800bc4e:	d035      	beq.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	2b80      	cmp	r3, #128	; 0x80
 800bc54:	d841      	bhi.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc58:	2b60      	cmp	r3, #96	; 0x60
 800bc5a:	d02a      	beq.n	800bcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5e:	2b60      	cmp	r3, #96	; 0x60
 800bc60:	d83b      	bhi.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	2b40      	cmp	r3, #64	; 0x40
 800bc66:	d009      	beq.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6a:	2b40      	cmp	r3, #64	; 0x40
 800bc6c:	d835      	bhi.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00c      	beq.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800bc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc76:	2b20      	cmp	r3, #32
 800bc78:	d012      	beq.n	800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800bc7a:	e02e      	b.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7ff fb4d 	bl	800b320 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800bc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc8a:	f001 b955 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc8e:	f107 0318 	add.w	r3, r7, #24
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7ff fcac 	bl	800b5f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc9c:	f001 b94c 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bca0:	f107 030c 	add.w	r3, r7, #12
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7ff fe0b 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcae:	f001 b943 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800bcb2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bcb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcb8:	f001 b93e 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bcbc:	4b61      	ldr	r3, [pc, #388]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcc8:	d103      	bne.n	800bcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800bcca:	4b60      	ldr	r3, [pc, #384]	; (800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bcce:	f001 b933 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcd6:	f001 b92f 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcde:	f001 b92b 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800bce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bce6:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800bcea:	430b      	orrs	r3, r1
 800bcec:	d158      	bne.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800bcee:	4b55      	ldr	r3, [pc, #340]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bcf0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bcf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcf8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd00:	d03b      	beq.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800bd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd08:	d846      	bhi.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800bd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd10:	d02e      	beq.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd18:	d83e      	bhi.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd20:	d00b      	beq.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd28:	d836      	bhi.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00d      	beq.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800bd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd36:	d012      	beq.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800bd38:	e02e      	b.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7ff faee 	bl	800b320 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800bd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd48:	f001 b8f6 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd4c:	f107 0318 	add.w	r3, r7, #24
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7ff fc4d 	bl	800b5f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd5a:	f001 b8ed 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd5e:	f107 030c 	add.w	r3, r7, #12
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7ff fdac 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd6c:	f001 b8e4 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800bd70:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bd74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd76:	f001 b8df 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd7a:	4b32      	ldr	r3, [pc, #200]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd86:	d103      	bne.n	800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800bd88:	4b30      	ldr	r3, [pc, #192]	; (800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bd8a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bd8c:	f001 b8d4 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800bd90:	2300      	movs	r3, #0
 800bd92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd94:	f001 b8d0 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd9c:	f001 b8cc 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800bda0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bda4:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bda8:	430b      	orrs	r3, r1
 800bdaa:	d126      	bne.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800bdac:	4b25      	ldr	r3, [pc, #148]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bdae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bdb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdb6:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800bdb8:	4b22      	ldr	r3, [pc, #136]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdc4:	d106      	bne.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800bdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d103      	bne.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800bdcc:	4b1f      	ldr	r3, [pc, #124]	; (800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bdce:	637b      	str	r3, [r7, #52]	; 0x34
 800bdd0:	f001 b8b2 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800bdd4:	4b1b      	ldr	r3, [pc, #108]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bde0:	d107      	bne.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800bde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bde8:	d103      	bne.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800bdea:	4b19      	ldr	r3, [pc, #100]	; (800be50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800bdec:	637b      	str	r3, [r7, #52]	; 0x34
 800bdee:	f001 b8a3 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	637b      	str	r3, [r7, #52]	; 0x34
 800bdf6:	f001 b89f 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800bdfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdfe:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800be02:	430b      	orrs	r3, r1
 800be04:	d16e      	bne.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800be06:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be0c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800be10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800be12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be14:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800be18:	d03d      	beq.n	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800be1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800be20:	d85c      	bhi.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be28:	d014      	beq.n	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be30:	d854      	bhi.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	2b00      	cmp	r3, #0
 800be36:	d01f      	beq.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be3e:	d012      	beq.n	800be66 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800be40:	e04c      	b.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800be42:	bf00      	nop
 800be44:	46020c00 	.word	0x46020c00
 800be48:	0007a120 	.word	0x0007a120
 800be4c:	00f42400 	.word	0x00f42400
 800be50:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be58:	4618      	mov	r0, r3
 800be5a:	f7ff fa61 	bl	800b320 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800be5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be62:	f001 b869 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be66:	f107 0318 	add.w	r3, r7, #24
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7ff fbc0 	bl	800b5f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be74:	f001 b860 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800be78:	4ba7      	ldr	r3, [pc, #668]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be84:	d103      	bne.n	800be8e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800be86:	4ba5      	ldr	r3, [pc, #660]	; (800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800be88:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800be8a:	f001 b855 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800be8e:	2300      	movs	r3, #0
 800be90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be92:	f001 b851 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800be96:	4ba0      	ldr	r3, [pc, #640]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f003 0320 	and.w	r3, r3, #32
 800be9e:	2b20      	cmp	r3, #32
 800bea0:	d118      	bne.n	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bea2:	4b9d      	ldr	r3, [pc, #628]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d005      	beq.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800beae:	4b9a      	ldr	r3, [pc, #616]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	0e1b      	lsrs	r3, r3, #24
 800beb4:	f003 030f 	and.w	r3, r3, #15
 800beb8:	e006      	b.n	800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800beba:	4b97      	ldr	r3, [pc, #604]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bebc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bec0:	041b      	lsls	r3, r3, #16
 800bec2:	0e1b      	lsrs	r3, r3, #24
 800bec4:	f003 030f 	and.w	r3, r3, #15
 800bec8:	4a95      	ldr	r2, [pc, #596]	; (800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800beca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bece:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bed0:	f001 b832 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800bed4:	2300      	movs	r3, #0
 800bed6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bed8:	f001 b82e 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800bedc:	2300      	movs	r3, #0
 800bede:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bee0:	f001 b82a 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bee8:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800beec:	430b      	orrs	r3, r1
 800beee:	d17f      	bne.n	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bef0:	4b89      	ldr	r3, [pc, #548]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bef2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800befa:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800befc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d165      	bne.n	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800bf02:	4b85      	ldr	r3, [pc, #532]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bf04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf08:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800bf0c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf10:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bf14:	d034      	beq.n	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bf1c:	d853      	bhi.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf24:	d00b      	beq.n	800bf3e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800bf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf2c:	d84b      	bhi.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d016      	beq.n	800bf62 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf3a:	d009      	beq.n	800bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800bf3c:	e043      	b.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7ff f9ec 	bl	800b320 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800bf4c:	f000 bff4 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf50:	f107 0318 	add.w	r3, r7, #24
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7ff fb4b 	bl	800b5f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800bf5e:	f000 bfeb 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800bf62:	4b6d      	ldr	r3, [pc, #436]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf6e:	d103      	bne.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800bf70:	4b6a      	ldr	r3, [pc, #424]	; (800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bf72:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800bf74:	f000 bfe0 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800bf7c:	f000 bfdc 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bf80:	4b65      	ldr	r3, [pc, #404]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f003 0320 	and.w	r3, r3, #32
 800bf88:	2b20      	cmp	r3, #32
 800bf8a:	d118      	bne.n	800bfbe <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bf8c:	4b62      	ldr	r3, [pc, #392]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d005      	beq.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800bf98:	4b5f      	ldr	r3, [pc, #380]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	0e1b      	lsrs	r3, r3, #24
 800bf9e:	f003 030f 	and.w	r3, r3, #15
 800bfa2:	e006      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800bfa4:	4b5c      	ldr	r3, [pc, #368]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bfa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bfaa:	041b      	lsls	r3, r3, #16
 800bfac:	0e1b      	lsrs	r3, r3, #24
 800bfae:	f003 030f 	and.w	r3, r3, #15
 800bfb2:	4a5b      	ldr	r2, [pc, #364]	; (800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bfb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfb8:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800bfba:	f000 bfbd 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800bfc2:	f000 bfb9 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800bfca:	f000 bfb5 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfd4:	d108      	bne.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7ff f9a0 	bl	800b320 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe2:	637b      	str	r3, [r7, #52]	; 0x34
 800bfe4:	f000 bfa8 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	637b      	str	r3, [r7, #52]	; 0x34
 800bfec:	f000 bfa4 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800bff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bff4:	1e51      	subs	r1, r2, #1
 800bff6:	430b      	orrs	r3, r1
 800bff8:	d136      	bne.n	800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800bffa:	4b47      	ldr	r3, [pc, #284]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c000:	f003 0303 	and.w	r3, r3, #3
 800c004:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d104      	bne.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c00c:	f7fe fb1a 	bl	800a644 <HAL_RCC_GetPCLK2Freq>
 800c010:	6378      	str	r0, [r7, #52]	; 0x34
 800c012:	f000 bf91 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d104      	bne.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c01c:	f7fe f9dc 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800c020:	6378      	str	r0, [r7, #52]	; 0x34
 800c022:	f000 bf89 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c026:	4b3c      	ldr	r3, [pc, #240]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c02e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c032:	d106      	bne.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c036:	2b02      	cmp	r3, #2
 800c038:	d103      	bne.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c03a:	4b3a      	ldr	r3, [pc, #232]	; (800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c03c:	637b      	str	r3, [r7, #52]	; 0x34
 800c03e:	f000 bf7b 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c042:	4b35      	ldr	r3, [pc, #212]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c048:	f003 0302 	and.w	r3, r3, #2
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d107      	bne.n	800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c052:	2b03      	cmp	r3, #3
 800c054:	d104      	bne.n	800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c05a:	637b      	str	r3, [r7, #52]	; 0x34
 800c05c:	f000 bf6c 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800c060:	2300      	movs	r3, #0
 800c062:	637b      	str	r3, [r7, #52]	; 0x34
 800c064:	f000 bf68 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800c068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c06c:	1e91      	subs	r1, r2, #2
 800c06e:	430b      	orrs	r3, r1
 800c070:	d136      	bne.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c072:	4b29      	ldr	r3, [pc, #164]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c078:	f003 030c 	and.w	r3, r3, #12
 800c07c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	2b00      	cmp	r3, #0
 800c082:	d104      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c084:	f7fe faca 	bl	800a61c <HAL_RCC_GetPCLK1Freq>
 800c088:	6378      	str	r0, [r7, #52]	; 0x34
 800c08a:	f000 bf55 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800c08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c090:	2b04      	cmp	r3, #4
 800c092:	d104      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c094:	f7fe f9a0 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800c098:	6378      	str	r0, [r7, #52]	; 0x34
 800c09a:	f000 bf4d 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800c09e:	4b1e      	ldr	r3, [pc, #120]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0aa:	d106      	bne.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ae:	2b08      	cmp	r3, #8
 800c0b0:	d103      	bne.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800c0b2:	4b1c      	ldr	r3, [pc, #112]	; (800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c0b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c0b6:	f000 bf3f 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800c0ba:	4b17      	ldr	r3, [pc, #92]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c0bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0c0:	f003 0302 	and.w	r3, r3, #2
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d107      	bne.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800c0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ca:	2b0c      	cmp	r3, #12
 800c0cc:	d104      	bne.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800c0ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c0d4:	f000 bf30 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	637b      	str	r3, [r7, #52]	; 0x34
 800c0dc:	f000 bf2c 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800c0e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0e4:	1f11      	subs	r1, r2, #4
 800c0e6:	430b      	orrs	r3, r1
 800c0e8:	d13f      	bne.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c0ea:	4b0b      	ldr	r3, [pc, #44]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c0ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c0f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d104      	bne.n	800c106 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c0fc:	f7fe fa8e 	bl	800a61c <HAL_RCC_GetPCLK1Freq>
 800c100:	6378      	str	r0, [r7, #52]	; 0x34
 800c102:	f000 bf19 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	2b10      	cmp	r3, #16
 800c10a:	d10d      	bne.n	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c10c:	f7fe f964 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800c110:	6378      	str	r0, [r7, #52]	; 0x34
 800c112:	f000 bf11 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800c116:	bf00      	nop
 800c118:	46020c00 	.word	0x46020c00
 800c11c:	02dc6c00 	.word	0x02dc6c00
 800c120:	0800e7b8 	.word	0x0800e7b8
 800c124:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800c128:	4ba6      	ldr	r3, [pc, #664]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c134:	d106      	bne.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	2b20      	cmp	r3, #32
 800c13a:	d103      	bne.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800c13c:	4ba2      	ldr	r3, [pc, #648]	; (800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c13e:	637b      	str	r3, [r7, #52]	; 0x34
 800c140:	f000 befa 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800c144:	4b9f      	ldr	r3, [pc, #636]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c14a:	f003 0302 	and.w	r3, r3, #2
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d107      	bne.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	2b30      	cmp	r3, #48	; 0x30
 800c156:	d104      	bne.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800c158:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c15c:	637b      	str	r3, [r7, #52]	; 0x34
 800c15e:	f000 beeb 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800c162:	2300      	movs	r3, #0
 800c164:	637b      	str	r3, [r7, #52]	; 0x34
 800c166:	f000 bee7 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800c16a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c16e:	f1a2 0108 	sub.w	r1, r2, #8
 800c172:	430b      	orrs	r3, r1
 800c174:	d136      	bne.n	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c176:	4b93      	ldr	r3, [pc, #588]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c17c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c180:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800c182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c184:	2b00      	cmp	r3, #0
 800c186:	d104      	bne.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c188:	f7fe fa48 	bl	800a61c <HAL_RCC_GetPCLK1Freq>
 800c18c:	6378      	str	r0, [r7, #52]	; 0x34
 800c18e:	f000 bed3 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800c192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c194:	2b40      	cmp	r3, #64	; 0x40
 800c196:	d104      	bne.n	800c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c198:	f7fe f91e 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800c19c:	6378      	str	r0, [r7, #52]	; 0x34
 800c19e:	f000 becb 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800c1a2:	4b88      	ldr	r3, [pc, #544]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1ae:	d106      	bne.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800c1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b2:	2b80      	cmp	r3, #128	; 0x80
 800c1b4:	d103      	bne.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800c1b6:	4b84      	ldr	r3, [pc, #528]	; (800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c1b8:	637b      	str	r3, [r7, #52]	; 0x34
 800c1ba:	f000 bebd 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800c1be:	4b81      	ldr	r3, [pc, #516]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c1c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1c4:	f003 0302 	and.w	r3, r3, #2
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d107      	bne.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800c1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ce:	2bc0      	cmp	r3, #192	; 0xc0
 800c1d0:	d104      	bne.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800c1d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d8:	f000 beae 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	637b      	str	r3, [r7, #52]	; 0x34
 800c1e0:	f000 beaa 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800c1e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1e8:	f1a2 0110 	sub.w	r1, r2, #16
 800c1ec:	430b      	orrs	r3, r1
 800c1ee:	d139      	bne.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c1f0:	4b74      	ldr	r3, [pc, #464]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c1f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c1f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1fa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d104      	bne.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c202:	f7fe fa0b 	bl	800a61c <HAL_RCC_GetPCLK1Freq>
 800c206:	6378      	str	r0, [r7, #52]	; 0x34
 800c208:	f000 be96 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800c20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c212:	d104      	bne.n	800c21e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c214:	f7fe f8e0 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800c218:	6378      	str	r0, [r7, #52]	; 0x34
 800c21a:	f000 be8d 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800c21e:	4b69      	ldr	r3, [pc, #420]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c22a:	d107      	bne.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800c22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c232:	d103      	bne.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800c234:	4b64      	ldr	r3, [pc, #400]	; (800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c236:	637b      	str	r3, [r7, #52]	; 0x34
 800c238:	f000 be7e 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800c23c:	4b61      	ldr	r3, [pc, #388]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c23e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c242:	f003 0302 	and.w	r3, r3, #2
 800c246:	2b02      	cmp	r3, #2
 800c248:	d108      	bne.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800c24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c250:	d104      	bne.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800c252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c256:	637b      	str	r3, [r7, #52]	; 0x34
 800c258:	f000 be6e 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c25c:	2300      	movs	r3, #0
 800c25e:	637b      	str	r3, [r7, #52]	; 0x34
 800c260:	f000 be6a 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800c264:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c268:	f1a2 0120 	sub.w	r1, r2, #32
 800c26c:	430b      	orrs	r3, r1
 800c26e:	d158      	bne.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c270:	4b54      	ldr	r3, [pc, #336]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c276:	f003 0307 	and.w	r3, r3, #7
 800c27a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800c27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d104      	bne.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800c282:	f7fe f9f3 	bl	800a66c <HAL_RCC_GetPCLK3Freq>
 800c286:	6378      	str	r0, [r7, #52]	; 0x34
 800c288:	f000 be56 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800c28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d104      	bne.n	800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c292:	f7fe f8a1 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800c296:	6378      	str	r0, [r7, #52]	; 0x34
 800c298:	f000 be4e 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800c29c:	4b49      	ldr	r3, [pc, #292]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2a8:	d106      	bne.n	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ac:	2b02      	cmp	r3, #2
 800c2ae:	d103      	bne.n	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 800c2b0:	4b45      	ldr	r3, [pc, #276]	; (800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c2b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c2b4:	f000 be40 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800c2b8:	4b42      	ldr	r3, [pc, #264]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c2ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2be:	f003 0302 	and.w	r3, r3, #2
 800c2c2:	2b02      	cmp	r3, #2
 800c2c4:	d107      	bne.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c8:	2b03      	cmp	r3, #3
 800c2ca:	d104      	bne.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800c2cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c2d2:	f000 be31 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800c2d6:	4b3b      	ldr	r3, [pc, #236]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f003 0320 	and.w	r3, r3, #32
 800c2de:	2b20      	cmp	r3, #32
 800c2e0:	d11b      	bne.n	800c31a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800c2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e4:	2b04      	cmp	r3, #4
 800c2e6:	d118      	bne.n	800c31a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c2e8:	4b36      	ldr	r3, [pc, #216]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d005      	beq.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c2f4:	4b33      	ldr	r3, [pc, #204]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	0e1b      	lsrs	r3, r3, #24
 800c2fa:	f003 030f 	and.w	r3, r3, #15
 800c2fe:	e006      	b.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 800c300:	4b30      	ldr	r3, [pc, #192]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c306:	041b      	lsls	r3, r3, #16
 800c308:	0e1b      	lsrs	r3, r3, #24
 800c30a:	f003 030f 	and.w	r3, r3, #15
 800c30e:	4a2f      	ldr	r2, [pc, #188]	; (800c3cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c314:	637b      	str	r3, [r7, #52]	; 0x34
 800c316:	f000 be0f 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800c31a:	2300      	movs	r3, #0
 800c31c:	637b      	str	r3, [r7, #52]	; 0x34
 800c31e:	f000 be0b 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800c322:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c326:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c32a:	430b      	orrs	r3, r1
 800c32c:	d172      	bne.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800c32e:	4b25      	ldr	r3, [pc, #148]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c334:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c338:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c340:	d104      	bne.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c342:	f7fe f849 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800c346:	6378      	str	r0, [r7, #52]	; 0x34
 800c348:	f000 bdf6 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800c34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c352:	d108      	bne.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c354:	f107 0318 	add.w	r3, r7, #24
 800c358:	4618      	mov	r0, r3
 800c35a:	f7ff f949 	bl	800b5f0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800c35e:	6a3b      	ldr	r3, [r7, #32]
 800c360:	637b      	str	r3, [r7, #52]	; 0x34
 800c362:	f000 bde9 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d104      	bne.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800c36c:	f7fe f93c 	bl	800a5e8 <HAL_RCC_GetHCLKFreq>
 800c370:	6378      	str	r0, [r7, #52]	; 0x34
 800c372:	f000 bde1 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c37c:	d128      	bne.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c37e:	4b11      	ldr	r3, [pc, #68]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f003 0320 	and.w	r3, r3, #32
 800c386:	2b20      	cmp	r3, #32
 800c388:	d118      	bne.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c38a:	4b0e      	ldr	r3, [pc, #56]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c392:	2b00      	cmp	r3, #0
 800c394:	d005      	beq.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800c396:	4b0b      	ldr	r3, [pc, #44]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	0e1b      	lsrs	r3, r3, #24
 800c39c:	f003 030f 	and.w	r3, r3, #15
 800c3a0:	e006      	b.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800c3a2:	4b08      	ldr	r3, [pc, #32]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c3a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c3a8:	041b      	lsls	r3, r3, #16
 800c3aa:	0e1b      	lsrs	r3, r3, #24
 800c3ac:	f003 030f 	and.w	r3, r3, #15
 800c3b0:	4a06      	ldr	r2, [pc, #24]	; (800c3cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c3b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c3b8:	f000 bdbe 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	637b      	str	r3, [r7, #52]	; 0x34
 800c3c0:	f000 bdba 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800c3c4:	46020c00 	.word	0x46020c00
 800c3c8:	00f42400 	.word	0x00f42400
 800c3cc:	0800e7b8 	.word	0x0800e7b8
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800c3d0:	4baf      	ldr	r3, [pc, #700]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3dc:	d107      	bne.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800c3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3e4:	d103      	bne.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800c3e6:	4bab      	ldr	r3, [pc, #684]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800c3e8:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ea:	f000 bda5 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800c3ee:	4ba8      	ldr	r3, [pc, #672]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3fa:	d107      	bne.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c402:	d103      	bne.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800c404:	4ba3      	ldr	r3, [pc, #652]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800c406:	637b      	str	r3, [r7, #52]	; 0x34
 800c408:	f000 bd96 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800c40c:	2300      	movs	r3, #0
 800c40e:	637b      	str	r3, [r7, #52]	; 0x34
 800c410:	f000 bd92 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800c414:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c418:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c41c:	430b      	orrs	r3, r1
 800c41e:	d158      	bne.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800c420:	4b9b      	ldr	r3, [pc, #620]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c422:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42e:	2b04      	cmp	r3, #4
 800c430:	d84b      	bhi.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800c432:	a201      	add	r2, pc, #4	; (adr r2, 800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800c434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c438:	0800c471 	.word	0x0800c471
 800c43c:	0800c44d 	.word	0x0800c44d
 800c440:	0800c45f 	.word	0x0800c45f
 800c444:	0800c47b 	.word	0x0800c47b
 800c448:	0800c485 	.word	0x0800c485
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c44c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c450:	4618      	mov	r0, r3
 800c452:	f7fe ff65 	bl	800b320 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c458:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c45a:	f000 bd6d 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c45e:	f107 030c 	add.w	r3, r7, #12
 800c462:	4618      	mov	r0, r3
 800c464:	f7ff fa2c 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c46c:	f000 bd64 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c470:	f7fe f8ba 	bl	800a5e8 <HAL_RCC_GetHCLKFreq>
 800c474:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c476:	f000 bd5f 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c47a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c47e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c480:	f000 bd5a 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c484:	4b82      	ldr	r3, [pc, #520]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 0320 	and.w	r3, r3, #32
 800c48c:	2b20      	cmp	r3, #32
 800c48e:	d118      	bne.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c490:	4b7f      	ldr	r3, [pc, #508]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d005      	beq.n	800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800c49c:	4b7c      	ldr	r3, [pc, #496]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	0e1b      	lsrs	r3, r3, #24
 800c4a2:	f003 030f 	and.w	r3, r3, #15
 800c4a6:	e006      	b.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800c4a8:	4b79      	ldr	r3, [pc, #484]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c4aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c4ae:	041b      	lsls	r3, r3, #16
 800c4b0:	0e1b      	lsrs	r3, r3, #24
 800c4b2:	f003 030f 	and.w	r3, r3, #15
 800c4b6:	4a78      	ldr	r2, [pc, #480]	; (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800c4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c4be:	f000 bd3b 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c4c6:	f000 bd37 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c4ce:	f000 bd33 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800c4d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4d6:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800c4da:	430b      	orrs	r3, r1
 800c4dc:	d167      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800c4de:	4b6c      	ldr	r3, [pc, #432]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c4e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c4e4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c4e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c4f0:	d036      	beq.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c4f8:	d855      	bhi.n	800c5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c500:	d029      	beq.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800c502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c504:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c508:	d84d      	bhi.n	800c5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c510:	d013      	beq.n	800c53a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c518:	d845      	bhi.n	800c5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d015      	beq.n	800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800c520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c526:	d13e      	bne.n	800c5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fe fef7 	bl	800b320 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c534:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c536:	f000 bcff 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c53a:	f107 030c 	add.w	r3, r7, #12
 800c53e:	4618      	mov	r0, r3
 800c540:	f7ff f9be 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c548:	f000 bcf6 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c54c:	f7fe f84c 	bl	800a5e8 <HAL_RCC_GetHCLKFreq>
 800c550:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c552:	f000 bcf1 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c556:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c55a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c55c:	f000 bcec 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c560:	4b4b      	ldr	r3, [pc, #300]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 0320 	and.w	r3, r3, #32
 800c568:	2b20      	cmp	r3, #32
 800c56a:	d118      	bne.n	800c59e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c56c:	4b48      	ldr	r3, [pc, #288]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c574:	2b00      	cmp	r3, #0
 800c576:	d005      	beq.n	800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800c578:	4b45      	ldr	r3, [pc, #276]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	0e1b      	lsrs	r3, r3, #24
 800c57e:	f003 030f 	and.w	r3, r3, #15
 800c582:	e006      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c584:	4b42      	ldr	r3, [pc, #264]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c586:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c58a:	041b      	lsls	r3, r3, #16
 800c58c:	0e1b      	lsrs	r3, r3, #24
 800c58e:	f003 030f 	and.w	r3, r3, #15
 800c592:	4a41      	ldr	r2, [pc, #260]	; (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800c594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c598:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c59a:	f000 bccd 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c5a2:	f000 bcc9 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c5aa:	f000 bcc5 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800c5ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5b2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800c5b6:	430b      	orrs	r3, r1
 800c5b8:	d14c      	bne.n	800c654 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c5ba:	4b35      	ldr	r3, [pc, #212]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c5bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c5c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c5c4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d104      	bne.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c5cc:	f7fe f826 	bl	800a61c <HAL_RCC_GetPCLK1Freq>
 800c5d0:	6378      	str	r0, [r7, #52]	; 0x34
 800c5d2:	f000 bcb1 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800c5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5dc:	d104      	bne.n	800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c5de:	f7fd fefb 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800c5e2:	6378      	str	r0, [r7, #52]	; 0x34
 800c5e4:	f000 bca8 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800c5e8:	4b29      	ldr	r3, [pc, #164]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5f4:	d107      	bne.n	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5fc:	d103      	bne.n	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800c5fe:	4b25      	ldr	r3, [pc, #148]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800c600:	637b      	str	r3, [r7, #52]	; 0x34
 800c602:	f000 bc99 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800c606:	4b22      	ldr	r3, [pc, #136]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 0320 	and.w	r3, r3, #32
 800c60e:	2b20      	cmp	r3, #32
 800c610:	d11c      	bne.n	800c64c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800c612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c614:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c618:	d118      	bne.n	800c64c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c61a:	4b1d      	ldr	r3, [pc, #116]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c622:	2b00      	cmp	r3, #0
 800c624:	d005      	beq.n	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800c626:	4b1a      	ldr	r3, [pc, #104]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	0e1b      	lsrs	r3, r3, #24
 800c62c:	f003 030f 	and.w	r3, r3, #15
 800c630:	e006      	b.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800c632:	4b17      	ldr	r3, [pc, #92]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c634:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c638:	041b      	lsls	r3, r3, #16
 800c63a:	0e1b      	lsrs	r3, r3, #24
 800c63c:	f003 030f 	and.w	r3, r3, #15
 800c640:	4a15      	ldr	r2, [pc, #84]	; (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800c642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c646:	637b      	str	r3, [r7, #52]	; 0x34
 800c648:	f000 bc76 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800c64c:	2300      	movs	r3, #0
 800c64e:	637b      	str	r3, [r7, #52]	; 0x34
 800c650:	f000 bc72 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800c654:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c658:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800c65c:	430b      	orrs	r3, r1
 800c65e:	d153      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c660:	4b0b      	ldr	r3, [pc, #44]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c666:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c66a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800c66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d104      	bne.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c672:	f7fd ffd3 	bl	800a61c <HAL_RCC_GetPCLK1Freq>
 800c676:	6378      	str	r0, [r7, #52]	; 0x34
 800c678:	f000 bc5e 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800c67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c682:	d10b      	bne.n	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c684:	f7fd fea8 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800c688:	6378      	str	r0, [r7, #52]	; 0x34
 800c68a:	f000 bc55 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800c68e:	bf00      	nop
 800c690:	46020c00 	.word	0x46020c00
 800c694:	00f42400 	.word	0x00f42400
 800c698:	0800e7b8 	.word	0x0800e7b8
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800c69c:	4ba1      	ldr	r3, [pc, #644]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6a8:	d107      	bne.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6b0:	d103      	bne.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800c6b2:	4b9d      	ldr	r3, [pc, #628]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800c6b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c6b6:	f000 bc3f 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800c6ba:	4b9a      	ldr	r3, [pc, #616]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 0320 	and.w	r3, r3, #32
 800c6c2:	2b20      	cmp	r3, #32
 800c6c4:	d11c      	bne.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c6cc:	d118      	bne.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c6ce:	4b95      	ldr	r3, [pc, #596]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d005      	beq.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800c6da:	4b92      	ldr	r3, [pc, #584]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	0e1b      	lsrs	r3, r3, #24
 800c6e0:	f003 030f 	and.w	r3, r3, #15
 800c6e4:	e006      	b.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800c6e6:	4b8f      	ldr	r3, [pc, #572]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c6e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c6ec:	041b      	lsls	r3, r3, #16
 800c6ee:	0e1b      	lsrs	r3, r3, #24
 800c6f0:	f003 030f 	and.w	r3, r3, #15
 800c6f4:	4a8d      	ldr	r2, [pc, #564]	; (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800c6f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6fa:	637b      	str	r3, [r7, #52]	; 0x34
 800c6fc:	f000 bc1c 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800c700:	2300      	movs	r3, #0
 800c702:	637b      	str	r3, [r7, #52]	; 0x34
 800c704:	f000 bc18 	b.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800c708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c70c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c710:	430b      	orrs	r3, r1
 800c712:	d151      	bne.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c714:	4b83      	ldr	r3, [pc, #524]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c716:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c71a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c71e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c722:	2bc0      	cmp	r3, #192	; 0xc0
 800c724:	d024      	beq.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800c726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c728:	2bc0      	cmp	r3, #192	; 0xc0
 800c72a:	d842      	bhi.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800c72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72e:	2b80      	cmp	r3, #128	; 0x80
 800c730:	d00d      	beq.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	2b80      	cmp	r3, #128	; 0x80
 800c736:	d83c      	bhi.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800c738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800c73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c740:	2b40      	cmp	r3, #64	; 0x40
 800c742:	d011      	beq.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800c744:	e035      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800c746:	f7fd ff91 	bl	800a66c <HAL_RCC_GetPCLK3Freq>
 800c74a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c74c:	e3f4      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c74e:	4b75      	ldr	r3, [pc, #468]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c75a:	d102      	bne.n	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800c75c:	4b72      	ldr	r3, [pc, #456]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800c75e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c760:	e3ea      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800c762:	2300      	movs	r3, #0
 800c764:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c766:	e3e7      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800c768:	f7fd fe36 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800c76c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c76e:	e3e3      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c770:	4b6c      	ldr	r3, [pc, #432]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 0320 	and.w	r3, r3, #32
 800c778:	2b20      	cmp	r3, #32
 800c77a:	d117      	bne.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c77c:	4b69      	ldr	r3, [pc, #420]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d005      	beq.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800c788:	4b66      	ldr	r3, [pc, #408]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	0e1b      	lsrs	r3, r3, #24
 800c78e:	f003 030f 	and.w	r3, r3, #15
 800c792:	e006      	b.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800c794:	4b63      	ldr	r3, [pc, #396]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c796:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c79a:	041b      	lsls	r3, r3, #16
 800c79c:	0e1b      	lsrs	r3, r3, #24
 800c79e:	f003 030f 	and.w	r3, r3, #15
 800c7a2:	4a62      	ldr	r2, [pc, #392]	; (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800c7a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7a8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c7aa:	e3c5      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c7b0:	e3c2      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c7b6:	e3bf      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800c7b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7bc:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800c7c0:	430b      	orrs	r3, r1
 800c7c2:	d147      	bne.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c7c4:	4b57      	ldr	r3, [pc, #348]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c7c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c7ce:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d103      	bne.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c7d6:	f7fd ff21 	bl	800a61c <HAL_RCC_GetPCLK1Freq>
 800c7da:	6378      	str	r0, [r7, #52]	; 0x34
 800c7dc:	e3ac      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7e4:	d103      	bne.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c7e6:	f7fd fdf7 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800c7ea:	6378      	str	r0, [r7, #52]	; 0x34
 800c7ec:	e3a4      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800c7ee:	4b4d      	ldr	r3, [pc, #308]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7fa:	d106      	bne.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c802:	d102      	bne.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 800c804:	4b48      	ldr	r3, [pc, #288]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800c806:	637b      	str	r3, [r7, #52]	; 0x34
 800c808:	e396      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800c80a:	4b46      	ldr	r3, [pc, #280]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f003 0320 	and.w	r3, r3, #32
 800c812:	2b20      	cmp	r3, #32
 800c814:	d11b      	bne.n	800c84e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c81c:	d117      	bne.n	800c84e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c81e:	4b41      	ldr	r3, [pc, #260]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c826:	2b00      	cmp	r3, #0
 800c828:	d005      	beq.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800c82a:	4b3e      	ldr	r3, [pc, #248]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	0e1b      	lsrs	r3, r3, #24
 800c830:	f003 030f 	and.w	r3, r3, #15
 800c834:	e006      	b.n	800c844 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800c836:	4b3b      	ldr	r3, [pc, #236]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c83c:	041b      	lsls	r3, r3, #16
 800c83e:	0e1b      	lsrs	r3, r3, #24
 800c840:	f003 030f 	and.w	r3, r3, #15
 800c844:	4a39      	ldr	r2, [pc, #228]	; (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800c846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c84a:	637b      	str	r3, [r7, #52]	; 0x34
 800c84c:	e374      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800c84e:	2300      	movs	r3, #0
 800c850:	637b      	str	r3, [r7, #52]	; 0x34
 800c852:	e371      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800c854:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c858:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c85c:	430b      	orrs	r3, r1
 800c85e:	d16a      	bne.n	800c936 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800c860:	4b30      	ldr	r3, [pc, #192]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c862:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c86a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800c86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d120      	bne.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c872:	4b2c      	ldr	r3, [pc, #176]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f003 0320 	and.w	r3, r3, #32
 800c87a:	2b20      	cmp	r3, #32
 800c87c:	d117      	bne.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c87e:	4b29      	ldr	r3, [pc, #164]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c886:	2b00      	cmp	r3, #0
 800c888:	d005      	beq.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800c88a:	4b26      	ldr	r3, [pc, #152]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	0e1b      	lsrs	r3, r3, #24
 800c890:	f003 030f 	and.w	r3, r3, #15
 800c894:	e006      	b.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800c896:	4b23      	ldr	r3, [pc, #140]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c89c:	041b      	lsls	r3, r3, #16
 800c89e:	0e1b      	lsrs	r3, r3, #24
 800c8a0:	f003 030f 	and.w	r3, r3, #15
 800c8a4:	4a21      	ldr	r2, [pc, #132]	; (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800c8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c8ac:	e344      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	637b      	str	r3, [r7, #52]	; 0x34
 800c8b2:	e341      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800c8b4:	4b1b      	ldr	r3, [pc, #108]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c8b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c8ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8c2:	d112      	bne.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ca:	d10e      	bne.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c8cc:	4b15      	ldr	r3, [pc, #84]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c8ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c8d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8da:	d102      	bne.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 800c8dc:	23fa      	movs	r3, #250	; 0xfa
 800c8de:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c8e0:	e32a      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800c8e2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c8e6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c8e8:	e326      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800c8ea:	4b0e      	ldr	r3, [pc, #56]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8f6:	d106      	bne.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 800c8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8fe:	d102      	bne.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 800c900:	4b09      	ldr	r3, [pc, #36]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800c902:	637b      	str	r3, [r7, #52]	; 0x34
 800c904:	e318      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800c906:	4b07      	ldr	r3, [pc, #28]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c90c:	f003 0302 	and.w	r3, r3, #2
 800c910:	2b02      	cmp	r3, #2
 800c912:	d10d      	bne.n	800c930 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800c914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c91a:	d109      	bne.n	800c930 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 800c91c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c920:	637b      	str	r3, [r7, #52]	; 0x34
 800c922:	e309      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800c924:	46020c00 	.word	0x46020c00
 800c928:	00f42400 	.word	0x00f42400
 800c92c:	0800e7b8 	.word	0x0800e7b8
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800c930:	2300      	movs	r3, #0
 800c932:	637b      	str	r3, [r7, #52]	; 0x34
 800c934:	e300      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800c936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c93a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c93e:	430b      	orrs	r3, r1
 800c940:	d164      	bne.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c942:	4ba2      	ldr	r3, [pc, #648]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c944:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c948:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c94c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800c94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c950:	2b00      	cmp	r3, #0
 800c952:	d120      	bne.n	800c996 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c954:	4b9d      	ldr	r3, [pc, #628]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f003 0320 	and.w	r3, r3, #32
 800c95c:	2b20      	cmp	r3, #32
 800c95e:	d117      	bne.n	800c990 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c960:	4b9a      	ldr	r3, [pc, #616]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d005      	beq.n	800c978 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800c96c:	4b97      	ldr	r3, [pc, #604]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	0e1b      	lsrs	r3, r3, #24
 800c972:	f003 030f 	and.w	r3, r3, #15
 800c976:	e006      	b.n	800c986 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 800c978:	4b94      	ldr	r3, [pc, #592]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c97a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c97e:	041b      	lsls	r3, r3, #16
 800c980:	0e1b      	lsrs	r3, r3, #24
 800c982:	f003 030f 	and.w	r3, r3, #15
 800c986:	4a92      	ldr	r2, [pc, #584]	; (800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800c988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c98c:	637b      	str	r3, [r7, #52]	; 0x34
 800c98e:	e2d3      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800c990:	2300      	movs	r3, #0
 800c992:	637b      	str	r3, [r7, #52]	; 0x34
 800c994:	e2d0      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800c996:	4b8d      	ldr	r3, [pc, #564]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c99c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9a4:	d112      	bne.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 800c9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9ac:	d10e      	bne.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c9ae:	4b87      	ldr	r3, [pc, #540]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c9b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c9b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9bc:	d102      	bne.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800c9be:	23fa      	movs	r3, #250	; 0xfa
 800c9c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c9c2:	e2b9      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800c9c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c9c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c9ca:	e2b5      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800c9cc:	4b7f      	ldr	r3, [pc, #508]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9d8:	d106      	bne.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800c9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9e0:	d102      	bne.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800c9e2:	4b7c      	ldr	r3, [pc, #496]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800c9e4:	637b      	str	r3, [r7, #52]	; 0x34
 800c9e6:	e2a7      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800c9e8:	4b78      	ldr	r3, [pc, #480]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c9ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c9ee:	f003 0302 	and.w	r3, r3, #2
 800c9f2:	2b02      	cmp	r3, #2
 800c9f4:	d107      	bne.n	800ca06 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c9fc:	d103      	bne.n	800ca06 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800c9fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca02:	637b      	str	r3, [r7, #52]	; 0x34
 800ca04:	e298      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800ca06:	2300      	movs	r3, #0
 800ca08:	637b      	str	r3, [r7, #52]	; 0x34
 800ca0a:	e295      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800ca0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca10:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ca14:	430b      	orrs	r3, r1
 800ca16:	d147      	bne.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800ca18:	4b6c      	ldr	r3, [pc, #432]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800ca1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ca1e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ca22:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800ca24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d103      	bne.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ca2a:	f7fd fdf7 	bl	800a61c <HAL_RCC_GetPCLK1Freq>
 800ca2e:	6378      	str	r0, [r7, #52]	; 0x34
 800ca30:	e282      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800ca32:	4b66      	ldr	r3, [pc, #408]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800ca34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca40:	d112      	bne.n	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800ca42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca48:	d10e      	bne.n	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ca4a:	4b60      	ldr	r3, [pc, #384]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800ca4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca58:	d102      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800ca5a:	23fa      	movs	r3, #250	; 0xfa
 800ca5c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ca5e:	e26b      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800ca60:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ca64:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ca66:	e267      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800ca68:	4b58      	ldr	r3, [pc, #352]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca74:	d106      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800ca76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ca7c:	d102      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800ca7e:	4b55      	ldr	r3, [pc, #340]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800ca80:	637b      	str	r3, [r7, #52]	; 0x34
 800ca82:	e259      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800ca84:	4b51      	ldr	r3, [pc, #324]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800ca86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca8a:	f003 0302 	and.w	r3, r3, #2
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d107      	bne.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 800ca92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ca98:	d103      	bne.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800ca9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca9e:	637b      	str	r3, [r7, #52]	; 0x34
 800caa0:	e24a      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800caa2:	2300      	movs	r3, #0
 800caa4:	637b      	str	r3, [r7, #52]	; 0x34
 800caa6:	e247      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800caa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caac:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800cab0:	430b      	orrs	r3, r1
 800cab2:	d12d      	bne.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800cab4:	4b45      	ldr	r3, [pc, #276]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800cab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800caba:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800cabe:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800cac0:	4b42      	ldr	r3, [pc, #264]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cacc:	d105      	bne.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800cace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d102      	bne.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 800cad4:	4b3f      	ldr	r3, [pc, #252]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800cad6:	637b      	str	r3, [r7, #52]	; 0x34
 800cad8:	e22e      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cae0:	d107      	bne.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fe fc1a 	bl	800b320 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	637b      	str	r3, [r7, #52]	; 0x34
 800caf0:	e222      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800caf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800caf8:	d107      	bne.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cafa:	f107 0318 	add.w	r3, r7, #24
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fe fd76 	bl	800b5f0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	637b      	str	r3, [r7, #52]	; 0x34
 800cb08:	e216      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb0e:	e213      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800cb10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb14:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800cb18:	430b      	orrs	r3, r1
 800cb1a:	d15d      	bne.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800cb1c:	4b2b      	ldr	r3, [pc, #172]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800cb1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cb22:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cb26:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800cb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cb2e:	d028      	beq.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800cb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cb36:	d845      	bhi.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb3e:	d013      	beq.n	800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800cb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb46:	d83d      	bhi.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800cb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d004      	beq.n	800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb54:	d004      	beq.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800cb56:	e035      	b.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800cb58:	f7fd fd74 	bl	800a644 <HAL_RCC_GetPCLK2Freq>
 800cb5c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800cb5e:	e1eb      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800cb60:	f7fd fc3a 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800cb64:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800cb66:	e1e7      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb68:	4b18      	ldr	r3, [pc, #96]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb74:	d102      	bne.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800cb76:	4b17      	ldr	r3, [pc, #92]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800cb78:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cb7a:	e1dd      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cb80:	e1da      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cb82:	4b12      	ldr	r3, [pc, #72]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f003 0320 	and.w	r3, r3, #32
 800cb8a:	2b20      	cmp	r3, #32
 800cb8c:	d117      	bne.n	800cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cb8e:	4b0f      	ldr	r3, [pc, #60]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d005      	beq.n	800cba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800cb9a:	4b0c      	ldr	r3, [pc, #48]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	0e1b      	lsrs	r3, r3, #24
 800cba0:	f003 030f 	and.w	r3, r3, #15
 800cba4:	e006      	b.n	800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 800cba6:	4b09      	ldr	r3, [pc, #36]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800cba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cbac:	041b      	lsls	r3, r3, #16
 800cbae:	0e1b      	lsrs	r3, r3, #24
 800cbb0:	f003 030f 	and.w	r3, r3, #15
 800cbb4:	4a06      	ldr	r2, [pc, #24]	; (800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800cbb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cbbc:	e1bc      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cbc2:	e1b9      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cbc8:	e1b6      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800cbca:	bf00      	nop
 800cbcc:	46020c00 	.word	0x46020c00
 800cbd0:	0800e7b8 	.word	0x0800e7b8
 800cbd4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800cbd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbdc:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800cbe0:	430b      	orrs	r3, r1
 800cbe2:	d156      	bne.n	800cc92 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800cbe4:	4ba5      	ldr	r3, [pc, #660]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800cbe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cbea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cbee:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cbf6:	d028      	beq.n	800cc4a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 800cbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cbfe:	d845      	bhi.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800cc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc06:	d013      	beq.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 800cc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc0e:	d83d      	bhi.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800cc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d004      	beq.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 800cc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc1c:	d004      	beq.n	800cc28 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800cc1e:	e035      	b.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800cc20:	f7fd fcfc 	bl	800a61c <HAL_RCC_GetPCLK1Freq>
 800cc24:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800cc26:	e187      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800cc28:	f7fd fbd6 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800cc2c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800cc2e:	e183      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc30:	4b92      	ldr	r3, [pc, #584]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc3c:	d102      	bne.n	800cc44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800cc3e:	4b90      	ldr	r3, [pc, #576]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800cc40:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cc42:	e179      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800cc44:	2300      	movs	r3, #0
 800cc46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cc48:	e176      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cc4a:	4b8c      	ldr	r3, [pc, #560]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 0320 	and.w	r3, r3, #32
 800cc52:	2b20      	cmp	r3, #32
 800cc54:	d117      	bne.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cc56:	4b89      	ldr	r3, [pc, #548]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d005      	beq.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 800cc62:	4b86      	ldr	r3, [pc, #536]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800cc64:	689b      	ldr	r3, [r3, #8]
 800cc66:	0e1b      	lsrs	r3, r3, #24
 800cc68:	f003 030f 	and.w	r3, r3, #15
 800cc6c:	e006      	b.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800cc6e:	4b83      	ldr	r3, [pc, #524]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800cc70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cc74:	041b      	lsls	r3, r3, #16
 800cc76:	0e1b      	lsrs	r3, r3, #24
 800cc78:	f003 030f 	and.w	r3, r3, #15
 800cc7c:	4a81      	ldr	r2, [pc, #516]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800cc7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cc84:	e158      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800cc86:	2300      	movs	r3, #0
 800cc88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cc8a:	e155      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cc90:	e152      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800cc92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc96:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800cc9a:	430b      	orrs	r3, r1
 800cc9c:	d177      	bne.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800cc9e:	4b77      	ldr	r3, [pc, #476]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800cca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cca4:	f003 0318 	and.w	r3, r3, #24
 800cca8:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	2b18      	cmp	r3, #24
 800ccae:	d86b      	bhi.n	800cd88 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 800ccb0:	a201      	add	r2, pc, #4	; (adr r2, 800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800ccb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb6:	bf00      	nop
 800ccb8:	0800cd1d 	.word	0x0800cd1d
 800ccbc:	0800cd89 	.word	0x0800cd89
 800ccc0:	0800cd89 	.word	0x0800cd89
 800ccc4:	0800cd89 	.word	0x0800cd89
 800ccc8:	0800cd89 	.word	0x0800cd89
 800cccc:	0800cd89 	.word	0x0800cd89
 800ccd0:	0800cd89 	.word	0x0800cd89
 800ccd4:	0800cd89 	.word	0x0800cd89
 800ccd8:	0800cd25 	.word	0x0800cd25
 800ccdc:	0800cd89 	.word	0x0800cd89
 800cce0:	0800cd89 	.word	0x0800cd89
 800cce4:	0800cd89 	.word	0x0800cd89
 800cce8:	0800cd89 	.word	0x0800cd89
 800ccec:	0800cd89 	.word	0x0800cd89
 800ccf0:	0800cd89 	.word	0x0800cd89
 800ccf4:	0800cd89 	.word	0x0800cd89
 800ccf8:	0800cd2d 	.word	0x0800cd2d
 800ccfc:	0800cd89 	.word	0x0800cd89
 800cd00:	0800cd89 	.word	0x0800cd89
 800cd04:	0800cd89 	.word	0x0800cd89
 800cd08:	0800cd89 	.word	0x0800cd89
 800cd0c:	0800cd89 	.word	0x0800cd89
 800cd10:	0800cd89 	.word	0x0800cd89
 800cd14:	0800cd89 	.word	0x0800cd89
 800cd18:	0800cd47 	.word	0x0800cd47
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800cd1c:	f7fd fca6 	bl	800a66c <HAL_RCC_GetPCLK3Freq>
 800cd20:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800cd22:	e109      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800cd24:	f7fd fb58 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800cd28:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800cd2a:	e105      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd2c:	4b53      	ldr	r3, [pc, #332]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd38:	d102      	bne.n	800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800cd3a:	4b51      	ldr	r3, [pc, #324]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800cd3c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cd3e:	e0fb      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800cd40:	2300      	movs	r3, #0
 800cd42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cd44:	e0f8      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cd46:	4b4d      	ldr	r3, [pc, #308]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f003 0320 	and.w	r3, r3, #32
 800cd4e:	2b20      	cmp	r3, #32
 800cd50:	d117      	bne.n	800cd82 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cd52:	4b4a      	ldr	r3, [pc, #296]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d005      	beq.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800cd5e:	4b47      	ldr	r3, [pc, #284]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	0e1b      	lsrs	r3, r3, #24
 800cd64:	f003 030f 	and.w	r3, r3, #15
 800cd68:	e006      	b.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800cd6a:	4b44      	ldr	r3, [pc, #272]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800cd6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cd70:	041b      	lsls	r3, r3, #16
 800cd72:	0e1b      	lsrs	r3, r3, #24
 800cd74:	f003 030f 	and.w	r3, r3, #15
 800cd78:	4a42      	ldr	r2, [pc, #264]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800cd7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cd80:	e0da      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800cd82:	2300      	movs	r3, #0
 800cd84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cd86:	e0d7      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cd8c:	e0d4      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800cd8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd92:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800cd96:	430b      	orrs	r3, r1
 800cd98:	d155      	bne.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800cd9a:	4b38      	ldr	r3, [pc, #224]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800cd9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cda0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cda4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800cda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cdac:	d013      	beq.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800cdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cdb4:	d844      	bhi.n	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cdbc:	d013      	beq.n	800cde6 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cdc4:	d83c      	bhi.n	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800cdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d014      	beq.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdd2:	d014      	beq.n	800cdfe <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800cdd4:	e034      	b.n	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdd6:	f107 0318 	add.w	r3, r7, #24
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fe fc08 	bl	800b5f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cde4:	e0a8      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cde6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fe fa98 	bl	800b320 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cdf4:	e0a0      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800cdf6:	f7fd faef 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800cdfa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800cdfc:	e09c      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cdfe:	4b1f      	ldr	r3, [pc, #124]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f003 0320 	and.w	r3, r3, #32
 800ce06:	2b20      	cmp	r3, #32
 800ce08:	d117      	bne.n	800ce3a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ce0a:	4b1c      	ldr	r3, [pc, #112]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d005      	beq.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 800ce16:	4b19      	ldr	r3, [pc, #100]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	0e1b      	lsrs	r3, r3, #24
 800ce1c:	f003 030f 	and.w	r3, r3, #15
 800ce20:	e006      	b.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800ce22:	4b16      	ldr	r3, [pc, #88]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800ce24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ce28:	041b      	lsls	r3, r3, #16
 800ce2a:	0e1b      	lsrs	r3, r3, #24
 800ce2c:	f003 030f 	and.w	r3, r3, #15
 800ce30:	4a14      	ldr	r2, [pc, #80]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800ce32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce36:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ce38:	e07e      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ce3e:	e07b      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800ce40:	2300      	movs	r3, #0
 800ce42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ce44:	e078      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800ce46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce4a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800ce4e:	430b      	orrs	r3, r1
 800ce50:	d138      	bne.n	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800ce52:	4b0a      	ldr	r3, [pc, #40]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800ce54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ce58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce5c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800ce5e:	4b07      	ldr	r3, [pc, #28]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800ce60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce64:	f003 0302 	and.w	r3, r3, #2
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d10d      	bne.n	800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800ce6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d10a      	bne.n	800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 800ce72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce76:	637b      	str	r3, [r7, #52]	; 0x34
 800ce78:	e05e      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800ce7a:	bf00      	nop
 800ce7c:	46020c00 	.word	0x46020c00
 800ce80:	00f42400 	.word	0x00f42400
 800ce84:	0800e7b8 	.word	0x0800e7b8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800ce88:	4b2e      	ldr	r3, [pc, #184]	; (800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800ce8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce96:	d112      	bne.n	800cebe <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 800ce98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce9e:	d10e      	bne.n	800cebe <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cea0:	4b28      	ldr	r3, [pc, #160]	; (800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800cea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ceaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ceae:	d102      	bne.n	800ceb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 800ceb0:	23fa      	movs	r3, #250	; 0xfa
 800ceb2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ceb4:	e040      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800ceb6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ceba:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cebc:	e03c      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800cebe:	2300      	movs	r3, #0
 800cec0:	637b      	str	r3, [r7, #52]	; 0x34
 800cec2:	e039      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800cec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cec8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cecc:	430b      	orrs	r3, r1
 800cece:	d131      	bne.n	800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800ced0:	4b1c      	ldr	r3, [pc, #112]	; (800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800ced2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ced6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ceda:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800cedc:	4b19      	ldr	r3, [pc, #100]	; (800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cee8:	d105      	bne.n	800cef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800ceea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d102      	bne.n	800cef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 800cef0:	4b15      	ldr	r3, [pc, #84]	; (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800cef2:	637b      	str	r3, [r7, #52]	; 0x34
 800cef4:	e020      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800cef6:	4b13      	ldr	r3, [pc, #76]	; (800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cefe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf02:	d106      	bne.n	800cf12 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 800cf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf0a:	d102      	bne.n	800cf12 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800cf0c:	4b0f      	ldr	r3, [pc, #60]	; (800cf4c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800cf0e:	637b      	str	r3, [r7, #52]	; 0x34
 800cf10:	e012      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800cf12:	4b0c      	ldr	r3, [pc, #48]	; (800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf1e:	d106      	bne.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 800cf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf26:	d102      	bne.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 800cf28:	4b09      	ldr	r3, [pc, #36]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800cf2a:	637b      	str	r3, [r7, #52]	; 0x34
 800cf2c:	e004      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	637b      	str	r3, [r7, #52]	; 0x34
 800cf32:	e001      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800cf38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3738      	adds	r7, #56	; 0x38
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	46020c00 	.word	0x46020c00
 800cf48:	02dc6c00 	.word	0x02dc6c00
 800cf4c:	016e3600 	.word	0x016e3600
 800cf50:	00f42400 	.word	0x00f42400

0800cf54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800cf5c:	4b47      	ldr	r3, [pc, #284]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a46      	ldr	r2, [pc, #280]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800cf62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cf66:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cf68:	f7fb fdf0 	bl	8008b4c <HAL_GetTick>
 800cf6c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cf6e:	e008      	b.n	800cf82 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf70:	f7fb fdec 	bl	8008b4c <HAL_GetTick>
 800cf74:	4602      	mov	r2, r0
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	1ad3      	subs	r3, r2, r3
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	d901      	bls.n	800cf82 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800cf7e:	2303      	movs	r3, #3
 800cf80:	e077      	b.n	800d072 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cf82:	4b3e      	ldr	r3, [pc, #248]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1f0      	bne.n	800cf70 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800cf8e:	4b3b      	ldr	r3, [pc, #236]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800cf90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cf96:	f023 0303 	bic.w	r3, r3, #3
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	6811      	ldr	r1, [r2, #0]
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	6852      	ldr	r2, [r2, #4]
 800cfa2:	3a01      	subs	r2, #1
 800cfa4:	0212      	lsls	r2, r2, #8
 800cfa6:	430a      	orrs	r2, r1
 800cfa8:	4934      	ldr	r1, [pc, #208]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	62cb      	str	r3, [r1, #44]	; 0x2c
 800cfae:	4b33      	ldr	r3, [pc, #204]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800cfb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfb2:	4b33      	ldr	r3, [pc, #204]	; (800d080 <RCCEx_PLL2_Config+0x12c>)
 800cfb4:	4013      	ands	r3, r2
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	6892      	ldr	r2, [r2, #8]
 800cfba:	3a01      	subs	r2, #1
 800cfbc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	68d2      	ldr	r2, [r2, #12]
 800cfc4:	3a01      	subs	r2, #1
 800cfc6:	0252      	lsls	r2, r2, #9
 800cfc8:	b292      	uxth	r2, r2
 800cfca:	4311      	orrs	r1, r2
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	6912      	ldr	r2, [r2, #16]
 800cfd0:	3a01      	subs	r2, #1
 800cfd2:	0412      	lsls	r2, r2, #16
 800cfd4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800cfd8:	4311      	orrs	r1, r2
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	6952      	ldr	r2, [r2, #20]
 800cfde:	3a01      	subs	r2, #1
 800cfe0:	0612      	lsls	r2, r2, #24
 800cfe2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800cfe6:	430a      	orrs	r2, r1
 800cfe8:	4924      	ldr	r1, [pc, #144]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800cfea:	4313      	orrs	r3, r2
 800cfec:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800cfee:	4b23      	ldr	r3, [pc, #140]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800cff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff2:	f023 020c 	bic.w	r2, r3, #12
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	699b      	ldr	r3, [r3, #24]
 800cffa:	4920      	ldr	r1, [pc, #128]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800cffc:	4313      	orrs	r3, r2
 800cffe:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800d000:	4b1e      	ldr	r3, [pc, #120]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800d002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6a1b      	ldr	r3, [r3, #32]
 800d008:	491c      	ldr	r1, [pc, #112]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800d00a:	4313      	orrs	r3, r2
 800d00c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800d00e:	4b1b      	ldr	r3, [pc, #108]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800d010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d012:	4a1a      	ldr	r2, [pc, #104]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800d014:	f023 0310 	bic.w	r3, r3, #16
 800d018:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d01a:	4b18      	ldr	r3, [pc, #96]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800d01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d022:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	69d2      	ldr	r2, [r2, #28]
 800d02a:	00d2      	lsls	r2, r2, #3
 800d02c:	4913      	ldr	r1, [pc, #76]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800d02e:	4313      	orrs	r3, r2
 800d030:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800d032:	4b12      	ldr	r3, [pc, #72]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800d034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d036:	4a11      	ldr	r2, [pc, #68]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800d038:	f043 0310 	orr.w	r3, r3, #16
 800d03c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800d03e:	4b0f      	ldr	r3, [pc, #60]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a0e      	ldr	r2, [pc, #56]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800d044:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d048:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d04a:	f7fb fd7f 	bl	8008b4c <HAL_GetTick>
 800d04e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d050:	e008      	b.n	800d064 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d052:	f7fb fd7b 	bl	8008b4c <HAL_GetTick>
 800d056:	4602      	mov	r2, r0
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d901      	bls.n	800d064 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800d060:	2303      	movs	r3, #3
 800d062:	e006      	b.n	800d072 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d064:	4b05      	ldr	r3, [pc, #20]	; (800d07c <RCCEx_PLL2_Config+0x128>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d0f0      	beq.n	800d052 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800d070:	2300      	movs	r3, #0

}
 800d072:	4618      	mov	r0, r3
 800d074:	3710      	adds	r7, #16
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	bf00      	nop
 800d07c:	46020c00 	.word	0x46020c00
 800d080:	80800000 	.word	0x80800000

0800d084 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800d08c:	4b47      	ldr	r3, [pc, #284]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a46      	ldr	r2, [pc, #280]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d096:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d098:	f7fb fd58 	bl	8008b4c <HAL_GetTick>
 800d09c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d09e:	e008      	b.n	800d0b2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d0a0:	f7fb fd54 	bl	8008b4c <HAL_GetTick>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	2b02      	cmp	r3, #2
 800d0ac:	d901      	bls.n	800d0b2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	e077      	b.n	800d1a2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d0b2:	4b3e      	ldr	r3, [pc, #248]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1f0      	bne.n	800d0a0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800d0be:	4b3b      	ldr	r3, [pc, #236]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d0c6:	f023 0303 	bic.w	r3, r3, #3
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	6811      	ldr	r1, [r2, #0]
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	6852      	ldr	r2, [r2, #4]
 800d0d2:	3a01      	subs	r2, #1
 800d0d4:	0212      	lsls	r2, r2, #8
 800d0d6:	430a      	orrs	r2, r1
 800d0d8:	4934      	ldr	r1, [pc, #208]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	630b      	str	r3, [r1, #48]	; 0x30
 800d0de:	4b33      	ldr	r3, [pc, #204]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d0e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0e2:	4b33      	ldr	r3, [pc, #204]	; (800d1b0 <RCCEx_PLL3_Config+0x12c>)
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	6892      	ldr	r2, [r2, #8]
 800d0ea:	3a01      	subs	r2, #1
 800d0ec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	68d2      	ldr	r2, [r2, #12]
 800d0f4:	3a01      	subs	r2, #1
 800d0f6:	0252      	lsls	r2, r2, #9
 800d0f8:	b292      	uxth	r2, r2
 800d0fa:	4311      	orrs	r1, r2
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	6912      	ldr	r2, [r2, #16]
 800d100:	3a01      	subs	r2, #1
 800d102:	0412      	lsls	r2, r2, #16
 800d104:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800d108:	4311      	orrs	r1, r2
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	6952      	ldr	r2, [r2, #20]
 800d10e:	3a01      	subs	r2, #1
 800d110:	0612      	lsls	r2, r2, #24
 800d112:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800d116:	430a      	orrs	r2, r1
 800d118:	4924      	ldr	r1, [pc, #144]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d11a:	4313      	orrs	r3, r2
 800d11c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800d11e:	4b23      	ldr	r3, [pc, #140]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d122:	f023 020c 	bic.w	r2, r3, #12
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	699b      	ldr	r3, [r3, #24]
 800d12a:	4920      	ldr	r1, [pc, #128]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d12c:	4313      	orrs	r3, r2
 800d12e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800d130:	4b1e      	ldr	r3, [pc, #120]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6a1b      	ldr	r3, [r3, #32]
 800d138:	491c      	ldr	r1, [pc, #112]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d13a:	4313      	orrs	r3, r2
 800d13c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800d13e:	4b1b      	ldr	r3, [pc, #108]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d142:	4a1a      	ldr	r2, [pc, #104]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d144:	f023 0310 	bic.w	r3, r3, #16
 800d148:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d14a:	4b18      	ldr	r3, [pc, #96]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d14e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d152:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	69d2      	ldr	r2, [r2, #28]
 800d15a:	00d2      	lsls	r2, r2, #3
 800d15c:	4913      	ldr	r1, [pc, #76]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d15e:	4313      	orrs	r3, r2
 800d160:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800d162:	4b12      	ldr	r3, [pc, #72]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d166:	4a11      	ldr	r2, [pc, #68]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d168:	f043 0310 	orr.w	r3, r3, #16
 800d16c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800d16e:	4b0f      	ldr	r3, [pc, #60]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a0e      	ldr	r2, [pc, #56]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d178:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d17a:	f7fb fce7 	bl	8008b4c <HAL_GetTick>
 800d17e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d180:	e008      	b.n	800d194 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d182:	f7fb fce3 	bl	8008b4c <HAL_GetTick>
 800d186:	4602      	mov	r2, r0
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	2b02      	cmp	r3, #2
 800d18e:	d901      	bls.n	800d194 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800d190:	2303      	movs	r3, #3
 800d192:	e006      	b.n	800d1a2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d194:	4b05      	ldr	r3, [pc, #20]	; (800d1ac <RCCEx_PLL3_Config+0x128>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d0f0      	beq.n	800d182 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	46020c00 	.word	0x46020c00
 800d1b0:	80800000 	.word	0x80800000

0800d1b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d101      	bne.n	800d1c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e042      	b.n	800d24c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d106      	bne.n	800d1de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7fb fac3 	bl	8008764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2224      	movs	r2, #36	; 0x24
 800d1e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f022 0201 	bic.w	r2, r2, #1
 800d1f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 f8ca 	bl	800d390 <UART_SetConfig>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d101      	bne.n	800d206 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d202:	2301      	movs	r3, #1
 800d204:	e022      	b.n	800d24c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d002      	beq.n	800d214 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 fa60 	bl	800d6d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	685a      	ldr	r2, [r3, #4]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	689a      	ldr	r2, [r3, #8]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f042 0201 	orr.w	r2, r2, #1
 800d242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 fae7 	bl	800d818 <UART_CheckIdleState>
 800d24a:	4603      	mov	r3, r0
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b08a      	sub	sp, #40	; 0x28
 800d258:	af02      	add	r7, sp, #8
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	603b      	str	r3, [r7, #0]
 800d260:	4613      	mov	r3, r2
 800d262:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d26a:	2b20      	cmp	r3, #32
 800d26c:	f040 808b 	bne.w	800d386 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d002      	beq.n	800d27c <HAL_UART_Transmit+0x28>
 800d276:	88fb      	ldrh	r3, [r7, #6]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d101      	bne.n	800d280 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	e083      	b.n	800d388 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d28a:	2b80      	cmp	r3, #128	; 0x80
 800d28c:	d107      	bne.n	800d29e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	689a      	ldr	r2, [r3, #8]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d29c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2221      	movs	r2, #33	; 0x21
 800d2aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d2ae:	f7fb fc4d 	bl	8008b4c <HAL_GetTick>
 800d2b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	88fa      	ldrh	r2, [r7, #6]
 800d2b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	88fa      	ldrh	r2, [r7, #6]
 800d2c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2cc:	d108      	bne.n	800d2e0 <HAL_UART_Transmit+0x8c>
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d104      	bne.n	800d2e0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	61bb      	str	r3, [r7, #24]
 800d2de:	e003      	b.n	800d2e8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d2e8:	e030      	b.n	800d34c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	9300      	str	r3, [sp, #0]
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	2180      	movs	r1, #128	; 0x80
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	f000 fb39 	bl	800d96c <UART_WaitOnFlagUntilTimeout>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d005      	beq.n	800d30c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2220      	movs	r2, #32
 800d304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d308:	2303      	movs	r3, #3
 800d30a:	e03d      	b.n	800d388 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10b      	bne.n	800d32a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	881b      	ldrh	r3, [r3, #0]
 800d316:	461a      	mov	r2, r3
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d320:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	3302      	adds	r3, #2
 800d326:	61bb      	str	r3, [r7, #24]
 800d328:	e007      	b.n	800d33a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	781a      	ldrb	r2, [r3, #0]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d334:	69fb      	ldr	r3, [r7, #28]
 800d336:	3301      	adds	r3, #1
 800d338:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d340:	b29b      	uxth	r3, r3
 800d342:	3b01      	subs	r3, #1
 800d344:	b29a      	uxth	r2, r3
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d352:	b29b      	uxth	r3, r3
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1c8      	bne.n	800d2ea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	9300      	str	r3, [sp, #0]
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	2200      	movs	r2, #0
 800d360:	2140      	movs	r1, #64	; 0x40
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f000 fb02 	bl	800d96c <UART_WaitOnFlagUntilTimeout>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d005      	beq.n	800d37a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2220      	movs	r2, #32
 800d372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d376:	2303      	movs	r3, #3
 800d378:	e006      	b.n	800d388 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2220      	movs	r2, #32
 800d37e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d382:	2300      	movs	r3, #0
 800d384:	e000      	b.n	800d388 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800d386:	2302      	movs	r3, #2
  }
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3720      	adds	r7, #32
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d394:	b094      	sub	sp, #80	; 0x50
 800d396:	af00      	add	r7, sp, #0
 800d398:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d39a:	2300      	movs	r3, #0
 800d39c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	4b7e      	ldr	r3, [pc, #504]	; (800d5a0 <UART_SetConfig+0x210>)
 800d3a6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3aa:	689a      	ldr	r2, [r3, #8]
 800d3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ae:	691b      	ldr	r3, [r3, #16]
 800d3b0:	431a      	orrs	r2, r3
 800d3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b4:	695b      	ldr	r3, [r3, #20]
 800d3b6:	431a      	orrs	r2, r3
 800d3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ba:	69db      	ldr	r3, [r3, #28]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4977      	ldr	r1, [pc, #476]	; (800d5a4 <UART_SetConfig+0x214>)
 800d3c8:	4019      	ands	r1, r3
 800d3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3d0:	430b      	orrs	r3, r1
 800d3d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e0:	68d9      	ldr	r1, [r3, #12]
 800d3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	ea40 0301 	orr.w	r3, r0, r1
 800d3ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ee:	699b      	ldr	r3, [r3, #24]
 800d3f0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	4b6a      	ldr	r3, [pc, #424]	; (800d5a0 <UART_SetConfig+0x210>)
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d009      	beq.n	800d410 <UART_SetConfig+0x80>
 800d3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	4b69      	ldr	r3, [pc, #420]	; (800d5a8 <UART_SetConfig+0x218>)
 800d402:	429a      	cmp	r2, r3
 800d404:	d004      	beq.n	800d410 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d408:	6a1a      	ldr	r2, [r3, #32]
 800d40a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d40c:	4313      	orrs	r3, r2
 800d40e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	689b      	ldr	r3, [r3, #8]
 800d416:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800d41a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800d41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d424:	430b      	orrs	r3, r1
 800d426:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42e:	f023 000f 	bic.w	r0, r3, #15
 800d432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d434:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	ea40 0301 	orr.w	r3, r0, r1
 800d43e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	4b59      	ldr	r3, [pc, #356]	; (800d5ac <UART_SetConfig+0x21c>)
 800d446:	429a      	cmp	r2, r3
 800d448:	d102      	bne.n	800d450 <UART_SetConfig+0xc0>
 800d44a:	2301      	movs	r3, #1
 800d44c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d44e:	e029      	b.n	800d4a4 <UART_SetConfig+0x114>
 800d450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	4b56      	ldr	r3, [pc, #344]	; (800d5b0 <UART_SetConfig+0x220>)
 800d456:	429a      	cmp	r2, r3
 800d458:	d102      	bne.n	800d460 <UART_SetConfig+0xd0>
 800d45a:	2302      	movs	r3, #2
 800d45c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d45e:	e021      	b.n	800d4a4 <UART_SetConfig+0x114>
 800d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	4b53      	ldr	r3, [pc, #332]	; (800d5b4 <UART_SetConfig+0x224>)
 800d466:	429a      	cmp	r2, r3
 800d468:	d102      	bne.n	800d470 <UART_SetConfig+0xe0>
 800d46a:	2304      	movs	r3, #4
 800d46c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d46e:	e019      	b.n	800d4a4 <UART_SetConfig+0x114>
 800d470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	4b50      	ldr	r3, [pc, #320]	; (800d5b8 <UART_SetConfig+0x228>)
 800d476:	429a      	cmp	r2, r3
 800d478:	d102      	bne.n	800d480 <UART_SetConfig+0xf0>
 800d47a:	2308      	movs	r3, #8
 800d47c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d47e:	e011      	b.n	800d4a4 <UART_SetConfig+0x114>
 800d480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	4b4d      	ldr	r3, [pc, #308]	; (800d5bc <UART_SetConfig+0x22c>)
 800d486:	429a      	cmp	r2, r3
 800d488:	d102      	bne.n	800d490 <UART_SetConfig+0x100>
 800d48a:	2310      	movs	r3, #16
 800d48c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d48e:	e009      	b.n	800d4a4 <UART_SetConfig+0x114>
 800d490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	4b42      	ldr	r3, [pc, #264]	; (800d5a0 <UART_SetConfig+0x210>)
 800d496:	429a      	cmp	r2, r3
 800d498:	d102      	bne.n	800d4a0 <UART_SetConfig+0x110>
 800d49a:	2320      	movs	r3, #32
 800d49c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d49e:	e001      	b.n	800d4a4 <UART_SetConfig+0x114>
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	4b3d      	ldr	r3, [pc, #244]	; (800d5a0 <UART_SetConfig+0x210>)
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d005      	beq.n	800d4ba <UART_SetConfig+0x12a>
 800d4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	4b3d      	ldr	r3, [pc, #244]	; (800d5a8 <UART_SetConfig+0x218>)
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	f040 8085 	bne.w	800d5c4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d4ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4bc:	2200      	movs	r2, #0
 800d4be:	623b      	str	r3, [r7, #32]
 800d4c0:	627a      	str	r2, [r7, #36]	; 0x24
 800d4c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d4c6:	f7fe fb63 	bl	800bb90 <HAL_RCCEx_GetPeriphCLKFreq>
 800d4ca:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d4cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f000 80e8 	beq.w	800d6a4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d8:	4a39      	ldr	r2, [pc, #228]	; (800d5c0 <UART_SetConfig+0x230>)
 800d4da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4e6:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	685a      	ldr	r2, [r3, #4]
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	005b      	lsls	r3, r3, #1
 800d4f0:	4413      	add	r3, r2
 800d4f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d305      	bcc.n	800d504 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d500:	429a      	cmp	r2, r3
 800d502:	d903      	bls.n	800d50c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800d504:	2301      	movs	r3, #1
 800d506:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d50a:	e048      	b.n	800d59e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d50e:	2200      	movs	r2, #0
 800d510:	61bb      	str	r3, [r7, #24]
 800d512:	61fa      	str	r2, [r7, #28]
 800d514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d518:	4a29      	ldr	r2, [pc, #164]	; (800d5c0 <UART_SetConfig+0x230>)
 800d51a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d51e:	b29b      	uxth	r3, r3
 800d520:	2200      	movs	r2, #0
 800d522:	613b      	str	r3, [r7, #16]
 800d524:	617a      	str	r2, [r7, #20]
 800d526:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d52a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d52e:	f7fa fea3 	bl	8008278 <__aeabi_uldivmod>
 800d532:	4602      	mov	r2, r0
 800d534:	460b      	mov	r3, r1
 800d536:	4610      	mov	r0, r2
 800d538:	4619      	mov	r1, r3
 800d53a:	f04f 0200 	mov.w	r2, #0
 800d53e:	f04f 0300 	mov.w	r3, #0
 800d542:	020b      	lsls	r3, r1, #8
 800d544:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d548:	0202      	lsls	r2, r0, #8
 800d54a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d54c:	6849      	ldr	r1, [r1, #4]
 800d54e:	0849      	lsrs	r1, r1, #1
 800d550:	2000      	movs	r0, #0
 800d552:	460c      	mov	r4, r1
 800d554:	4605      	mov	r5, r0
 800d556:	eb12 0804 	adds.w	r8, r2, r4
 800d55a:	eb43 0905 	adc.w	r9, r3, r5
 800d55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	60bb      	str	r3, [r7, #8]
 800d566:	60fa      	str	r2, [r7, #12]
 800d568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d56c:	4640      	mov	r0, r8
 800d56e:	4649      	mov	r1, r9
 800d570:	f7fa fe82 	bl	8008278 <__aeabi_uldivmod>
 800d574:	4602      	mov	r2, r0
 800d576:	460b      	mov	r3, r1
 800d578:	4613      	mov	r3, r2
 800d57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d57e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d582:	d308      	bcc.n	800d596 <UART_SetConfig+0x206>
 800d584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d58a:	d204      	bcs.n	800d596 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800d58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d592:	60da      	str	r2, [r3, #12]
 800d594:	e003      	b.n	800d59e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800d59c:	e082      	b.n	800d6a4 <UART_SetConfig+0x314>
 800d59e:	e081      	b.n	800d6a4 <UART_SetConfig+0x314>
 800d5a0:	46002400 	.word	0x46002400
 800d5a4:	cfff69f3 	.word	0xcfff69f3
 800d5a8:	56002400 	.word	0x56002400
 800d5ac:	40013800 	.word	0x40013800
 800d5b0:	40004400 	.word	0x40004400
 800d5b4:	40004800 	.word	0x40004800
 800d5b8:	40004c00 	.word	0x40004c00
 800d5bc:	40005000 	.word	0x40005000
 800d5c0:	0800e878 	.word	0x0800e878
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c6:	69db      	ldr	r3, [r3, #28]
 800d5c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d5cc:	d13c      	bne.n	800d648 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d5ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	603b      	str	r3, [r7, #0]
 800d5d4:	607a      	str	r2, [r7, #4]
 800d5d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d5da:	f7fe fad9 	bl	800bb90 <HAL_RCCEx_GetPeriphCLKFreq>
 800d5de:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d5e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d05e      	beq.n	800d6a4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ea:	4a39      	ldr	r2, [pc, #228]	; (800d6d0 <UART_SetConfig+0x340>)
 800d5ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5f8:	005a      	lsls	r2, r3, #1
 800d5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	085b      	lsrs	r3, r3, #1
 800d600:	441a      	add	r2, r3
 800d602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	fbb2 f3f3 	udiv	r3, r2, r3
 800d60a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d60e:	2b0f      	cmp	r3, #15
 800d610:	d916      	bls.n	800d640 <UART_SetConfig+0x2b0>
 800d612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d618:	d212      	bcs.n	800d640 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	f023 030f 	bic.w	r3, r3, #15
 800d622:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d626:	085b      	lsrs	r3, r3, #1
 800d628:	b29b      	uxth	r3, r3
 800d62a:	f003 0307 	and.w	r3, r3, #7
 800d62e:	b29a      	uxth	r2, r3
 800d630:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d632:	4313      	orrs	r3, r2
 800d634:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800d636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d63c:	60da      	str	r2, [r3, #12]
 800d63e:	e031      	b.n	800d6a4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800d640:	2301      	movs	r3, #1
 800d642:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d646:	e02d      	b.n	800d6a4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d64a:	2200      	movs	r2, #0
 800d64c:	469a      	mov	sl, r3
 800d64e:	4693      	mov	fp, r2
 800d650:	4650      	mov	r0, sl
 800d652:	4659      	mov	r1, fp
 800d654:	f7fe fa9c 	bl	800bb90 <HAL_RCCEx_GetPeriphCLKFreq>
 800d658:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800d65a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d021      	beq.n	800d6a4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d664:	4a1a      	ldr	r2, [pc, #104]	; (800d6d0 <UART_SetConfig+0x340>)
 800d666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d66a:	461a      	mov	r2, r3
 800d66c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d66e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	085b      	lsrs	r3, r3, #1
 800d678:	441a      	add	r2, r3
 800d67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d682:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d686:	2b0f      	cmp	r3, #15
 800d688:	d909      	bls.n	800d69e <UART_SetConfig+0x30e>
 800d68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d68c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d690:	d205      	bcs.n	800d69e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d694:	b29a      	uxth	r2, r3
 800d696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	60da      	str	r2, [r3, #12]
 800d69c:	e002      	b.n	800d6a4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6bc:	2200      	movs	r2, #0
 800d6be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d6c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3750      	adds	r7, #80	; 0x50
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d6ce:	bf00      	nop
 800d6d0:	0800e878 	.word	0x0800e878

0800d6d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00a      	beq.n	800d6fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	430a      	orrs	r2, r1
 800d6fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d702:	f003 0302 	and.w	r3, r3, #2
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00a      	beq.n	800d720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	430a      	orrs	r2, r1
 800d71e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d724:	f003 0304 	and.w	r3, r3, #4
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00a      	beq.n	800d742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	430a      	orrs	r2, r1
 800d740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d746:	f003 0308 	and.w	r3, r3, #8
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d00a      	beq.n	800d764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	430a      	orrs	r2, r1
 800d762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d768:	f003 0310 	and.w	r3, r3, #16
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00a      	beq.n	800d786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	430a      	orrs	r2, r1
 800d784:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d78a:	f003 0320 	and.w	r3, r3, #32
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d00a      	beq.n	800d7a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	689b      	ldr	r3, [r3, #8]
 800d798:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	430a      	orrs	r2, r1
 800d7a6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d01a      	beq.n	800d7ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	430a      	orrs	r2, r1
 800d7c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7d2:	d10a      	bne.n	800d7ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	430a      	orrs	r2, r1
 800d7e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d00a      	beq.n	800d80c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	430a      	orrs	r2, r1
 800d80a:	605a      	str	r2, [r3, #4]
  }
}
 800d80c:	bf00      	nop
 800d80e:	370c      	adds	r7, #12
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b098      	sub	sp, #96	; 0x60
 800d81c:	af02      	add	r7, sp, #8
 800d81e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d828:	f7fb f990 	bl	8008b4c <HAL_GetTick>
 800d82c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f003 0308 	and.w	r3, r3, #8
 800d838:	2b08      	cmp	r3, #8
 800d83a:	d12f      	bne.n	800d89c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d83c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d844:	2200      	movs	r2, #0
 800d846:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 f88e 	bl	800d96c <UART_WaitOnFlagUntilTimeout>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d022      	beq.n	800d89c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85e:	e853 3f00 	ldrex	r3, [r3]
 800d862:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d86a:	653b      	str	r3, [r7, #80]	; 0x50
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	461a      	mov	r2, r3
 800d872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d874:	647b      	str	r3, [r7, #68]	; 0x44
 800d876:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d878:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d87a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d87c:	e841 2300 	strex	r3, r2, [r1]
 800d880:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d884:	2b00      	cmp	r3, #0
 800d886:	d1e6      	bne.n	800d856 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2220      	movs	r2, #32
 800d88c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d898:	2303      	movs	r3, #3
 800d89a:	e063      	b.n	800d964 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f003 0304 	and.w	r3, r3, #4
 800d8a6:	2b04      	cmp	r3, #4
 800d8a8:	d149      	bne.n	800d93e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 f857 	bl	800d96c <UART_WaitOnFlagUntilTimeout>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d03c      	beq.n	800d93e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8cc:	e853 3f00 	ldrex	r3, [r3]
 800d8d0:	623b      	str	r3, [r7, #32]
   return(result);
 800d8d2:	6a3b      	ldr	r3, [r7, #32]
 800d8d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	461a      	mov	r2, r3
 800d8e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8e2:	633b      	str	r3, [r7, #48]	; 0x30
 800d8e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8ea:	e841 2300 	strex	r3, r2, [r1]
 800d8ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d1e6      	bne.n	800d8c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	3308      	adds	r3, #8
 800d8fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	e853 3f00 	ldrex	r3, [r3]
 800d904:	60fb      	str	r3, [r7, #12]
   return(result);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f023 0301 	bic.w	r3, r3, #1
 800d90c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	3308      	adds	r3, #8
 800d914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d916:	61fa      	str	r2, [r7, #28]
 800d918:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91a:	69b9      	ldr	r1, [r7, #24]
 800d91c:	69fa      	ldr	r2, [r7, #28]
 800d91e:	e841 2300 	strex	r3, r2, [r1]
 800d922:	617b      	str	r3, [r7, #20]
   return(result);
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d1e5      	bne.n	800d8f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2220      	movs	r2, #32
 800d92e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2200      	movs	r2, #0
 800d936:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d93a:	2303      	movs	r3, #3
 800d93c:	e012      	b.n	800d964 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2220      	movs	r2, #32
 800d942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2220      	movs	r2, #32
 800d94a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3758      	adds	r7, #88	; 0x58
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	603b      	str	r3, [r7, #0]
 800d978:	4613      	mov	r3, r2
 800d97a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d97c:	e049      	b.n	800da12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d97e:	69bb      	ldr	r3, [r7, #24]
 800d980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d984:	d045      	beq.n	800da12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d986:	f7fb f8e1 	bl	8008b4c <HAL_GetTick>
 800d98a:	4602      	mov	r2, r0
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	1ad3      	subs	r3, r2, r3
 800d990:	69ba      	ldr	r2, [r7, #24]
 800d992:	429a      	cmp	r2, r3
 800d994:	d302      	bcc.n	800d99c <UART_WaitOnFlagUntilTimeout+0x30>
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d101      	bne.n	800d9a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d99c:	2303      	movs	r3, #3
 800d99e:	e048      	b.n	800da32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f003 0304 	and.w	r3, r3, #4
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d031      	beq.n	800da12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	69db      	ldr	r3, [r3, #28]
 800d9b4:	f003 0308 	and.w	r3, r3, #8
 800d9b8:	2b08      	cmp	r3, #8
 800d9ba:	d110      	bne.n	800d9de <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2208      	movs	r2, #8
 800d9c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f000 f838 	bl	800da3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2208      	movs	r2, #8
 800d9ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e029      	b.n	800da32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	69db      	ldr	r3, [r3, #28]
 800d9e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d9e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d9ec:	d111      	bne.n	800da12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d9f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9f8:	68f8      	ldr	r0, [r7, #12]
 800d9fa:	f000 f81e 	bl	800da3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2220      	movs	r2, #32
 800da02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2200      	movs	r2, #0
 800da0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800da0e:	2303      	movs	r3, #3
 800da10:	e00f      	b.n	800da32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	69da      	ldr	r2, [r3, #28]
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	4013      	ands	r3, r2
 800da1c:	68ba      	ldr	r2, [r7, #8]
 800da1e:	429a      	cmp	r2, r3
 800da20:	bf0c      	ite	eq
 800da22:	2301      	moveq	r3, #1
 800da24:	2300      	movne	r3, #0
 800da26:	b2db      	uxtb	r3, r3
 800da28:	461a      	mov	r2, r3
 800da2a:	79fb      	ldrb	r3, [r7, #7]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d0a6      	beq.n	800d97e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da3a:	b480      	push	{r7}
 800da3c:	b095      	sub	sp, #84	; 0x54
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da4a:	e853 3f00 	ldrex	r3, [r3]
 800da4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800da50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800da56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	461a      	mov	r2, r3
 800da5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da60:	643b      	str	r3, [r7, #64]	; 0x40
 800da62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800da66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da68:	e841 2300 	strex	r3, r2, [r1]
 800da6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da70:	2b00      	cmp	r3, #0
 800da72:	d1e6      	bne.n	800da42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3308      	adds	r3, #8
 800da7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da7c:	6a3b      	ldr	r3, [r7, #32]
 800da7e:	e853 3f00 	ldrex	r3, [r3]
 800da82:	61fb      	str	r3, [r7, #28]
   return(result);
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da8a:	f023 0301 	bic.w	r3, r3, #1
 800da8e:	64bb      	str	r3, [r7, #72]	; 0x48
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	3308      	adds	r3, #8
 800da96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da98:	62fa      	str	r2, [r7, #44]	; 0x2c
 800da9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daa0:	e841 2300 	strex	r3, r2, [r1]
 800daa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d1e3      	bne.n	800da74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d118      	bne.n	800dae6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	e853 3f00 	ldrex	r3, [r3]
 800dac0:	60bb      	str	r3, [r7, #8]
   return(result);
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	f023 0310 	bic.w	r3, r3, #16
 800dac8:	647b      	str	r3, [r7, #68]	; 0x44
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	461a      	mov	r2, r3
 800dad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dad2:	61bb      	str	r3, [r7, #24]
 800dad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dad6:	6979      	ldr	r1, [r7, #20]
 800dad8:	69ba      	ldr	r2, [r7, #24]
 800dada:	e841 2300 	strex	r3, r2, [r1]
 800dade:	613b      	str	r3, [r7, #16]
   return(result);
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1e6      	bne.n	800dab4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2220      	movs	r2, #32
 800daea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800dafa:	bf00      	nop
 800dafc:	3754      	adds	r7, #84	; 0x54
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr

0800db06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db06:	b480      	push	{r7}
 800db08:	b085      	sub	sp, #20
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800db14:	2b01      	cmp	r3, #1
 800db16:	d101      	bne.n	800db1c <HAL_UARTEx_DisableFifoMode+0x16>
 800db18:	2302      	movs	r3, #2
 800db1a:	e027      	b.n	800db6c <HAL_UARTEx_DisableFifoMode+0x66>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2201      	movs	r2, #1
 800db20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2224      	movs	r2, #36	; 0x24
 800db28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f022 0201 	bic.w	r2, r2, #1
 800db42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800db4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2200      	movs	r2, #0
 800db50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2220      	movs	r2, #32
 800db5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2200      	movs	r2, #0
 800db66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800db6a:	2300      	movs	r3, #0
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d101      	bne.n	800db90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800db8c:	2302      	movs	r3, #2
 800db8e:	e02d      	b.n	800dbec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2201      	movs	r2, #1
 800db94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2224      	movs	r2, #36	; 0x24
 800db9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f022 0201 	bic.w	r2, r2, #1
 800dbb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	689b      	ldr	r3, [r3, #8]
 800dbbe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	683a      	ldr	r2, [r7, #0]
 800dbc8:	430a      	orrs	r2, r1
 800dbca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 f84f 	bl	800dc70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2220      	movs	r2, #32
 800dbde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d101      	bne.n	800dc0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc08:	2302      	movs	r3, #2
 800dc0a:	e02d      	b.n	800dc68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2224      	movs	r2, #36	; 0x24
 800dc18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f022 0201 	bic.w	r2, r2, #1
 800dc32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	689b      	ldr	r3, [r3, #8]
 800dc3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	683a      	ldr	r2, [r7, #0]
 800dc44:	430a      	orrs	r2, r1
 800dc46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 f811 	bl	800dc70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	68fa      	ldr	r2, [r7, #12]
 800dc54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2220      	movs	r2, #32
 800dc5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d108      	bne.n	800dc92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2201      	movs	r2, #1
 800dc84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dc90:	e031      	b.n	800dcf6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dc92:	2308      	movs	r3, #8
 800dc94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dc96:	2308      	movs	r3, #8
 800dc98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	689b      	ldr	r3, [r3, #8]
 800dca0:	0e5b      	lsrs	r3, r3, #25
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	f003 0307 	and.w	r3, r3, #7
 800dca8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	689b      	ldr	r3, [r3, #8]
 800dcb0:	0f5b      	lsrs	r3, r3, #29
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	f003 0307 	and.w	r3, r3, #7
 800dcb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dcba:	7bbb      	ldrb	r3, [r7, #14]
 800dcbc:	7b3a      	ldrb	r2, [r7, #12]
 800dcbe:	4911      	ldr	r1, [pc, #68]	; (800dd04 <UARTEx_SetNbDataToProcess+0x94>)
 800dcc0:	5c8a      	ldrb	r2, [r1, r2]
 800dcc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dcc6:	7b3a      	ldrb	r2, [r7, #12]
 800dcc8:	490f      	ldr	r1, [pc, #60]	; (800dd08 <UARTEx_SetNbDataToProcess+0x98>)
 800dcca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dccc:	fb93 f3f2 	sdiv	r3, r3, r2
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dcd8:	7bfb      	ldrb	r3, [r7, #15]
 800dcda:	7b7a      	ldrb	r2, [r7, #13]
 800dcdc:	4909      	ldr	r1, [pc, #36]	; (800dd04 <UARTEx_SetNbDataToProcess+0x94>)
 800dcde:	5c8a      	ldrb	r2, [r1, r2]
 800dce0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dce4:	7b7a      	ldrb	r2, [r7, #13]
 800dce6:	4908      	ldr	r1, [pc, #32]	; (800dd08 <UARTEx_SetNbDataToProcess+0x98>)
 800dce8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dcea:	fb93 f3f2 	sdiv	r3, r3, r2
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dcf6:	bf00      	nop
 800dcf8:	3714      	adds	r7, #20
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	0800e890 	.word	0x0800e890
 800dd08:	0800e898 	.word	0x0800e898

0800dd0c <__errno>:
 800dd0c:	4b01      	ldr	r3, [pc, #4]	; (800dd14 <__errno+0x8>)
 800dd0e:	6818      	ldr	r0, [r3, #0]
 800dd10:	4770      	bx	lr
 800dd12:	bf00      	nop
 800dd14:	2000000c 	.word	0x2000000c

0800dd18 <__libc_init_array>:
 800dd18:	b570      	push	{r4, r5, r6, lr}
 800dd1a:	4d0d      	ldr	r5, [pc, #52]	; (800dd50 <__libc_init_array+0x38>)
 800dd1c:	2600      	movs	r6, #0
 800dd1e:	4c0d      	ldr	r4, [pc, #52]	; (800dd54 <__libc_init_array+0x3c>)
 800dd20:	1b64      	subs	r4, r4, r5
 800dd22:	10a4      	asrs	r4, r4, #2
 800dd24:	42a6      	cmp	r6, r4
 800dd26:	d109      	bne.n	800dd3c <__libc_init_array+0x24>
 800dd28:	4d0b      	ldr	r5, [pc, #44]	; (800dd58 <__libc_init_array+0x40>)
 800dd2a:	2600      	movs	r6, #0
 800dd2c:	4c0b      	ldr	r4, [pc, #44]	; (800dd5c <__libc_init_array+0x44>)
 800dd2e:	f000 fd1b 	bl	800e768 <_init>
 800dd32:	1b64      	subs	r4, r4, r5
 800dd34:	10a4      	asrs	r4, r4, #2
 800dd36:	42a6      	cmp	r6, r4
 800dd38:	d105      	bne.n	800dd46 <__libc_init_array+0x2e>
 800dd3a:	bd70      	pop	{r4, r5, r6, pc}
 800dd3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd40:	3601      	adds	r6, #1
 800dd42:	4798      	blx	r3
 800dd44:	e7ee      	b.n	800dd24 <__libc_init_array+0xc>
 800dd46:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd4a:	3601      	adds	r6, #1
 800dd4c:	4798      	blx	r3
 800dd4e:	e7f2      	b.n	800dd36 <__libc_init_array+0x1e>
 800dd50:	0800e90c 	.word	0x0800e90c
 800dd54:	0800e90c 	.word	0x0800e90c
 800dd58:	0800e90c 	.word	0x0800e90c
 800dd5c:	0800e910 	.word	0x0800e910

0800dd60 <memset>:
 800dd60:	4402      	add	r2, r0
 800dd62:	4603      	mov	r3, r0
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d100      	bne.n	800dd6a <memset+0xa>
 800dd68:	4770      	bx	lr
 800dd6a:	f803 1b01 	strb.w	r1, [r3], #1
 800dd6e:	e7f9      	b.n	800dd64 <memset+0x4>

0800dd70 <_puts_r>:
 800dd70:	b570      	push	{r4, r5, r6, lr}
 800dd72:	460e      	mov	r6, r1
 800dd74:	4605      	mov	r5, r0
 800dd76:	b118      	cbz	r0, 800dd80 <_puts_r+0x10>
 800dd78:	6983      	ldr	r3, [r0, #24]
 800dd7a:	b90b      	cbnz	r3, 800dd80 <_puts_r+0x10>
 800dd7c:	f000 fa46 	bl	800e20c <__sinit>
 800dd80:	69ab      	ldr	r3, [r5, #24]
 800dd82:	68ac      	ldr	r4, [r5, #8]
 800dd84:	b913      	cbnz	r3, 800dd8c <_puts_r+0x1c>
 800dd86:	4628      	mov	r0, r5
 800dd88:	f000 fa40 	bl	800e20c <__sinit>
 800dd8c:	4b2c      	ldr	r3, [pc, #176]	; (800de40 <_puts_r+0xd0>)
 800dd8e:	429c      	cmp	r4, r3
 800dd90:	d120      	bne.n	800ddd4 <_puts_r+0x64>
 800dd92:	686c      	ldr	r4, [r5, #4]
 800dd94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd96:	07db      	lsls	r3, r3, #31
 800dd98:	d405      	bmi.n	800dda6 <_puts_r+0x36>
 800dd9a:	89a3      	ldrh	r3, [r4, #12]
 800dd9c:	0598      	lsls	r0, r3, #22
 800dd9e:	d402      	bmi.n	800dda6 <_puts_r+0x36>
 800dda0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dda2:	f000 fad1 	bl	800e348 <__retarget_lock_acquire_recursive>
 800dda6:	89a3      	ldrh	r3, [r4, #12]
 800dda8:	0719      	lsls	r1, r3, #28
 800ddaa:	d51d      	bpl.n	800dde8 <_puts_r+0x78>
 800ddac:	6923      	ldr	r3, [r4, #16]
 800ddae:	b1db      	cbz	r3, 800dde8 <_puts_r+0x78>
 800ddb0:	3e01      	subs	r6, #1
 800ddb2:	68a3      	ldr	r3, [r4, #8]
 800ddb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	60a3      	str	r3, [r4, #8]
 800ddbc:	bb39      	cbnz	r1, 800de0e <_puts_r+0x9e>
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	da38      	bge.n	800de34 <_puts_r+0xc4>
 800ddc2:	4622      	mov	r2, r4
 800ddc4:	210a      	movs	r1, #10
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	f000 f848 	bl	800de5c <__swbuf_r>
 800ddcc:	3001      	adds	r0, #1
 800ddce:	d011      	beq.n	800ddf4 <_puts_r+0x84>
 800ddd0:	250a      	movs	r5, #10
 800ddd2:	e011      	b.n	800ddf8 <_puts_r+0x88>
 800ddd4:	4b1b      	ldr	r3, [pc, #108]	; (800de44 <_puts_r+0xd4>)
 800ddd6:	429c      	cmp	r4, r3
 800ddd8:	d101      	bne.n	800ddde <_puts_r+0x6e>
 800ddda:	68ac      	ldr	r4, [r5, #8]
 800dddc:	e7da      	b.n	800dd94 <_puts_r+0x24>
 800ddde:	4b1a      	ldr	r3, [pc, #104]	; (800de48 <_puts_r+0xd8>)
 800dde0:	429c      	cmp	r4, r3
 800dde2:	bf08      	it	eq
 800dde4:	68ec      	ldreq	r4, [r5, #12]
 800dde6:	e7d5      	b.n	800dd94 <_puts_r+0x24>
 800dde8:	4621      	mov	r1, r4
 800ddea:	4628      	mov	r0, r5
 800ddec:	f000 f888 	bl	800df00 <__swsetup_r>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d0dd      	beq.n	800ddb0 <_puts_r+0x40>
 800ddf4:	f04f 35ff 	mov.w	r5, #4294967295
 800ddf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddfa:	07da      	lsls	r2, r3, #31
 800ddfc:	d405      	bmi.n	800de0a <_puts_r+0x9a>
 800ddfe:	89a3      	ldrh	r3, [r4, #12]
 800de00:	059b      	lsls	r3, r3, #22
 800de02:	d402      	bmi.n	800de0a <_puts_r+0x9a>
 800de04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de06:	f000 faa0 	bl	800e34a <__retarget_lock_release_recursive>
 800de0a:	4628      	mov	r0, r5
 800de0c:	bd70      	pop	{r4, r5, r6, pc}
 800de0e:	2b00      	cmp	r3, #0
 800de10:	da04      	bge.n	800de1c <_puts_r+0xac>
 800de12:	69a2      	ldr	r2, [r4, #24]
 800de14:	429a      	cmp	r2, r3
 800de16:	dc06      	bgt.n	800de26 <_puts_r+0xb6>
 800de18:	290a      	cmp	r1, #10
 800de1a:	d004      	beq.n	800de26 <_puts_r+0xb6>
 800de1c:	6823      	ldr	r3, [r4, #0]
 800de1e:	1c5a      	adds	r2, r3, #1
 800de20:	6022      	str	r2, [r4, #0]
 800de22:	7019      	strb	r1, [r3, #0]
 800de24:	e7c5      	b.n	800ddb2 <_puts_r+0x42>
 800de26:	4622      	mov	r2, r4
 800de28:	4628      	mov	r0, r5
 800de2a:	f000 f817 	bl	800de5c <__swbuf_r>
 800de2e:	3001      	adds	r0, #1
 800de30:	d1bf      	bne.n	800ddb2 <_puts_r+0x42>
 800de32:	e7df      	b.n	800ddf4 <_puts_r+0x84>
 800de34:	6823      	ldr	r3, [r4, #0]
 800de36:	250a      	movs	r5, #10
 800de38:	1c5a      	adds	r2, r3, #1
 800de3a:	6022      	str	r2, [r4, #0]
 800de3c:	701d      	strb	r5, [r3, #0]
 800de3e:	e7db      	b.n	800ddf8 <_puts_r+0x88>
 800de40:	0800e8c4 	.word	0x0800e8c4
 800de44:	0800e8e4 	.word	0x0800e8e4
 800de48:	0800e8a4 	.word	0x0800e8a4

0800de4c <puts>:
 800de4c:	4b02      	ldr	r3, [pc, #8]	; (800de58 <puts+0xc>)
 800de4e:	4601      	mov	r1, r0
 800de50:	6818      	ldr	r0, [r3, #0]
 800de52:	f7ff bf8d 	b.w	800dd70 <_puts_r>
 800de56:	bf00      	nop
 800de58:	2000000c 	.word	0x2000000c

0800de5c <__swbuf_r>:
 800de5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5e:	460e      	mov	r6, r1
 800de60:	4614      	mov	r4, r2
 800de62:	4605      	mov	r5, r0
 800de64:	b118      	cbz	r0, 800de6e <__swbuf_r+0x12>
 800de66:	6983      	ldr	r3, [r0, #24]
 800de68:	b90b      	cbnz	r3, 800de6e <__swbuf_r+0x12>
 800de6a:	f000 f9cf 	bl	800e20c <__sinit>
 800de6e:	4b21      	ldr	r3, [pc, #132]	; (800def4 <__swbuf_r+0x98>)
 800de70:	429c      	cmp	r4, r3
 800de72:	d12b      	bne.n	800decc <__swbuf_r+0x70>
 800de74:	686c      	ldr	r4, [r5, #4]
 800de76:	69a3      	ldr	r3, [r4, #24]
 800de78:	60a3      	str	r3, [r4, #8]
 800de7a:	89a3      	ldrh	r3, [r4, #12]
 800de7c:	071a      	lsls	r2, r3, #28
 800de7e:	d52f      	bpl.n	800dee0 <__swbuf_r+0x84>
 800de80:	6923      	ldr	r3, [r4, #16]
 800de82:	b36b      	cbz	r3, 800dee0 <__swbuf_r+0x84>
 800de84:	6923      	ldr	r3, [r4, #16]
 800de86:	b2f6      	uxtb	r6, r6
 800de88:	6820      	ldr	r0, [r4, #0]
 800de8a:	4637      	mov	r7, r6
 800de8c:	1ac0      	subs	r0, r0, r3
 800de8e:	6963      	ldr	r3, [r4, #20]
 800de90:	4283      	cmp	r3, r0
 800de92:	dc04      	bgt.n	800de9e <__swbuf_r+0x42>
 800de94:	4621      	mov	r1, r4
 800de96:	4628      	mov	r0, r5
 800de98:	f000 f924 	bl	800e0e4 <_fflush_r>
 800de9c:	bb30      	cbnz	r0, 800deec <__swbuf_r+0x90>
 800de9e:	68a3      	ldr	r3, [r4, #8]
 800dea0:	3001      	adds	r0, #1
 800dea2:	3b01      	subs	r3, #1
 800dea4:	60a3      	str	r3, [r4, #8]
 800dea6:	6823      	ldr	r3, [r4, #0]
 800dea8:	1c5a      	adds	r2, r3, #1
 800deaa:	6022      	str	r2, [r4, #0]
 800deac:	701e      	strb	r6, [r3, #0]
 800deae:	6963      	ldr	r3, [r4, #20]
 800deb0:	4283      	cmp	r3, r0
 800deb2:	d004      	beq.n	800debe <__swbuf_r+0x62>
 800deb4:	89a3      	ldrh	r3, [r4, #12]
 800deb6:	07db      	lsls	r3, r3, #31
 800deb8:	d506      	bpl.n	800dec8 <__swbuf_r+0x6c>
 800deba:	2e0a      	cmp	r6, #10
 800debc:	d104      	bne.n	800dec8 <__swbuf_r+0x6c>
 800debe:	4621      	mov	r1, r4
 800dec0:	4628      	mov	r0, r5
 800dec2:	f000 f90f 	bl	800e0e4 <_fflush_r>
 800dec6:	b988      	cbnz	r0, 800deec <__swbuf_r+0x90>
 800dec8:	4638      	mov	r0, r7
 800deca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800decc:	4b0a      	ldr	r3, [pc, #40]	; (800def8 <__swbuf_r+0x9c>)
 800dece:	429c      	cmp	r4, r3
 800ded0:	d101      	bne.n	800ded6 <__swbuf_r+0x7a>
 800ded2:	68ac      	ldr	r4, [r5, #8]
 800ded4:	e7cf      	b.n	800de76 <__swbuf_r+0x1a>
 800ded6:	4b09      	ldr	r3, [pc, #36]	; (800defc <__swbuf_r+0xa0>)
 800ded8:	429c      	cmp	r4, r3
 800deda:	bf08      	it	eq
 800dedc:	68ec      	ldreq	r4, [r5, #12]
 800dede:	e7ca      	b.n	800de76 <__swbuf_r+0x1a>
 800dee0:	4621      	mov	r1, r4
 800dee2:	4628      	mov	r0, r5
 800dee4:	f000 f80c 	bl	800df00 <__swsetup_r>
 800dee8:	2800      	cmp	r0, #0
 800deea:	d0cb      	beq.n	800de84 <__swbuf_r+0x28>
 800deec:	f04f 37ff 	mov.w	r7, #4294967295
 800def0:	e7ea      	b.n	800dec8 <__swbuf_r+0x6c>
 800def2:	bf00      	nop
 800def4:	0800e8c4 	.word	0x0800e8c4
 800def8:	0800e8e4 	.word	0x0800e8e4
 800defc:	0800e8a4 	.word	0x0800e8a4

0800df00 <__swsetup_r>:
 800df00:	4b32      	ldr	r3, [pc, #200]	; (800dfcc <__swsetup_r+0xcc>)
 800df02:	b570      	push	{r4, r5, r6, lr}
 800df04:	681d      	ldr	r5, [r3, #0]
 800df06:	4606      	mov	r6, r0
 800df08:	460c      	mov	r4, r1
 800df0a:	b125      	cbz	r5, 800df16 <__swsetup_r+0x16>
 800df0c:	69ab      	ldr	r3, [r5, #24]
 800df0e:	b913      	cbnz	r3, 800df16 <__swsetup_r+0x16>
 800df10:	4628      	mov	r0, r5
 800df12:	f000 f97b 	bl	800e20c <__sinit>
 800df16:	4b2e      	ldr	r3, [pc, #184]	; (800dfd0 <__swsetup_r+0xd0>)
 800df18:	429c      	cmp	r4, r3
 800df1a:	d10f      	bne.n	800df3c <__swsetup_r+0x3c>
 800df1c:	686c      	ldr	r4, [r5, #4]
 800df1e:	89a3      	ldrh	r3, [r4, #12]
 800df20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df24:	0719      	lsls	r1, r3, #28
 800df26:	d42c      	bmi.n	800df82 <__swsetup_r+0x82>
 800df28:	06dd      	lsls	r5, r3, #27
 800df2a:	d411      	bmi.n	800df50 <__swsetup_r+0x50>
 800df2c:	2309      	movs	r3, #9
 800df2e:	6033      	str	r3, [r6, #0]
 800df30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df34:	f04f 30ff 	mov.w	r0, #4294967295
 800df38:	81a3      	strh	r3, [r4, #12]
 800df3a:	e03e      	b.n	800dfba <__swsetup_r+0xba>
 800df3c:	4b25      	ldr	r3, [pc, #148]	; (800dfd4 <__swsetup_r+0xd4>)
 800df3e:	429c      	cmp	r4, r3
 800df40:	d101      	bne.n	800df46 <__swsetup_r+0x46>
 800df42:	68ac      	ldr	r4, [r5, #8]
 800df44:	e7eb      	b.n	800df1e <__swsetup_r+0x1e>
 800df46:	4b24      	ldr	r3, [pc, #144]	; (800dfd8 <__swsetup_r+0xd8>)
 800df48:	429c      	cmp	r4, r3
 800df4a:	bf08      	it	eq
 800df4c:	68ec      	ldreq	r4, [r5, #12]
 800df4e:	e7e6      	b.n	800df1e <__swsetup_r+0x1e>
 800df50:	0758      	lsls	r0, r3, #29
 800df52:	d512      	bpl.n	800df7a <__swsetup_r+0x7a>
 800df54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df56:	b141      	cbz	r1, 800df6a <__swsetup_r+0x6a>
 800df58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df5c:	4299      	cmp	r1, r3
 800df5e:	d002      	beq.n	800df66 <__swsetup_r+0x66>
 800df60:	4630      	mov	r0, r6
 800df62:	f000 fa59 	bl	800e418 <_free_r>
 800df66:	2300      	movs	r3, #0
 800df68:	6363      	str	r3, [r4, #52]	; 0x34
 800df6a:	89a3      	ldrh	r3, [r4, #12]
 800df6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df70:	81a3      	strh	r3, [r4, #12]
 800df72:	2300      	movs	r3, #0
 800df74:	6063      	str	r3, [r4, #4]
 800df76:	6923      	ldr	r3, [r4, #16]
 800df78:	6023      	str	r3, [r4, #0]
 800df7a:	89a3      	ldrh	r3, [r4, #12]
 800df7c:	f043 0308 	orr.w	r3, r3, #8
 800df80:	81a3      	strh	r3, [r4, #12]
 800df82:	6923      	ldr	r3, [r4, #16]
 800df84:	b94b      	cbnz	r3, 800df9a <__swsetup_r+0x9a>
 800df86:	89a3      	ldrh	r3, [r4, #12]
 800df88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df90:	d003      	beq.n	800df9a <__swsetup_r+0x9a>
 800df92:	4621      	mov	r1, r4
 800df94:	4630      	mov	r0, r6
 800df96:	f000 f9ff 	bl	800e398 <__smakebuf_r>
 800df9a:	89a0      	ldrh	r0, [r4, #12]
 800df9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfa0:	f010 0301 	ands.w	r3, r0, #1
 800dfa4:	d00a      	beq.n	800dfbc <__swsetup_r+0xbc>
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	60a3      	str	r3, [r4, #8]
 800dfaa:	6963      	ldr	r3, [r4, #20]
 800dfac:	425b      	negs	r3, r3
 800dfae:	61a3      	str	r3, [r4, #24]
 800dfb0:	6923      	ldr	r3, [r4, #16]
 800dfb2:	b943      	cbnz	r3, 800dfc6 <__swsetup_r+0xc6>
 800dfb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dfb8:	d1ba      	bne.n	800df30 <__swsetup_r+0x30>
 800dfba:	bd70      	pop	{r4, r5, r6, pc}
 800dfbc:	0781      	lsls	r1, r0, #30
 800dfbe:	bf58      	it	pl
 800dfc0:	6963      	ldrpl	r3, [r4, #20]
 800dfc2:	60a3      	str	r3, [r4, #8]
 800dfc4:	e7f4      	b.n	800dfb0 <__swsetup_r+0xb0>
 800dfc6:	2000      	movs	r0, #0
 800dfc8:	e7f7      	b.n	800dfba <__swsetup_r+0xba>
 800dfca:	bf00      	nop
 800dfcc:	2000000c 	.word	0x2000000c
 800dfd0:	0800e8c4 	.word	0x0800e8c4
 800dfd4:	0800e8e4 	.word	0x0800e8e4
 800dfd8:	0800e8a4 	.word	0x0800e8a4

0800dfdc <__sflush_r>:
 800dfdc:	898a      	ldrh	r2, [r1, #12]
 800dfde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe2:	4605      	mov	r5, r0
 800dfe4:	0710      	lsls	r0, r2, #28
 800dfe6:	460c      	mov	r4, r1
 800dfe8:	d458      	bmi.n	800e09c <__sflush_r+0xc0>
 800dfea:	684b      	ldr	r3, [r1, #4]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	dc05      	bgt.n	800dffc <__sflush_r+0x20>
 800dff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	dc02      	bgt.n	800dffc <__sflush_r+0x20>
 800dff6:	2000      	movs	r0, #0
 800dff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dffe:	2e00      	cmp	r6, #0
 800e000:	d0f9      	beq.n	800dff6 <__sflush_r+0x1a>
 800e002:	2300      	movs	r3, #0
 800e004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e008:	682f      	ldr	r7, [r5, #0]
 800e00a:	602b      	str	r3, [r5, #0]
 800e00c:	d032      	beq.n	800e074 <__sflush_r+0x98>
 800e00e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e010:	89a3      	ldrh	r3, [r4, #12]
 800e012:	075a      	lsls	r2, r3, #29
 800e014:	d505      	bpl.n	800e022 <__sflush_r+0x46>
 800e016:	6863      	ldr	r3, [r4, #4]
 800e018:	1ac0      	subs	r0, r0, r3
 800e01a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e01c:	b10b      	cbz	r3, 800e022 <__sflush_r+0x46>
 800e01e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e020:	1ac0      	subs	r0, r0, r3
 800e022:	2300      	movs	r3, #0
 800e024:	4602      	mov	r2, r0
 800e026:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e028:	4628      	mov	r0, r5
 800e02a:	6a21      	ldr	r1, [r4, #32]
 800e02c:	47b0      	blx	r6
 800e02e:	1c43      	adds	r3, r0, #1
 800e030:	89a3      	ldrh	r3, [r4, #12]
 800e032:	d106      	bne.n	800e042 <__sflush_r+0x66>
 800e034:	6829      	ldr	r1, [r5, #0]
 800e036:	291d      	cmp	r1, #29
 800e038:	d82c      	bhi.n	800e094 <__sflush_r+0xb8>
 800e03a:	4a29      	ldr	r2, [pc, #164]	; (800e0e0 <__sflush_r+0x104>)
 800e03c:	40ca      	lsrs	r2, r1
 800e03e:	07d6      	lsls	r6, r2, #31
 800e040:	d528      	bpl.n	800e094 <__sflush_r+0xb8>
 800e042:	2200      	movs	r2, #0
 800e044:	04d9      	lsls	r1, r3, #19
 800e046:	6062      	str	r2, [r4, #4]
 800e048:	6922      	ldr	r2, [r4, #16]
 800e04a:	6022      	str	r2, [r4, #0]
 800e04c:	d504      	bpl.n	800e058 <__sflush_r+0x7c>
 800e04e:	1c42      	adds	r2, r0, #1
 800e050:	d101      	bne.n	800e056 <__sflush_r+0x7a>
 800e052:	682b      	ldr	r3, [r5, #0]
 800e054:	b903      	cbnz	r3, 800e058 <__sflush_r+0x7c>
 800e056:	6560      	str	r0, [r4, #84]	; 0x54
 800e058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e05a:	602f      	str	r7, [r5, #0]
 800e05c:	2900      	cmp	r1, #0
 800e05e:	d0ca      	beq.n	800dff6 <__sflush_r+0x1a>
 800e060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e064:	4299      	cmp	r1, r3
 800e066:	d002      	beq.n	800e06e <__sflush_r+0x92>
 800e068:	4628      	mov	r0, r5
 800e06a:	f000 f9d5 	bl	800e418 <_free_r>
 800e06e:	2000      	movs	r0, #0
 800e070:	6360      	str	r0, [r4, #52]	; 0x34
 800e072:	e7c1      	b.n	800dff8 <__sflush_r+0x1c>
 800e074:	6a21      	ldr	r1, [r4, #32]
 800e076:	2301      	movs	r3, #1
 800e078:	4628      	mov	r0, r5
 800e07a:	47b0      	blx	r6
 800e07c:	1c41      	adds	r1, r0, #1
 800e07e:	d1c7      	bne.n	800e010 <__sflush_r+0x34>
 800e080:	682b      	ldr	r3, [r5, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d0c4      	beq.n	800e010 <__sflush_r+0x34>
 800e086:	2b1d      	cmp	r3, #29
 800e088:	d001      	beq.n	800e08e <__sflush_r+0xb2>
 800e08a:	2b16      	cmp	r3, #22
 800e08c:	d101      	bne.n	800e092 <__sflush_r+0xb6>
 800e08e:	602f      	str	r7, [r5, #0]
 800e090:	e7b1      	b.n	800dff6 <__sflush_r+0x1a>
 800e092:	89a3      	ldrh	r3, [r4, #12]
 800e094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e098:	81a3      	strh	r3, [r4, #12]
 800e09a:	e7ad      	b.n	800dff8 <__sflush_r+0x1c>
 800e09c:	690f      	ldr	r7, [r1, #16]
 800e09e:	2f00      	cmp	r7, #0
 800e0a0:	d0a9      	beq.n	800dff6 <__sflush_r+0x1a>
 800e0a2:	0793      	lsls	r3, r2, #30
 800e0a4:	680e      	ldr	r6, [r1, #0]
 800e0a6:	600f      	str	r7, [r1, #0]
 800e0a8:	bf0c      	ite	eq
 800e0aa:	694b      	ldreq	r3, [r1, #20]
 800e0ac:	2300      	movne	r3, #0
 800e0ae:	eba6 0807 	sub.w	r8, r6, r7
 800e0b2:	608b      	str	r3, [r1, #8]
 800e0b4:	f1b8 0f00 	cmp.w	r8, #0
 800e0b8:	dd9d      	ble.n	800dff6 <__sflush_r+0x1a>
 800e0ba:	4643      	mov	r3, r8
 800e0bc:	463a      	mov	r2, r7
 800e0be:	6a21      	ldr	r1, [r4, #32]
 800e0c0:	4628      	mov	r0, r5
 800e0c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0c4:	47b0      	blx	r6
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	dc06      	bgt.n	800e0d8 <__sflush_r+0xfc>
 800e0ca:	89a3      	ldrh	r3, [r4, #12]
 800e0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0d4:	81a3      	strh	r3, [r4, #12]
 800e0d6:	e78f      	b.n	800dff8 <__sflush_r+0x1c>
 800e0d8:	4407      	add	r7, r0
 800e0da:	eba8 0800 	sub.w	r8, r8, r0
 800e0de:	e7e9      	b.n	800e0b4 <__sflush_r+0xd8>
 800e0e0:	20400001 	.word	0x20400001

0800e0e4 <_fflush_r>:
 800e0e4:	b538      	push	{r3, r4, r5, lr}
 800e0e6:	690b      	ldr	r3, [r1, #16]
 800e0e8:	4605      	mov	r5, r0
 800e0ea:	460c      	mov	r4, r1
 800e0ec:	b913      	cbnz	r3, 800e0f4 <_fflush_r+0x10>
 800e0ee:	2500      	movs	r5, #0
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	bd38      	pop	{r3, r4, r5, pc}
 800e0f4:	b118      	cbz	r0, 800e0fe <_fflush_r+0x1a>
 800e0f6:	6983      	ldr	r3, [r0, #24]
 800e0f8:	b90b      	cbnz	r3, 800e0fe <_fflush_r+0x1a>
 800e0fa:	f000 f887 	bl	800e20c <__sinit>
 800e0fe:	4b14      	ldr	r3, [pc, #80]	; (800e150 <_fflush_r+0x6c>)
 800e100:	429c      	cmp	r4, r3
 800e102:	d11b      	bne.n	800e13c <_fflush_r+0x58>
 800e104:	686c      	ldr	r4, [r5, #4]
 800e106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d0ef      	beq.n	800e0ee <_fflush_r+0xa>
 800e10e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e110:	07d0      	lsls	r0, r2, #31
 800e112:	d404      	bmi.n	800e11e <_fflush_r+0x3a>
 800e114:	0599      	lsls	r1, r3, #22
 800e116:	d402      	bmi.n	800e11e <_fflush_r+0x3a>
 800e118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e11a:	f000 f915 	bl	800e348 <__retarget_lock_acquire_recursive>
 800e11e:	4628      	mov	r0, r5
 800e120:	4621      	mov	r1, r4
 800e122:	f7ff ff5b 	bl	800dfdc <__sflush_r>
 800e126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e128:	4605      	mov	r5, r0
 800e12a:	07da      	lsls	r2, r3, #31
 800e12c:	d4e0      	bmi.n	800e0f0 <_fflush_r+0xc>
 800e12e:	89a3      	ldrh	r3, [r4, #12]
 800e130:	059b      	lsls	r3, r3, #22
 800e132:	d4dd      	bmi.n	800e0f0 <_fflush_r+0xc>
 800e134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e136:	f000 f908 	bl	800e34a <__retarget_lock_release_recursive>
 800e13a:	e7d9      	b.n	800e0f0 <_fflush_r+0xc>
 800e13c:	4b05      	ldr	r3, [pc, #20]	; (800e154 <_fflush_r+0x70>)
 800e13e:	429c      	cmp	r4, r3
 800e140:	d101      	bne.n	800e146 <_fflush_r+0x62>
 800e142:	68ac      	ldr	r4, [r5, #8]
 800e144:	e7df      	b.n	800e106 <_fflush_r+0x22>
 800e146:	4b04      	ldr	r3, [pc, #16]	; (800e158 <_fflush_r+0x74>)
 800e148:	429c      	cmp	r4, r3
 800e14a:	bf08      	it	eq
 800e14c:	68ec      	ldreq	r4, [r5, #12]
 800e14e:	e7da      	b.n	800e106 <_fflush_r+0x22>
 800e150:	0800e8c4 	.word	0x0800e8c4
 800e154:	0800e8e4 	.word	0x0800e8e4
 800e158:	0800e8a4 	.word	0x0800e8a4

0800e15c <std>:
 800e15c:	2300      	movs	r3, #0
 800e15e:	b510      	push	{r4, lr}
 800e160:	4604      	mov	r4, r0
 800e162:	6083      	str	r3, [r0, #8]
 800e164:	8181      	strh	r1, [r0, #12]
 800e166:	4619      	mov	r1, r3
 800e168:	6643      	str	r3, [r0, #100]	; 0x64
 800e16a:	81c2      	strh	r2, [r0, #14]
 800e16c:	2208      	movs	r2, #8
 800e16e:	6183      	str	r3, [r0, #24]
 800e170:	e9c0 3300 	strd	r3, r3, [r0]
 800e174:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e178:	305c      	adds	r0, #92	; 0x5c
 800e17a:	f7ff fdf1 	bl	800dd60 <memset>
 800e17e:	4b05      	ldr	r3, [pc, #20]	; (800e194 <std+0x38>)
 800e180:	6224      	str	r4, [r4, #32]
 800e182:	6263      	str	r3, [r4, #36]	; 0x24
 800e184:	4b04      	ldr	r3, [pc, #16]	; (800e198 <std+0x3c>)
 800e186:	62a3      	str	r3, [r4, #40]	; 0x28
 800e188:	4b04      	ldr	r3, [pc, #16]	; (800e19c <std+0x40>)
 800e18a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e18c:	4b04      	ldr	r3, [pc, #16]	; (800e1a0 <std+0x44>)
 800e18e:	6323      	str	r3, [r4, #48]	; 0x30
 800e190:	bd10      	pop	{r4, pc}
 800e192:	bf00      	nop
 800e194:	0800e5f9 	.word	0x0800e5f9
 800e198:	0800e61b 	.word	0x0800e61b
 800e19c:	0800e653 	.word	0x0800e653
 800e1a0:	0800e677 	.word	0x0800e677

0800e1a4 <_cleanup_r>:
 800e1a4:	4901      	ldr	r1, [pc, #4]	; (800e1ac <_cleanup_r+0x8>)
 800e1a6:	f000 b8af 	b.w	800e308 <_fwalk_reent>
 800e1aa:	bf00      	nop
 800e1ac:	0800e0e5 	.word	0x0800e0e5

0800e1b0 <__sfmoreglue>:
 800e1b0:	b570      	push	{r4, r5, r6, lr}
 800e1b2:	2268      	movs	r2, #104	; 0x68
 800e1b4:	1e4d      	subs	r5, r1, #1
 800e1b6:	460e      	mov	r6, r1
 800e1b8:	4355      	muls	r5, r2
 800e1ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e1be:	f000 f997 	bl	800e4f0 <_malloc_r>
 800e1c2:	4604      	mov	r4, r0
 800e1c4:	b140      	cbz	r0, 800e1d8 <__sfmoreglue+0x28>
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e1cc:	e9c0 1600 	strd	r1, r6, [r0]
 800e1d0:	300c      	adds	r0, #12
 800e1d2:	60a0      	str	r0, [r4, #8]
 800e1d4:	f7ff fdc4 	bl	800dd60 <memset>
 800e1d8:	4620      	mov	r0, r4
 800e1da:	bd70      	pop	{r4, r5, r6, pc}

0800e1dc <__sfp_lock_acquire>:
 800e1dc:	4801      	ldr	r0, [pc, #4]	; (800e1e4 <__sfp_lock_acquire+0x8>)
 800e1de:	f000 b8b3 	b.w	800e348 <__retarget_lock_acquire_recursive>
 800e1e2:	bf00      	nop
 800e1e4:	20000129 	.word	0x20000129

0800e1e8 <__sfp_lock_release>:
 800e1e8:	4801      	ldr	r0, [pc, #4]	; (800e1f0 <__sfp_lock_release+0x8>)
 800e1ea:	f000 b8ae 	b.w	800e34a <__retarget_lock_release_recursive>
 800e1ee:	bf00      	nop
 800e1f0:	20000129 	.word	0x20000129

0800e1f4 <__sinit_lock_acquire>:
 800e1f4:	4801      	ldr	r0, [pc, #4]	; (800e1fc <__sinit_lock_acquire+0x8>)
 800e1f6:	f000 b8a7 	b.w	800e348 <__retarget_lock_acquire_recursive>
 800e1fa:	bf00      	nop
 800e1fc:	2000012a 	.word	0x2000012a

0800e200 <__sinit_lock_release>:
 800e200:	4801      	ldr	r0, [pc, #4]	; (800e208 <__sinit_lock_release+0x8>)
 800e202:	f000 b8a2 	b.w	800e34a <__retarget_lock_release_recursive>
 800e206:	bf00      	nop
 800e208:	2000012a 	.word	0x2000012a

0800e20c <__sinit>:
 800e20c:	b510      	push	{r4, lr}
 800e20e:	4604      	mov	r4, r0
 800e210:	f7ff fff0 	bl	800e1f4 <__sinit_lock_acquire>
 800e214:	69a3      	ldr	r3, [r4, #24]
 800e216:	b11b      	cbz	r3, 800e220 <__sinit+0x14>
 800e218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e21c:	f7ff bff0 	b.w	800e200 <__sinit_lock_release>
 800e220:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e224:	6523      	str	r3, [r4, #80]	; 0x50
 800e226:	4620      	mov	r0, r4
 800e228:	4b12      	ldr	r3, [pc, #72]	; (800e274 <__sinit+0x68>)
 800e22a:	4a13      	ldr	r2, [pc, #76]	; (800e278 <__sinit+0x6c>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	62a2      	str	r2, [r4, #40]	; 0x28
 800e230:	42a3      	cmp	r3, r4
 800e232:	bf04      	itt	eq
 800e234:	2301      	moveq	r3, #1
 800e236:	61a3      	streq	r3, [r4, #24]
 800e238:	f000 f820 	bl	800e27c <__sfp>
 800e23c:	6060      	str	r0, [r4, #4]
 800e23e:	4620      	mov	r0, r4
 800e240:	f000 f81c 	bl	800e27c <__sfp>
 800e244:	60a0      	str	r0, [r4, #8]
 800e246:	4620      	mov	r0, r4
 800e248:	f000 f818 	bl	800e27c <__sfp>
 800e24c:	2200      	movs	r2, #0
 800e24e:	2104      	movs	r1, #4
 800e250:	60e0      	str	r0, [r4, #12]
 800e252:	6860      	ldr	r0, [r4, #4]
 800e254:	f7ff ff82 	bl	800e15c <std>
 800e258:	2201      	movs	r2, #1
 800e25a:	2109      	movs	r1, #9
 800e25c:	68a0      	ldr	r0, [r4, #8]
 800e25e:	f7ff ff7d 	bl	800e15c <std>
 800e262:	2202      	movs	r2, #2
 800e264:	2112      	movs	r1, #18
 800e266:	68e0      	ldr	r0, [r4, #12]
 800e268:	f7ff ff78 	bl	800e15c <std>
 800e26c:	2301      	movs	r3, #1
 800e26e:	61a3      	str	r3, [r4, #24]
 800e270:	e7d2      	b.n	800e218 <__sinit+0xc>
 800e272:	bf00      	nop
 800e274:	0800e8a0 	.word	0x0800e8a0
 800e278:	0800e1a5 	.word	0x0800e1a5

0800e27c <__sfp>:
 800e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27e:	4607      	mov	r7, r0
 800e280:	f7ff ffac 	bl	800e1dc <__sfp_lock_acquire>
 800e284:	4b1e      	ldr	r3, [pc, #120]	; (800e300 <__sfp+0x84>)
 800e286:	681e      	ldr	r6, [r3, #0]
 800e288:	69b3      	ldr	r3, [r6, #24]
 800e28a:	b913      	cbnz	r3, 800e292 <__sfp+0x16>
 800e28c:	4630      	mov	r0, r6
 800e28e:	f7ff ffbd 	bl	800e20c <__sinit>
 800e292:	3648      	adds	r6, #72	; 0x48
 800e294:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e298:	3b01      	subs	r3, #1
 800e29a:	d503      	bpl.n	800e2a4 <__sfp+0x28>
 800e29c:	6833      	ldr	r3, [r6, #0]
 800e29e:	b30b      	cbz	r3, 800e2e4 <__sfp+0x68>
 800e2a0:	6836      	ldr	r6, [r6, #0]
 800e2a2:	e7f7      	b.n	800e294 <__sfp+0x18>
 800e2a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e2a8:	b9d5      	cbnz	r5, 800e2e0 <__sfp+0x64>
 800e2aa:	4b16      	ldr	r3, [pc, #88]	; (800e304 <__sfp+0x88>)
 800e2ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2b0:	6665      	str	r5, [r4, #100]	; 0x64
 800e2b2:	60e3      	str	r3, [r4, #12]
 800e2b4:	f000 f847 	bl	800e346 <__retarget_lock_init_recursive>
 800e2b8:	f7ff ff96 	bl	800e1e8 <__sfp_lock_release>
 800e2bc:	2208      	movs	r2, #8
 800e2be:	4629      	mov	r1, r5
 800e2c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e2c4:	6025      	str	r5, [r4, #0]
 800e2c6:	61a5      	str	r5, [r4, #24]
 800e2c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e2cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e2d0:	f7ff fd46 	bl	800dd60 <memset>
 800e2d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e2d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e2dc:	4620      	mov	r0, r4
 800e2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2e0:	3468      	adds	r4, #104	; 0x68
 800e2e2:	e7d9      	b.n	800e298 <__sfp+0x1c>
 800e2e4:	2104      	movs	r1, #4
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	f7ff ff62 	bl	800e1b0 <__sfmoreglue>
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	6030      	str	r0, [r6, #0]
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	d1d5      	bne.n	800e2a0 <__sfp+0x24>
 800e2f4:	f7ff ff78 	bl	800e1e8 <__sfp_lock_release>
 800e2f8:	230c      	movs	r3, #12
 800e2fa:	603b      	str	r3, [r7, #0]
 800e2fc:	e7ee      	b.n	800e2dc <__sfp+0x60>
 800e2fe:	bf00      	nop
 800e300:	0800e8a0 	.word	0x0800e8a0
 800e304:	ffff0001 	.word	0xffff0001

0800e308 <_fwalk_reent>:
 800e308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e30c:	4606      	mov	r6, r0
 800e30e:	4688      	mov	r8, r1
 800e310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e314:	2700      	movs	r7, #0
 800e316:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e31a:	f1b9 0901 	subs.w	r9, r9, #1
 800e31e:	d505      	bpl.n	800e32c <_fwalk_reent+0x24>
 800e320:	6824      	ldr	r4, [r4, #0]
 800e322:	2c00      	cmp	r4, #0
 800e324:	d1f7      	bne.n	800e316 <_fwalk_reent+0xe>
 800e326:	4638      	mov	r0, r7
 800e328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e32c:	89ab      	ldrh	r3, [r5, #12]
 800e32e:	2b01      	cmp	r3, #1
 800e330:	d907      	bls.n	800e342 <_fwalk_reent+0x3a>
 800e332:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e336:	3301      	adds	r3, #1
 800e338:	d003      	beq.n	800e342 <_fwalk_reent+0x3a>
 800e33a:	4629      	mov	r1, r5
 800e33c:	4630      	mov	r0, r6
 800e33e:	47c0      	blx	r8
 800e340:	4307      	orrs	r7, r0
 800e342:	3568      	adds	r5, #104	; 0x68
 800e344:	e7e9      	b.n	800e31a <_fwalk_reent+0x12>

0800e346 <__retarget_lock_init_recursive>:
 800e346:	4770      	bx	lr

0800e348 <__retarget_lock_acquire_recursive>:
 800e348:	4770      	bx	lr

0800e34a <__retarget_lock_release_recursive>:
 800e34a:	4770      	bx	lr

0800e34c <__swhatbuf_r>:
 800e34c:	b570      	push	{r4, r5, r6, lr}
 800e34e:	460e      	mov	r6, r1
 800e350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e354:	b096      	sub	sp, #88	; 0x58
 800e356:	4614      	mov	r4, r2
 800e358:	2900      	cmp	r1, #0
 800e35a:	461d      	mov	r5, r3
 800e35c:	da08      	bge.n	800e370 <__swhatbuf_r+0x24>
 800e35e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e362:	2200      	movs	r2, #0
 800e364:	602a      	str	r2, [r5, #0]
 800e366:	061a      	lsls	r2, r3, #24
 800e368:	d410      	bmi.n	800e38c <__swhatbuf_r+0x40>
 800e36a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e36e:	e00e      	b.n	800e38e <__swhatbuf_r+0x42>
 800e370:	466a      	mov	r2, sp
 800e372:	f000 f9a7 	bl	800e6c4 <_fstat_r>
 800e376:	2800      	cmp	r0, #0
 800e378:	dbf1      	blt.n	800e35e <__swhatbuf_r+0x12>
 800e37a:	9a01      	ldr	r2, [sp, #4]
 800e37c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e380:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e384:	425a      	negs	r2, r3
 800e386:	415a      	adcs	r2, r3
 800e388:	602a      	str	r2, [r5, #0]
 800e38a:	e7ee      	b.n	800e36a <__swhatbuf_r+0x1e>
 800e38c:	2340      	movs	r3, #64	; 0x40
 800e38e:	2000      	movs	r0, #0
 800e390:	6023      	str	r3, [r4, #0]
 800e392:	b016      	add	sp, #88	; 0x58
 800e394:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e398 <__smakebuf_r>:
 800e398:	898b      	ldrh	r3, [r1, #12]
 800e39a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e39c:	079d      	lsls	r5, r3, #30
 800e39e:	4606      	mov	r6, r0
 800e3a0:	460c      	mov	r4, r1
 800e3a2:	d507      	bpl.n	800e3b4 <__smakebuf_r+0x1c>
 800e3a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3a8:	6023      	str	r3, [r4, #0]
 800e3aa:	6123      	str	r3, [r4, #16]
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	6163      	str	r3, [r4, #20]
 800e3b0:	b002      	add	sp, #8
 800e3b2:	bd70      	pop	{r4, r5, r6, pc}
 800e3b4:	ab01      	add	r3, sp, #4
 800e3b6:	466a      	mov	r2, sp
 800e3b8:	f7ff ffc8 	bl	800e34c <__swhatbuf_r>
 800e3bc:	9900      	ldr	r1, [sp, #0]
 800e3be:	4605      	mov	r5, r0
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	f000 f895 	bl	800e4f0 <_malloc_r>
 800e3c6:	b948      	cbnz	r0, 800e3dc <__smakebuf_r+0x44>
 800e3c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3cc:	059a      	lsls	r2, r3, #22
 800e3ce:	d4ef      	bmi.n	800e3b0 <__smakebuf_r+0x18>
 800e3d0:	f023 0303 	bic.w	r3, r3, #3
 800e3d4:	f043 0302 	orr.w	r3, r3, #2
 800e3d8:	81a3      	strh	r3, [r4, #12]
 800e3da:	e7e3      	b.n	800e3a4 <__smakebuf_r+0xc>
 800e3dc:	4b0d      	ldr	r3, [pc, #52]	; (800e414 <__smakebuf_r+0x7c>)
 800e3de:	62b3      	str	r3, [r6, #40]	; 0x28
 800e3e0:	89a3      	ldrh	r3, [r4, #12]
 800e3e2:	6020      	str	r0, [r4, #0]
 800e3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3e8:	6120      	str	r0, [r4, #16]
 800e3ea:	81a3      	strh	r3, [r4, #12]
 800e3ec:	9b00      	ldr	r3, [sp, #0]
 800e3ee:	6163      	str	r3, [r4, #20]
 800e3f0:	9b01      	ldr	r3, [sp, #4]
 800e3f2:	b15b      	cbz	r3, 800e40c <__smakebuf_r+0x74>
 800e3f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	f000 f975 	bl	800e6e8 <_isatty_r>
 800e3fe:	b128      	cbz	r0, 800e40c <__smakebuf_r+0x74>
 800e400:	89a3      	ldrh	r3, [r4, #12]
 800e402:	f023 0303 	bic.w	r3, r3, #3
 800e406:	f043 0301 	orr.w	r3, r3, #1
 800e40a:	81a3      	strh	r3, [r4, #12]
 800e40c:	89a0      	ldrh	r0, [r4, #12]
 800e40e:	4305      	orrs	r5, r0
 800e410:	81a5      	strh	r5, [r4, #12]
 800e412:	e7cd      	b.n	800e3b0 <__smakebuf_r+0x18>
 800e414:	0800e1a5 	.word	0x0800e1a5

0800e418 <_free_r>:
 800e418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e41a:	2900      	cmp	r1, #0
 800e41c:	d043      	beq.n	800e4a6 <_free_r+0x8e>
 800e41e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e422:	1f0c      	subs	r4, r1, #4
 800e424:	9001      	str	r0, [sp, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	bfb8      	it	lt
 800e42a:	18e4      	addlt	r4, r4, r3
 800e42c:	f000 f97e 	bl	800e72c <__malloc_lock>
 800e430:	4a1e      	ldr	r2, [pc, #120]	; (800e4ac <_free_r+0x94>)
 800e432:	9801      	ldr	r0, [sp, #4]
 800e434:	6813      	ldr	r3, [r2, #0]
 800e436:	b933      	cbnz	r3, 800e446 <_free_r+0x2e>
 800e438:	6063      	str	r3, [r4, #4]
 800e43a:	6014      	str	r4, [r2, #0]
 800e43c:	b003      	add	sp, #12
 800e43e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e442:	f000 b979 	b.w	800e738 <__malloc_unlock>
 800e446:	42a3      	cmp	r3, r4
 800e448:	d908      	bls.n	800e45c <_free_r+0x44>
 800e44a:	6825      	ldr	r5, [r4, #0]
 800e44c:	1961      	adds	r1, r4, r5
 800e44e:	428b      	cmp	r3, r1
 800e450:	bf01      	itttt	eq
 800e452:	6819      	ldreq	r1, [r3, #0]
 800e454:	685b      	ldreq	r3, [r3, #4]
 800e456:	1949      	addeq	r1, r1, r5
 800e458:	6021      	streq	r1, [r4, #0]
 800e45a:	e7ed      	b.n	800e438 <_free_r+0x20>
 800e45c:	461a      	mov	r2, r3
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	b10b      	cbz	r3, 800e466 <_free_r+0x4e>
 800e462:	42a3      	cmp	r3, r4
 800e464:	d9fa      	bls.n	800e45c <_free_r+0x44>
 800e466:	6811      	ldr	r1, [r2, #0]
 800e468:	1855      	adds	r5, r2, r1
 800e46a:	42a5      	cmp	r5, r4
 800e46c:	d10b      	bne.n	800e486 <_free_r+0x6e>
 800e46e:	6824      	ldr	r4, [r4, #0]
 800e470:	4421      	add	r1, r4
 800e472:	1854      	adds	r4, r2, r1
 800e474:	6011      	str	r1, [r2, #0]
 800e476:	42a3      	cmp	r3, r4
 800e478:	d1e0      	bne.n	800e43c <_free_r+0x24>
 800e47a:	681c      	ldr	r4, [r3, #0]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	4421      	add	r1, r4
 800e480:	6053      	str	r3, [r2, #4]
 800e482:	6011      	str	r1, [r2, #0]
 800e484:	e7da      	b.n	800e43c <_free_r+0x24>
 800e486:	d902      	bls.n	800e48e <_free_r+0x76>
 800e488:	230c      	movs	r3, #12
 800e48a:	6003      	str	r3, [r0, #0]
 800e48c:	e7d6      	b.n	800e43c <_free_r+0x24>
 800e48e:	6825      	ldr	r5, [r4, #0]
 800e490:	1961      	adds	r1, r4, r5
 800e492:	428b      	cmp	r3, r1
 800e494:	bf02      	ittt	eq
 800e496:	6819      	ldreq	r1, [r3, #0]
 800e498:	685b      	ldreq	r3, [r3, #4]
 800e49a:	1949      	addeq	r1, r1, r5
 800e49c:	6063      	str	r3, [r4, #4]
 800e49e:	bf08      	it	eq
 800e4a0:	6021      	streq	r1, [r4, #0]
 800e4a2:	6054      	str	r4, [r2, #4]
 800e4a4:	e7ca      	b.n	800e43c <_free_r+0x24>
 800e4a6:	b003      	add	sp, #12
 800e4a8:	bd30      	pop	{r4, r5, pc}
 800e4aa:	bf00      	nop
 800e4ac:	2000012c 	.word	0x2000012c

0800e4b0 <sbrk_aligned>:
 800e4b0:	b570      	push	{r4, r5, r6, lr}
 800e4b2:	4e0e      	ldr	r6, [pc, #56]	; (800e4ec <sbrk_aligned+0x3c>)
 800e4b4:	460c      	mov	r4, r1
 800e4b6:	4605      	mov	r5, r0
 800e4b8:	6831      	ldr	r1, [r6, #0]
 800e4ba:	b911      	cbnz	r1, 800e4c2 <sbrk_aligned+0x12>
 800e4bc:	f000 f88c 	bl	800e5d8 <_sbrk_r>
 800e4c0:	6030      	str	r0, [r6, #0]
 800e4c2:	4621      	mov	r1, r4
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	f000 f887 	bl	800e5d8 <_sbrk_r>
 800e4ca:	1c43      	adds	r3, r0, #1
 800e4cc:	d00a      	beq.n	800e4e4 <sbrk_aligned+0x34>
 800e4ce:	1cc4      	adds	r4, r0, #3
 800e4d0:	f024 0403 	bic.w	r4, r4, #3
 800e4d4:	42a0      	cmp	r0, r4
 800e4d6:	d007      	beq.n	800e4e8 <sbrk_aligned+0x38>
 800e4d8:	1a21      	subs	r1, r4, r0
 800e4da:	4628      	mov	r0, r5
 800e4dc:	f000 f87c 	bl	800e5d8 <_sbrk_r>
 800e4e0:	3001      	adds	r0, #1
 800e4e2:	d101      	bne.n	800e4e8 <sbrk_aligned+0x38>
 800e4e4:	f04f 34ff 	mov.w	r4, #4294967295
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	bd70      	pop	{r4, r5, r6, pc}
 800e4ec:	20000130 	.word	0x20000130

0800e4f0 <_malloc_r>:
 800e4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f4:	1ccd      	adds	r5, r1, #3
 800e4f6:	4607      	mov	r7, r0
 800e4f8:	f025 0503 	bic.w	r5, r5, #3
 800e4fc:	3508      	adds	r5, #8
 800e4fe:	2d0c      	cmp	r5, #12
 800e500:	bf38      	it	cc
 800e502:	250c      	movcc	r5, #12
 800e504:	2d00      	cmp	r5, #0
 800e506:	db01      	blt.n	800e50c <_malloc_r+0x1c>
 800e508:	42a9      	cmp	r1, r5
 800e50a:	d905      	bls.n	800e518 <_malloc_r+0x28>
 800e50c:	230c      	movs	r3, #12
 800e50e:	2600      	movs	r6, #0
 800e510:	603b      	str	r3, [r7, #0]
 800e512:	4630      	mov	r0, r6
 800e514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e518:	4e2e      	ldr	r6, [pc, #184]	; (800e5d4 <_malloc_r+0xe4>)
 800e51a:	f000 f907 	bl	800e72c <__malloc_lock>
 800e51e:	6833      	ldr	r3, [r6, #0]
 800e520:	461c      	mov	r4, r3
 800e522:	bb34      	cbnz	r4, 800e572 <_malloc_r+0x82>
 800e524:	4629      	mov	r1, r5
 800e526:	4638      	mov	r0, r7
 800e528:	f7ff ffc2 	bl	800e4b0 <sbrk_aligned>
 800e52c:	1c43      	adds	r3, r0, #1
 800e52e:	4604      	mov	r4, r0
 800e530:	d14d      	bne.n	800e5ce <_malloc_r+0xde>
 800e532:	6834      	ldr	r4, [r6, #0]
 800e534:	4626      	mov	r6, r4
 800e536:	2e00      	cmp	r6, #0
 800e538:	d140      	bne.n	800e5bc <_malloc_r+0xcc>
 800e53a:	6823      	ldr	r3, [r4, #0]
 800e53c:	4631      	mov	r1, r6
 800e53e:	4638      	mov	r0, r7
 800e540:	eb04 0803 	add.w	r8, r4, r3
 800e544:	f000 f848 	bl	800e5d8 <_sbrk_r>
 800e548:	4580      	cmp	r8, r0
 800e54a:	d13a      	bne.n	800e5c2 <_malloc_r+0xd2>
 800e54c:	6821      	ldr	r1, [r4, #0]
 800e54e:	3503      	adds	r5, #3
 800e550:	4638      	mov	r0, r7
 800e552:	1a6d      	subs	r5, r5, r1
 800e554:	f025 0503 	bic.w	r5, r5, #3
 800e558:	3508      	adds	r5, #8
 800e55a:	2d0c      	cmp	r5, #12
 800e55c:	bf38      	it	cc
 800e55e:	250c      	movcc	r5, #12
 800e560:	4629      	mov	r1, r5
 800e562:	f7ff ffa5 	bl	800e4b0 <sbrk_aligned>
 800e566:	3001      	adds	r0, #1
 800e568:	d02b      	beq.n	800e5c2 <_malloc_r+0xd2>
 800e56a:	6823      	ldr	r3, [r4, #0]
 800e56c:	442b      	add	r3, r5
 800e56e:	6023      	str	r3, [r4, #0]
 800e570:	e00e      	b.n	800e590 <_malloc_r+0xa0>
 800e572:	6822      	ldr	r2, [r4, #0]
 800e574:	1b52      	subs	r2, r2, r5
 800e576:	d41e      	bmi.n	800e5b6 <_malloc_r+0xc6>
 800e578:	2a0b      	cmp	r2, #11
 800e57a:	d916      	bls.n	800e5aa <_malloc_r+0xba>
 800e57c:	1961      	adds	r1, r4, r5
 800e57e:	42a3      	cmp	r3, r4
 800e580:	6025      	str	r5, [r4, #0]
 800e582:	bf18      	it	ne
 800e584:	6059      	strne	r1, [r3, #4]
 800e586:	6863      	ldr	r3, [r4, #4]
 800e588:	bf08      	it	eq
 800e58a:	6031      	streq	r1, [r6, #0]
 800e58c:	5162      	str	r2, [r4, r5]
 800e58e:	604b      	str	r3, [r1, #4]
 800e590:	f104 060b 	add.w	r6, r4, #11
 800e594:	4638      	mov	r0, r7
 800e596:	f000 f8cf 	bl	800e738 <__malloc_unlock>
 800e59a:	1d23      	adds	r3, r4, #4
 800e59c:	f026 0607 	bic.w	r6, r6, #7
 800e5a0:	1af2      	subs	r2, r6, r3
 800e5a2:	d0b6      	beq.n	800e512 <_malloc_r+0x22>
 800e5a4:	1b9b      	subs	r3, r3, r6
 800e5a6:	50a3      	str	r3, [r4, r2]
 800e5a8:	e7b3      	b.n	800e512 <_malloc_r+0x22>
 800e5aa:	6862      	ldr	r2, [r4, #4]
 800e5ac:	42a3      	cmp	r3, r4
 800e5ae:	bf0c      	ite	eq
 800e5b0:	6032      	streq	r2, [r6, #0]
 800e5b2:	605a      	strne	r2, [r3, #4]
 800e5b4:	e7ec      	b.n	800e590 <_malloc_r+0xa0>
 800e5b6:	4623      	mov	r3, r4
 800e5b8:	6864      	ldr	r4, [r4, #4]
 800e5ba:	e7b2      	b.n	800e522 <_malloc_r+0x32>
 800e5bc:	4634      	mov	r4, r6
 800e5be:	6876      	ldr	r6, [r6, #4]
 800e5c0:	e7b9      	b.n	800e536 <_malloc_r+0x46>
 800e5c2:	230c      	movs	r3, #12
 800e5c4:	4638      	mov	r0, r7
 800e5c6:	603b      	str	r3, [r7, #0]
 800e5c8:	f000 f8b6 	bl	800e738 <__malloc_unlock>
 800e5cc:	e7a1      	b.n	800e512 <_malloc_r+0x22>
 800e5ce:	6025      	str	r5, [r4, #0]
 800e5d0:	e7de      	b.n	800e590 <_malloc_r+0xa0>
 800e5d2:	bf00      	nop
 800e5d4:	2000012c 	.word	0x2000012c

0800e5d8 <_sbrk_r>:
 800e5d8:	b538      	push	{r3, r4, r5, lr}
 800e5da:	2300      	movs	r3, #0
 800e5dc:	4d05      	ldr	r5, [pc, #20]	; (800e5f4 <_sbrk_r+0x1c>)
 800e5de:	4604      	mov	r4, r0
 800e5e0:	4608      	mov	r0, r1
 800e5e2:	602b      	str	r3, [r5, #0]
 800e5e4:	f7fa f9a2 	bl	800892c <_sbrk>
 800e5e8:	1c43      	adds	r3, r0, #1
 800e5ea:	d102      	bne.n	800e5f2 <_sbrk_r+0x1a>
 800e5ec:	682b      	ldr	r3, [r5, #0]
 800e5ee:	b103      	cbz	r3, 800e5f2 <_sbrk_r+0x1a>
 800e5f0:	6023      	str	r3, [r4, #0]
 800e5f2:	bd38      	pop	{r3, r4, r5, pc}
 800e5f4:	20000134 	.word	0x20000134

0800e5f8 <__sread>:
 800e5f8:	b510      	push	{r4, lr}
 800e5fa:	460c      	mov	r4, r1
 800e5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e600:	f000 f8a0 	bl	800e744 <_read_r>
 800e604:	2800      	cmp	r0, #0
 800e606:	bfab      	itete	ge
 800e608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e60a:	89a3      	ldrhlt	r3, [r4, #12]
 800e60c:	181b      	addge	r3, r3, r0
 800e60e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e612:	bfac      	ite	ge
 800e614:	6563      	strge	r3, [r4, #84]	; 0x54
 800e616:	81a3      	strhlt	r3, [r4, #12]
 800e618:	bd10      	pop	{r4, pc}

0800e61a <__swrite>:
 800e61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e61e:	461f      	mov	r7, r3
 800e620:	898b      	ldrh	r3, [r1, #12]
 800e622:	4605      	mov	r5, r0
 800e624:	460c      	mov	r4, r1
 800e626:	05db      	lsls	r3, r3, #23
 800e628:	4616      	mov	r6, r2
 800e62a:	d505      	bpl.n	800e638 <__swrite+0x1e>
 800e62c:	2302      	movs	r3, #2
 800e62e:	2200      	movs	r2, #0
 800e630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e634:	f000 f868 	bl	800e708 <_lseek_r>
 800e638:	89a3      	ldrh	r3, [r4, #12]
 800e63a:	4632      	mov	r2, r6
 800e63c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e640:	4628      	mov	r0, r5
 800e642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e646:	81a3      	strh	r3, [r4, #12]
 800e648:	463b      	mov	r3, r7
 800e64a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e64e:	f000 b817 	b.w	800e680 <_write_r>

0800e652 <__sseek>:
 800e652:	b510      	push	{r4, lr}
 800e654:	460c      	mov	r4, r1
 800e656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e65a:	f000 f855 	bl	800e708 <_lseek_r>
 800e65e:	1c43      	adds	r3, r0, #1
 800e660:	89a3      	ldrh	r3, [r4, #12]
 800e662:	bf15      	itete	ne
 800e664:	6560      	strne	r0, [r4, #84]	; 0x54
 800e666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e66a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e66e:	81a3      	strheq	r3, [r4, #12]
 800e670:	bf18      	it	ne
 800e672:	81a3      	strhne	r3, [r4, #12]
 800e674:	bd10      	pop	{r4, pc}

0800e676 <__sclose>:
 800e676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e67a:	f000 b813 	b.w	800e6a4 <_close_r>
	...

0800e680 <_write_r>:
 800e680:	b538      	push	{r3, r4, r5, lr}
 800e682:	4604      	mov	r4, r0
 800e684:	4d06      	ldr	r5, [pc, #24]	; (800e6a0 <_write_r+0x20>)
 800e686:	4608      	mov	r0, r1
 800e688:	4611      	mov	r1, r2
 800e68a:	2200      	movs	r2, #0
 800e68c:	602a      	str	r2, [r5, #0]
 800e68e:	461a      	mov	r2, r3
 800e690:	f7f9 ff82 	bl	8008598 <_write>
 800e694:	1c43      	adds	r3, r0, #1
 800e696:	d102      	bne.n	800e69e <_write_r+0x1e>
 800e698:	682b      	ldr	r3, [r5, #0]
 800e69a:	b103      	cbz	r3, 800e69e <_write_r+0x1e>
 800e69c:	6023      	str	r3, [r4, #0]
 800e69e:	bd38      	pop	{r3, r4, r5, pc}
 800e6a0:	20000134 	.word	0x20000134

0800e6a4 <_close_r>:
 800e6a4:	b538      	push	{r3, r4, r5, lr}
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	4d05      	ldr	r5, [pc, #20]	; (800e6c0 <_close_r+0x1c>)
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	4608      	mov	r0, r1
 800e6ae:	602b      	str	r3, [r5, #0]
 800e6b0:	f7fa f907 	bl	80088c2 <_close>
 800e6b4:	1c43      	adds	r3, r0, #1
 800e6b6:	d102      	bne.n	800e6be <_close_r+0x1a>
 800e6b8:	682b      	ldr	r3, [r5, #0]
 800e6ba:	b103      	cbz	r3, 800e6be <_close_r+0x1a>
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	bd38      	pop	{r3, r4, r5, pc}
 800e6c0:	20000134 	.word	0x20000134

0800e6c4 <_fstat_r>:
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	4d06      	ldr	r5, [pc, #24]	; (800e6e4 <_fstat_r+0x20>)
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	4608      	mov	r0, r1
 800e6ce:	4611      	mov	r1, r2
 800e6d0:	602b      	str	r3, [r5, #0]
 800e6d2:	f7fa f902 	bl	80088da <_fstat>
 800e6d6:	1c43      	adds	r3, r0, #1
 800e6d8:	d102      	bne.n	800e6e0 <_fstat_r+0x1c>
 800e6da:	682b      	ldr	r3, [r5, #0]
 800e6dc:	b103      	cbz	r3, 800e6e0 <_fstat_r+0x1c>
 800e6de:	6023      	str	r3, [r4, #0]
 800e6e0:	bd38      	pop	{r3, r4, r5, pc}
 800e6e2:	bf00      	nop
 800e6e4:	20000134 	.word	0x20000134

0800e6e8 <_isatty_r>:
 800e6e8:	b538      	push	{r3, r4, r5, lr}
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	4d05      	ldr	r5, [pc, #20]	; (800e704 <_isatty_r+0x1c>)
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	4608      	mov	r0, r1
 800e6f2:	602b      	str	r3, [r5, #0]
 800e6f4:	f7fa f901 	bl	80088fa <_isatty>
 800e6f8:	1c43      	adds	r3, r0, #1
 800e6fa:	d102      	bne.n	800e702 <_isatty_r+0x1a>
 800e6fc:	682b      	ldr	r3, [r5, #0]
 800e6fe:	b103      	cbz	r3, 800e702 <_isatty_r+0x1a>
 800e700:	6023      	str	r3, [r4, #0]
 800e702:	bd38      	pop	{r3, r4, r5, pc}
 800e704:	20000134 	.word	0x20000134

0800e708 <_lseek_r>:
 800e708:	b538      	push	{r3, r4, r5, lr}
 800e70a:	4604      	mov	r4, r0
 800e70c:	4d06      	ldr	r5, [pc, #24]	; (800e728 <_lseek_r+0x20>)
 800e70e:	4608      	mov	r0, r1
 800e710:	4611      	mov	r1, r2
 800e712:	2200      	movs	r2, #0
 800e714:	602a      	str	r2, [r5, #0]
 800e716:	461a      	mov	r2, r3
 800e718:	f7fa f8fa 	bl	8008910 <_lseek>
 800e71c:	1c43      	adds	r3, r0, #1
 800e71e:	d102      	bne.n	800e726 <_lseek_r+0x1e>
 800e720:	682b      	ldr	r3, [r5, #0]
 800e722:	b103      	cbz	r3, 800e726 <_lseek_r+0x1e>
 800e724:	6023      	str	r3, [r4, #0]
 800e726:	bd38      	pop	{r3, r4, r5, pc}
 800e728:	20000134 	.word	0x20000134

0800e72c <__malloc_lock>:
 800e72c:	4801      	ldr	r0, [pc, #4]	; (800e734 <__malloc_lock+0x8>)
 800e72e:	f7ff be0b 	b.w	800e348 <__retarget_lock_acquire_recursive>
 800e732:	bf00      	nop
 800e734:	20000128 	.word	0x20000128

0800e738 <__malloc_unlock>:
 800e738:	4801      	ldr	r0, [pc, #4]	; (800e740 <__malloc_unlock+0x8>)
 800e73a:	f7ff be06 	b.w	800e34a <__retarget_lock_release_recursive>
 800e73e:	bf00      	nop
 800e740:	20000128 	.word	0x20000128

0800e744 <_read_r>:
 800e744:	b538      	push	{r3, r4, r5, lr}
 800e746:	4604      	mov	r4, r0
 800e748:	4d06      	ldr	r5, [pc, #24]	; (800e764 <_read_r+0x20>)
 800e74a:	4608      	mov	r0, r1
 800e74c:	4611      	mov	r1, r2
 800e74e:	2200      	movs	r2, #0
 800e750:	602a      	str	r2, [r5, #0]
 800e752:	461a      	mov	r2, r3
 800e754:	f7fa f898 	bl	8008888 <_read>
 800e758:	1c43      	adds	r3, r0, #1
 800e75a:	d102      	bne.n	800e762 <_read_r+0x1e>
 800e75c:	682b      	ldr	r3, [r5, #0]
 800e75e:	b103      	cbz	r3, 800e762 <_read_r+0x1e>
 800e760:	6023      	str	r3, [r4, #0]
 800e762:	bd38      	pop	{r3, r4, r5, pc}
 800e764:	20000134 	.word	0x20000134

0800e768 <_init>:
 800e768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76a:	bf00      	nop
 800e76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e76e:	bc08      	pop	{r3}
 800e770:	469e      	mov	lr, r3
 800e772:	4770      	bx	lr

0800e774 <_fini>:
 800e774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e776:	bf00      	nop
 800e778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e77a:	bc08      	pop	{r3}
 800e77c:	469e      	mov	lr, r3
 800e77e:	4770      	bx	lr
